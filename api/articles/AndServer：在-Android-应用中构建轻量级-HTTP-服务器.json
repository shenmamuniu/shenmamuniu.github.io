{"title":"AndServer：在 Android 应用中构建轻量级 HTTP 服务器","slug":"AndServer：在-Android-应用中构建轻量级-HTTP-服务器","date":"2024-03-31T03:29:19.000Z","updated":"2024-03-31T04:01:07.038Z","comments":true,"path":"api/articles/AndServer：在-Android-应用中构建轻量级-HTTP-服务器.json","excerpt":"本文介绍如何在Android app中搭建一个简单的http服务器。","covers":null,"content":"<p>本文介绍如何在Android app中搭建一个简单的http服务器。</p>\n<span id=\"more\"></span>\n\n<blockquote>\n<p>要实现此类功能，可以使用AndServer,NanoHttpd,本文使用AndServer.关于NanoHttpd的使用，可参考:<a href=\"https://blog.csdn.net/small_and_smallworld/article/details/103393070\">https://blog.csdn.net/small_and_smallworld/article/details/103393070</a></p>\n</blockquote>\n<h2 id=\"开发环境\"><a href=\"#开发环境\" class=\"headerlink\" title=\"开发环境\"></a>开发环境</h2><p>Android Studio:2023.1.1<br>Gradle: 8.2<br>AndServer: 2.1.12</p>\n<h2 id=\"AndServer的配置\"><a href=\"#AndServer的配置\" class=\"headerlink\" title=\"AndServer的配置\"></a>AndServer的配置</h2><p>AndServer支持部署静态网站、支持反向代理、支持restful和非restful服务，这里只介绍配置，具体的使用可参考其<a href=\"https://yanzhenjie.com/AndServer/qa/\">官方文档</a>。</p>\n<p>在项目下的build.gradle.kts中添加：</p>\n<pre class=\"line-numbers language-kotlin\" data-language=\"kotlin\"><code class=\"language-kotlin\">buildscript<span class=\"token punctuation\">&#123;</span>\n    dependencies<span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">classpath</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"com.yanzhenjie.andserver:plugin:2.1.12\"</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>在模块下的build.gradle.kts中添加：</p>\n<pre class=\"line-numbers language-kotlin\" data-language=\"kotlin\"><code class=\"language-kotlin\">plugins <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">id</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"com.android.application\"</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">id</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"com.yanzhenjie.andserver\"</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token operator\">..</span><span class=\"token punctuation\">.</span>\ndependencies <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">implementation</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"com.yanzhenjie.andserver:api:2.1.12\"</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">annotationProcessor</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"com.yanzhenjie.andserver:processor:2.1.12\"</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>如果你使用的是groovy dsl，可参考如下写法：</p>\n<pre class=\"line-numbers language-groovy\" data-language=\"groovy\"><code class=\"language-groovy\">buildscript <span class=\"token punctuation\">&#123;</span>\n    repositories <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">google</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token function\">mavenCentral</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    dependencies <span class=\"token punctuation\">&#123;</span>\n        classpath <span class=\"token string\">'com.yanzhenjie.andserver:plugin:2.1.12'</span>\n        <span class=\"token punctuation\">...</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token punctuation\">...</span>\napply plugin<span class=\"token punctuation\">:</span> <span class=\"token string\">'com.yanzhenjie.andserver'</span>\ndependencies <span class=\"token punctuation\">&#123;</span>\n    implementation <span class=\"token string\">'com.yanzhenjie.andserver:api:2.1.12'</span>\n    annotationProcessor <span class=\"token string\">'com.yanzhenjie.andserver:processor:2.1.12'</span>\n    <span class=\"token punctuation\">...</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"关于kotlin-dsl和groovy-dsl\"><a href=\"#关于kotlin-dsl和groovy-dsl\" class=\"headerlink\" title=\"关于kotlin dsl和groovy dsl\"></a>关于kotlin dsl和groovy dsl</h2><blockquote>\n<p>赶紧来个人统一下</p>\n</blockquote>\n<p>Kotlin DSL（Kotlin Domain-Specific Language）和 Groovy DSL（Groovy Domain-Specific Language）是 Gradle 构建脚本中使用的两种不同语法。它们之间的主要差异如下：</p>\n<ol>\n<li><strong>语言</strong>：<ul>\n<li><strong>Groovy DSL</strong>：使用 Groovy 编程语言编写。</li>\n<li><strong>Kotlin DSL</strong>：使用 Kotlin 编程语言编写。</li>\n</ul>\n</li>\n<li><strong>类型检查</strong>：<ul>\n<li><strong>Groovy</strong> 是一种动态语言，而 <strong>Kotlin</strong> 是一种静态类型语言。</li>\n<li>在使用 Kotlin DSL 时，构建脚本的错误可能会在编译时而不是运行时被检测到。</li>\n</ul>\n</li>\n<li><strong>IDE 支持</strong>：<ul>\n<li><strong>Kotlin DSL</strong> 在 Android Studio 的代码编辑器中具有更好的集成，包括语法高亮、代码补全和导航到声明等。</li>\n<li><strong>Groovy DSL</strong> 的 IDE 编辑支持相对较弱。</li>\n</ul>\n</li>\n<li><strong>可读性</strong>：<ul>\n<li><strong>Kotlin</strong> 通常被认为更易读，因为它具有清晰的语法和更严格的类型检查。</li>\n</ul>\n</li>\n<li><strong>性能</strong>：<ul>\n<li>使用 <strong>Kotlin DSL</strong> 构建的构建可能会比使用 <strong>Groovy DSL</strong> 构建的构建慢一些。因此，在迁移时需要考虑构建性能。</li>\n</ul>\n</li>\n</ol>\n<p>总之，Kotlin DSL 提供了更好的 IDE 支持和更严格的类型检查，但在构建性能方面可能略逊于 Groovy DSL。可以根据自己的偏好和项目需求选择其中之一。</p>\n<h2 id=\"另：关于Android项目的几个gradle文件\"><a href=\"#另：关于Android项目的几个gradle文件\" class=\"headerlink\" title=\"另：关于Android项目的几个gradle文件\"></a>另：关于Android项目的几个gradle文件</h2><p>在 Android 项目中，有三个关键的 Gradle 文件，它们分别是：</p>\n<h3 id=\"模块下的build-gradle-kts-文件：\"><a href=\"#模块下的build-gradle-kts-文件：\" class=\"headerlink\" title=\"模块下的build.gradle.kts 文件：\"></a>模块下的build.gradle.kts 文件：</h3><p>模块级别的构建文件，位于每个模块（module）的目录下。<br>主要用于配置模块的构建设置，例如编译选项、依赖库、插件等。<br>包含了构建逻辑，定义了构建过程中的任务和规则。<br>每个模块都有一个独立的 build.gradle.kts 文件。</p>\n<h3 id=\"settings-gradle-kts-文件：\"><a href=\"#settings-gradle-kts-文件：\" class=\"headerlink\" title=\"settings.gradle.kts 文件：\"></a>settings.gradle.kts 文件：</h3><p>项目级别的设置文件，位于项目的根目录下。<br>用于配置整个项目的全局设置，例如哪些子项目（subproject）应该包含在构建中。<br>声明了项目的子模块，让 Gradle 知道哪些模块应该包括在构建中。</p>\n<h3 id=\"项目下的-build-gradle-kts-文件：\"><a href=\"#项目下的-build-gradle-kts-文件：\" class=\"headerlink\" title=\"项目下的 build.gradle.kts 文件：\"></a>项目下的 build.gradle.kts 文件：</h3><p>也称为 Project build script。<br>用于配置整个项目的构建设置，例如 Gradle 版本、全局的依赖库、插件等。<br>这个文件不是模块级别的，而是整个项目的全局设置。</p>\n<p>总结一下：</p>\n<p>build.gradle.kts 文件用于配置模块的构建逻辑和设置。<br>settings.gradle.kts 文件用于配置整个项目的全局设置，包括子模块的声明。<br>项目下的 build.gradle.kts 文件用于配置整个项目的全局构建设置。</p>\n","more":"<blockquote>\n<p>要实现此类功能，可以使用AndServer,NanoHttpd,本文使用AndServer.关于NanoHttpd的使用，可参考:<a href=\"https://blog.csdn.net/small_and_smallworld/article/details/103393070\">https://blog.csdn.net/small_and_smallworld/article/details/103393070</a></p>\n</blockquote>\n<h2 id=\"开发环境\"><a href=\"#开发环境\" class=\"headerlink\" title=\"开发环境\"></a>开发环境</h2><p>Android Studio:2023.1.1<br>Gradle: 8.2<br>AndServer: 2.1.12</p>\n<h2 id=\"AndServer的配置\"><a href=\"#AndServer的配置\" class=\"headerlink\" title=\"AndServer的配置\"></a>AndServer的配置</h2><p>AndServer支持部署静态网站、支持反向代理、支持restful和非restful服务，这里只介绍配置，具体的使用可参考其<a href=\"https://yanzhenjie.com/AndServer/qa/\">官方文档</a>。</p>\n<p>在项目下的build.gradle.kts中添加：</p>\n<pre class=\"line-numbers language-kotlin\" data-language=\"kotlin\"><code class=\"language-kotlin\">buildscript<span class=\"token punctuation\">&#123;</span>\n    dependencies<span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">classpath</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"com.yanzhenjie.andserver:plugin:2.1.12\"</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>在模块下的build.gradle.kts中添加：</p>\n<pre class=\"line-numbers language-kotlin\" data-language=\"kotlin\"><code class=\"language-kotlin\">plugins <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">id</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"com.android.application\"</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">id</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"com.yanzhenjie.andserver\"</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token operator\">..</span><span class=\"token punctuation\">.</span>\ndependencies <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">implementation</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"com.yanzhenjie.andserver:api:2.1.12\"</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">annotationProcessor</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"com.yanzhenjie.andserver:processor:2.1.12\"</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>如果你使用的是groovy dsl，可参考如下写法：</p>\n<pre class=\"line-numbers language-groovy\" data-language=\"groovy\"><code class=\"language-groovy\">buildscript <span class=\"token punctuation\">&#123;</span>\n    repositories <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">google</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token function\">mavenCentral</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    dependencies <span class=\"token punctuation\">&#123;</span>\n        classpath <span class=\"token string\">'com.yanzhenjie.andserver:plugin:2.1.12'</span>\n        <span class=\"token punctuation\">...</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token punctuation\">...</span>\napply plugin<span class=\"token punctuation\">:</span> <span class=\"token string\">'com.yanzhenjie.andserver'</span>\ndependencies <span class=\"token punctuation\">&#123;</span>\n    implementation <span class=\"token string\">'com.yanzhenjie.andserver:api:2.1.12'</span>\n    annotationProcessor <span class=\"token string\">'com.yanzhenjie.andserver:processor:2.1.12'</span>\n    <span class=\"token punctuation\">...</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"关于kotlin-dsl和groovy-dsl\"><a href=\"#关于kotlin-dsl和groovy-dsl\" class=\"headerlink\" title=\"关于kotlin dsl和groovy dsl\"></a>关于kotlin dsl和groovy dsl</h2><blockquote>\n<p>赶紧来个人统一下</p>\n</blockquote>\n<p>Kotlin DSL（Kotlin Domain-Specific Language）和 Groovy DSL（Groovy Domain-Specific Language）是 Gradle 构建脚本中使用的两种不同语法。它们之间的主要差异如下：</p>\n<ol>\n<li><strong>语言</strong>：<ul>\n<li><strong>Groovy DSL</strong>：使用 Groovy 编程语言编写。</li>\n<li><strong>Kotlin DSL</strong>：使用 Kotlin 编程语言编写。</li>\n</ul>\n</li>\n<li><strong>类型检查</strong>：<ul>\n<li><strong>Groovy</strong> 是一种动态语言，而 <strong>Kotlin</strong> 是一种静态类型语言。</li>\n<li>在使用 Kotlin DSL 时，构建脚本的错误可能会在编译时而不是运行时被检测到。</li>\n</ul>\n</li>\n<li><strong>IDE 支持</strong>：<ul>\n<li><strong>Kotlin DSL</strong> 在 Android Studio 的代码编辑器中具有更好的集成，包括语法高亮、代码补全和导航到声明等。</li>\n<li><strong>Groovy DSL</strong> 的 IDE 编辑支持相对较弱。</li>\n</ul>\n</li>\n<li><strong>可读性</strong>：<ul>\n<li><strong>Kotlin</strong> 通常被认为更易读，因为它具有清晰的语法和更严格的类型检查。</li>\n</ul>\n</li>\n<li><strong>性能</strong>：<ul>\n<li>使用 <strong>Kotlin DSL</strong> 构建的构建可能会比使用 <strong>Groovy DSL</strong> 构建的构建慢一些。因此，在迁移时需要考虑构建性能。</li>\n</ul>\n</li>\n</ol>\n<p>总之，Kotlin DSL 提供了更好的 IDE 支持和更严格的类型检查，但在构建性能方面可能略逊于 Groovy DSL。可以根据自己的偏好和项目需求选择其中之一。</p>\n<h2 id=\"另：关于Android项目的几个gradle文件\"><a href=\"#另：关于Android项目的几个gradle文件\" class=\"headerlink\" title=\"另：关于Android项目的几个gradle文件\"></a>另：关于Android项目的几个gradle文件</h2><p>在 Android 项目中，有三个关键的 Gradle 文件，它们分别是：</p>\n<h3 id=\"模块下的build-gradle-kts-文件：\"><a href=\"#模块下的build-gradle-kts-文件：\" class=\"headerlink\" title=\"模块下的build.gradle.kts 文件：\"></a>模块下的build.gradle.kts 文件：</h3><p>模块级别的构建文件，位于每个模块（module）的目录下。<br>主要用于配置模块的构建设置，例如编译选项、依赖库、插件等。<br>包含了构建逻辑，定义了构建过程中的任务和规则。<br>每个模块都有一个独立的 build.gradle.kts 文件。</p>\n<h3 id=\"settings-gradle-kts-文件：\"><a href=\"#settings-gradle-kts-文件：\" class=\"headerlink\" title=\"settings.gradle.kts 文件：\"></a>settings.gradle.kts 文件：</h3><p>项目级别的设置文件，位于项目的根目录下。<br>用于配置整个项目的全局设置，例如哪些子项目（subproject）应该包含在构建中。<br>声明了项目的子模块，让 Gradle 知道哪些模块应该包括在构建中。</p>\n<h3 id=\"项目下的-build-gradle-kts-文件：\"><a href=\"#项目下的-build-gradle-kts-文件：\" class=\"headerlink\" title=\"项目下的 build.gradle.kts 文件：\"></a>项目下的 build.gradle.kts 文件：</h3><p>也称为 Project build script。<br>用于配置整个项目的构建设置，例如 Gradle 版本、全局的依赖库、插件等。<br>这个文件不是模块级别的，而是整个项目的全局设置。</p>\n<p>总结一下：</p>\n<p>build.gradle.kts 文件用于配置模块的构建逻辑和设置。<br>settings.gradle.kts 文件用于配置整个项目的全局设置，包括子模块的声明。<br>项目下的 build.gradle.kts 文件用于配置整个项目的全局构建设置。</p>","categories":[{"name":"Android","path":"api/categories/Android.json"}],"tags":[{"name":"Android","path":"api/tags/Android.json"}]}