{"title":"独立而不孤立：前端样式隔离的策略","slug":"独立而不孤立：前端样式隔离的策略","date":"2024-03-14T11:24:18.000Z","updated":"2024-03-14T12:15:28.254Z","comments":true,"path":"api/articles/独立而不孤立：前端样式隔离的策略.json","excerpt":"在使用js设置元素的html时，当里面引入了其他js文件时，可能会影响到外部的元素，此时需要做样式隔离，本文主要探讨前端样式隔离的几种策略。","covers":null,"content":"<p>在使用js设置元素的html时，当里面引入了其他js文件时，可能会影响到外部的元素，此时需要做样式隔离，本文主要探讨前端样式隔离的几种策略。</p>\n<span id=\"more\"></span>\n\n<blockquote>\n<p><strong>说明：</strong>本文主要来源于在html中元素中嵌入流程图的流转记录，尝试的方法为Shadow DOM，但涉及到过多脚本和样式，最终还是采取在新页面中查看流程图。</p>\n</blockquote>\n<h2 id=\"使用css命名空间\"><a href=\"#使用css命名空间\" class=\"headerlink\" title=\"使用css命名空间\"></a>使用css命名空间</h2><p> 给div内部的样式添加特定的前缀或命名空间，以避免样式冲突。 <strong>@namespace</strong>规则通常在处理包含多个 namespaces 的文档时才有用，比如 HTML5 里内联的 SVG、MathML 或者混合多个词汇表的 XML 。如下面这个示例指挥选择svg命名空间种的circle元素：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">@namespace svg <span class=\"token string\">\"http://www.w3.org/2000/svg\"</span><span class=\"token punctuation\">;</span>\n\nsvg<span class=\"token operator\">|</span>circle <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token literal-property property\">fill</span><span class=\"token operator\">:</span> green<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>参考： <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/@namespace\">@namespace - CSS：层叠样式表 | MDN (mozilla.org)</a> </p>\n<h2 id=\"使用iframe\"><a href=\"#使用iframe\" class=\"headerlink\" title=\"使用iframe\"></a>使用iframe</h2><p> 如果将HTML内容放入<code>iframe</code>中，那么<code>iframe</code>内的样式默认不会影响到外部文档。 </p>\n<h2 id=\"使用内联样式\"><a href=\"#使用内联样式\" class=\"headerlink\" title=\"使用内联样式\"></a>使用内联样式</h2><p> 直接在HTML元素上使用<code>style</code>属性定义样式，这样定义的样式只会影响到该元素。 如：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&lt;div style&#x3D;&quot;&quot;&gt;&lt;&#x2F;div&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n\n\n<h2 id=\"使用CSS-Modules\"><a href=\"#使用CSS-Modules\" class=\"headerlink\" title=\"使用CSS Modules\"></a>使用<strong>CSS Modules</strong></h2><p>这是一种自动为类名生成唯一哈希值的技术，从而确保样式的局部作用域。在构建过程中，CSS Modules会自动转换类名，如：</p>\n <pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token operator\">&lt;</span>template<span class=\"token operator\">></span>\n\n  <span class=\"token operator\">&lt;</span>p <span class=\"token operator\">:</span><span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token string\">\"$style.red\"</span><span class=\"token operator\">></span>This should be red<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n\n  <span class=\"token operator\">&lt;</span>p <span class=\"token operator\">:</span><span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token string\">\"$style.red\"</span><span class=\"token operator\">></span>This should be red<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n\n  <span class=\"token operator\">&lt;</span>p <span class=\"token operator\">:</span><span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token string\">\"$style.bold\"</span><span class=\"token operator\">></span>This should be bold<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>template<span class=\"token operator\">></span>\n\n\n\n<span class=\"token operator\">&lt;</span>style module<span class=\"token operator\">></span>\n\n  <span class=\"token punctuation\">.</span>red <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token literal-property property\">color</span><span class=\"token operator\">:</span> red<span class=\"token punctuation\">;</span>\n\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token punctuation\">.</span>bold <span class=\"token punctuation\">&#123;</span>\n\n    font<span class=\"token operator\">-</span>weight<span class=\"token operator\">:</span> bold<span class=\"token punctuation\">;</span>\n\n  <span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>style<span class=\"token operator\">></span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h2 id=\"使用Scoped-CSS\"><a href=\"#使用Scoped-CSS\" class=\"headerlink\" title=\"使用Scoped CSS\"></a><strong>使用Scoped CSS</strong></h2><p> 在Vue.js等现代前端框架中，您可以使用<code>scoped</code>属性在&#96;&#96;标签中声明样式，这样样式只会应用于当前组件的元素 ，如：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token operator\">&lt;</span>style scoped<span class=\"token operator\">></span>\n\n  <span class=\"token punctuation\">.</span>example <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token literal-property property\">color</span><span class=\"token operator\">:</span> red<span class=\"token punctuation\">;</span>\n\n  <span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>style<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>template<span class=\"token operator\">></span>\n\n  <span class=\"token operator\">&lt;</span>div <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token string\">\"example\"</span><span class=\"token operator\">></span>hi<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>template<span class=\"token operator\">></span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>同<strong>css modules</strong>的区分：</p>\n<ul>\n<li><strong>scoped css</strong>: 这是Vue.js特有的一个功能，它允许您将CSS样式限制在单个组件的范围内。当您在一个Vue组件中使用style scoped时，Vue会通过PostCSS转换为每个CSS选择器添加一个独特的属性，如data-v-{hash}，以确保样式只应用于当前组件的元素。</li>\n<li><strong>css modules</strong>: 这是CSS Modules的一种实现，它不是Vue特有的，可以在任何支持CSS Modules的构建系统中使用。当您使用style type&#x3D;”module”时，每个类名和动画名都会被编译成一个局部作用域的唯一名称，通常是通过Webpack等构建工具实现的。这意味着您可以在JavaScript中引用这些样式，因为它们被视为模块的一部分。</li>\n</ul>\n<p>总的来说，scoped属性更多地依赖于Vue的构建系统和PostCSS插件来实现样式的封装，而type&#x3D;”module”则是利用CSS Modules的技术，它可以跨不同的框架和工具使用。</p>\n<h2 id=\"使用Shadow-DOM\"><a href=\"#使用Shadow-DOM\" class=\"headerlink\" title=\"使用Shadow DOM\"></a>使用<strong>Shadow DOM</strong></h2><p>这是Web组件标准的一部分，它允许您将一段DOM与其余的页面隔离开来。在Shadow DOM中的样式不会泄漏到外部，外部样式也不会影响到Shadow DOM内部。 使用步骤如下：</p>\n<h3 id=\"创建宿主元素\"><a href=\"#创建宿主元素\" class=\"headerlink\" title=\"创建宿主元素\"></a><strong>创建宿主元素</strong></h3><pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>shadow-host<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"附加shadow-root\"><a href=\"#附加shadow-root\" class=\"headerlink\" title=\"附加shadow root\"></a>附加shadow root</h3><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> hostElement <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'shadow-host'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> shadowRoot <span class=\"token operator\">=</span> hostElement<span class=\"token punctuation\">.</span><span class=\"token function\">attachShadow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">mode</span><span class=\"token operator\">:</span> <span class=\"token string\">'open'</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>有2种模式：open和closed,区别在于对Shadow DOM的访问控制，具体如下：</p>\n<ul>\n<li><strong>Open Mode (<code>mode: &#39;open&#39;</code>)</strong>: 在这种模式下，Shadow DOM是开放的，您可以通过宿主元素的<code>shadowRoot</code>属性来访问Shadow DOM。这意味着任何页面上的JavaScript代码都可以查询和操作Shadow DOM内部的节点</li>\n<li><strong>Closed Mode (<code>mode: &#39;closed&#39;</code>)</strong>: 在这种模式下，Shadow DOM是封闭的，宿主元素的<code>shadowRoot</code>属性将返回<code>null</code>，这阻止了外部JavaScript代码访问Shadow DOM。即使您知道Shadow DOM存在，也无法直接与其内部的节点交互</li>\n</ul>\n<h3 id=\"添加样式和内容\"><a href=\"#添加样式和内容\" class=\"headerlink\" title=\"添加样式和内容\"></a>添加样式和内容</h3><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 添加内部样式</span>\n<span class=\"token keyword\">const</span> style <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'style'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nstyle<span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n  /* 这里的样式只会影响Shadow DOM内部的元素 */\n  .example &#123; color: red; &#125;\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\nshadowRoot<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>style<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 添加HTML内容</span>\nshadowRoot<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> <span class=\"token string\">'&lt;div class=\"example\">Shadow DOM 内容&lt;/div>'</span><span class=\"token punctuation\">;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p> 通过这种方式，您可以将样式和内容封装在Shadow DOM中，从而避免对全局样式造成影响。 </p>\n<p>另外需要注意的是当通过innerHTML的方式设置内容时，浏览器不会执行内联脚本，即script标签内的内容。</p>\n<h3 id=\"Shadown-DOM中脚本的执行\"><a href=\"#Shadown-DOM中脚本的执行\" class=\"headerlink\" title=\"Shadown DOM中脚本的执行\"></a>Shadown DOM中脚本的执行</h3><ul>\n<li><p>通过动态创建脚本元素</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> script <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'script'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nscript<span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">=</span> <span class=\"token string\">'console.log(\"脚本执行了\");'</span><span class=\"token punctuation\">;</span>\nshadowRoot<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>script<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n\n</li>\n<li><p>使用外部脚本</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> script <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'script'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nscript<span class=\"token punctuation\">.</span>src <span class=\"token operator\">=</span> <span class=\"token string\">'path/to/your/script.js'</span><span class=\"token punctuation\">;</span>\nshadowRoot<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>script<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n\n</li>\n<li><p>模块化脚本</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> script <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'script'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nscript<span class=\"token punctuation\">.</span>type <span class=\"token operator\">=</span> <span class=\"token string\">'module'</span><span class=\"token punctuation\">;</span>\nscript<span class=\"token punctuation\">.</span>src <span class=\"token operator\">=</span> <span class=\"token string\">'path/to/your/module.js'</span><span class=\"token punctuation\">;</span>\nshadowRoot<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>script<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n<blockquote>\n<p><strong>注意：</strong>这3种方法的前提时shadow dom的模式是open。</p>\n</blockquote>\n<h2 id=\"参考文档\"><a href=\"#参考文档\" class=\"headerlink\" title=\"参考文档\"></a>参考文档</h2><p> <a href=\"https://chenkai.life/css/css-web-compoent-isolation/#%E7%B1%BB%E5%90%8D%E6%B7%BB%E5%8A%A0%E7%89%B9%E5%AE%9A%E7%9A%84%E5%89%8D%E7%BC%80\">1、组件间样式隔离的几种方案 · CK’s Blog (chenkai.life)</a> </p>\n<p> <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/@namespace\">2、@namespace - CSS：层叠样式表 | MDN (mozilla.org)</a> </p>\n","more":"<blockquote>\n<p><strong>说明：</strong>本文主要来源于在html中元素中嵌入流程图的流转记录，尝试的方法为Shadow DOM，但涉及到过多脚本和样式，最终还是采取在新页面中查看流程图。</p>\n</blockquote>\n<h2 id=\"使用css命名空间\"><a href=\"#使用css命名空间\" class=\"headerlink\" title=\"使用css命名空间\"></a>使用css命名空间</h2><p> 给div内部的样式添加特定的前缀或命名空间，以避免样式冲突。 <strong>@namespace</strong>规则通常在处理包含多个 namespaces 的文档时才有用，比如 HTML5 里内联的 SVG、MathML 或者混合多个词汇表的 XML 。如下面这个示例指挥选择svg命名空间种的circle元素：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">@namespace svg <span class=\"token string\">\"http://www.w3.org/2000/svg\"</span><span class=\"token punctuation\">;</span>\n\nsvg<span class=\"token operator\">|</span>circle <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token literal-property property\">fill</span><span class=\"token operator\">:</span> green<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>参考： <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/@namespace\">@namespace - CSS：层叠样式表 | MDN (mozilla.org)</a> </p>\n<h2 id=\"使用iframe\"><a href=\"#使用iframe\" class=\"headerlink\" title=\"使用iframe\"></a>使用iframe</h2><p> 如果将HTML内容放入<code>iframe</code>中，那么<code>iframe</code>内的样式默认不会影响到外部文档。 </p>\n<h2 id=\"使用内联样式\"><a href=\"#使用内联样式\" class=\"headerlink\" title=\"使用内联样式\"></a>使用内联样式</h2><p> 直接在HTML元素上使用<code>style</code>属性定义样式，这样定义的样式只会影响到该元素。 如：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&lt;div style&#x3D;&quot;&quot;&gt;&lt;&#x2F;div&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n\n\n<h2 id=\"使用CSS-Modules\"><a href=\"#使用CSS-Modules\" class=\"headerlink\" title=\"使用CSS Modules\"></a>使用<strong>CSS Modules</strong></h2><p>这是一种自动为类名生成唯一哈希值的技术，从而确保样式的局部作用域。在构建过程中，CSS Modules会自动转换类名，如：</p>\n <pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token operator\">&lt;</span>template<span class=\"token operator\">></span>\n\n  <span class=\"token operator\">&lt;</span>p <span class=\"token operator\">:</span><span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token string\">\"$style.red\"</span><span class=\"token operator\">></span>This should be red<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n\n  <span class=\"token operator\">&lt;</span>p <span class=\"token operator\">:</span><span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token string\">\"$style.red\"</span><span class=\"token operator\">></span>This should be red<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n\n  <span class=\"token operator\">&lt;</span>p <span class=\"token operator\">:</span><span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token string\">\"$style.bold\"</span><span class=\"token operator\">></span>This should be bold<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>template<span class=\"token operator\">></span>\n\n\n\n<span class=\"token operator\">&lt;</span>style module<span class=\"token operator\">></span>\n\n  <span class=\"token punctuation\">.</span>red <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token literal-property property\">color</span><span class=\"token operator\">:</span> red<span class=\"token punctuation\">;</span>\n\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token punctuation\">.</span>bold <span class=\"token punctuation\">&#123;</span>\n\n    font<span class=\"token operator\">-</span>weight<span class=\"token operator\">:</span> bold<span class=\"token punctuation\">;</span>\n\n  <span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>style<span class=\"token operator\">></span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h2 id=\"使用Scoped-CSS\"><a href=\"#使用Scoped-CSS\" class=\"headerlink\" title=\"使用Scoped CSS\"></a><strong>使用Scoped CSS</strong></h2><p> 在Vue.js等现代前端框架中，您可以使用<code>scoped</code>属性在&#96;&#96;标签中声明样式，这样样式只会应用于当前组件的元素 ，如：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token operator\">&lt;</span>style scoped<span class=\"token operator\">></span>\n\n  <span class=\"token punctuation\">.</span>example <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token literal-property property\">color</span><span class=\"token operator\">:</span> red<span class=\"token punctuation\">;</span>\n\n  <span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>style<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>template<span class=\"token operator\">></span>\n\n  <span class=\"token operator\">&lt;</span>div <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token string\">\"example\"</span><span class=\"token operator\">></span>hi<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>template<span class=\"token operator\">></span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>同<strong>css modules</strong>的区分：</p>\n<ul>\n<li><strong>scoped css</strong>: 这是Vue.js特有的一个功能，它允许您将CSS样式限制在单个组件的范围内。当您在一个Vue组件中使用style scoped时，Vue会通过PostCSS转换为每个CSS选择器添加一个独特的属性，如data-v-{hash}，以确保样式只应用于当前组件的元素。</li>\n<li><strong>css modules</strong>: 这是CSS Modules的一种实现，它不是Vue特有的，可以在任何支持CSS Modules的构建系统中使用。当您使用style type&#x3D;”module”时，每个类名和动画名都会被编译成一个局部作用域的唯一名称，通常是通过Webpack等构建工具实现的。这意味着您可以在JavaScript中引用这些样式，因为它们被视为模块的一部分。</li>\n</ul>\n<p>总的来说，scoped属性更多地依赖于Vue的构建系统和PostCSS插件来实现样式的封装，而type&#x3D;”module”则是利用CSS Modules的技术，它可以跨不同的框架和工具使用。</p>\n<h2 id=\"使用Shadow-DOM\"><a href=\"#使用Shadow-DOM\" class=\"headerlink\" title=\"使用Shadow DOM\"></a>使用<strong>Shadow DOM</strong></h2><p>这是Web组件标准的一部分，它允许您将一段DOM与其余的页面隔离开来。在Shadow DOM中的样式不会泄漏到外部，外部样式也不会影响到Shadow DOM内部。 使用步骤如下：</p>\n<h3 id=\"创建宿主元素\"><a href=\"#创建宿主元素\" class=\"headerlink\" title=\"创建宿主元素\"></a><strong>创建宿主元素</strong></h3><pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>shadow-host<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"附加shadow-root\"><a href=\"#附加shadow-root\" class=\"headerlink\" title=\"附加shadow root\"></a>附加shadow root</h3><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> hostElement <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'shadow-host'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> shadowRoot <span class=\"token operator\">=</span> hostElement<span class=\"token punctuation\">.</span><span class=\"token function\">attachShadow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">mode</span><span class=\"token operator\">:</span> <span class=\"token string\">'open'</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>有2种模式：open和closed,区别在于对Shadow DOM的访问控制，具体如下：</p>\n<ul>\n<li><strong>Open Mode (<code>mode: &#39;open&#39;</code>)</strong>: 在这种模式下，Shadow DOM是开放的，您可以通过宿主元素的<code>shadowRoot</code>属性来访问Shadow DOM。这意味着任何页面上的JavaScript代码都可以查询和操作Shadow DOM内部的节点</li>\n<li><strong>Closed Mode (<code>mode: &#39;closed&#39;</code>)</strong>: 在这种模式下，Shadow DOM是封闭的，宿主元素的<code>shadowRoot</code>属性将返回<code>null</code>，这阻止了外部JavaScript代码访问Shadow DOM。即使您知道Shadow DOM存在，也无法直接与其内部的节点交互</li>\n</ul>\n<h3 id=\"添加样式和内容\"><a href=\"#添加样式和内容\" class=\"headerlink\" title=\"添加样式和内容\"></a>添加样式和内容</h3><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 添加内部样式</span>\n<span class=\"token keyword\">const</span> style <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'style'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nstyle<span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n  /* 这里的样式只会影响Shadow DOM内部的元素 */\n  .example &#123; color: red; &#125;\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\nshadowRoot<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>style<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 添加HTML内容</span>\nshadowRoot<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> <span class=\"token string\">'&lt;div class=\"example\">Shadow DOM 内容&lt;/div>'</span><span class=\"token punctuation\">;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p> 通过这种方式，您可以将样式和内容封装在Shadow DOM中，从而避免对全局样式造成影响。 </p>\n<p>另外需要注意的是当通过innerHTML的方式设置内容时，浏览器不会执行内联脚本，即script标签内的内容。</p>\n<h3 id=\"Shadown-DOM中脚本的执行\"><a href=\"#Shadown-DOM中脚本的执行\" class=\"headerlink\" title=\"Shadown DOM中脚本的执行\"></a>Shadown DOM中脚本的执行</h3><ul>\n<li><p>通过动态创建脚本元素</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> script <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'script'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nscript<span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">=</span> <span class=\"token string\">'console.log(\"脚本执行了\");'</span><span class=\"token punctuation\">;</span>\nshadowRoot<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>script<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n\n</li>\n<li><p>使用外部脚本</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> script <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'script'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nscript<span class=\"token punctuation\">.</span>src <span class=\"token operator\">=</span> <span class=\"token string\">'path/to/your/script.js'</span><span class=\"token punctuation\">;</span>\nshadowRoot<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>script<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n\n</li>\n<li><p>模块化脚本</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> script <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'script'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nscript<span class=\"token punctuation\">.</span>type <span class=\"token operator\">=</span> <span class=\"token string\">'module'</span><span class=\"token punctuation\">;</span>\nscript<span class=\"token punctuation\">.</span>src <span class=\"token operator\">=</span> <span class=\"token string\">'path/to/your/module.js'</span><span class=\"token punctuation\">;</span>\nshadowRoot<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>script<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n<blockquote>\n<p><strong>注意：</strong>这3种方法的前提时shadow dom的模式是open。</p>\n</blockquote>\n<h2 id=\"参考文档\"><a href=\"#参考文档\" class=\"headerlink\" title=\"参考文档\"></a>参考文档</h2><p> <a href=\"https://chenkai.life/css/css-web-compoent-isolation/#%E7%B1%BB%E5%90%8D%E6%B7%BB%E5%8A%A0%E7%89%B9%E5%AE%9A%E7%9A%84%E5%89%8D%E7%BC%80\">1、组件间样式隔离的几种方案 · CK’s Blog (chenkai.life)</a> </p>\n<p> <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/@namespace\">2、@namespace - CSS：层叠样式表 | MDN (mozilla.org)</a> </p>","categories":[{"name":"CSS、HTML","path":"api/categories/CSS、HTML.json"}],"tags":[{"name":"CSS、HTML","path":"api/tags/CSS、HTML.json"}]}