{"title":"Ubuntu下Docker的安装及常用命令","slug":"6","date":"2019-11-14T14:47:00.000Z","updated":"2020-07-31T06:13:33.000Z","comments":true,"path":"api/articles/6.json","excerpt":"本文主要记录ubuntu下，docker的安装及常用命令。","covers":null,"content":"<p>本文主要记录ubuntu下，docker的安装及常用命令。</p>\n<span id=\"more\"></span>\n<h2 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h2><ol>\n<li>Ubuntu: 16.04</li>\n</ol>\n<h2 id=\"Docker的安装\"><a href=\"#Docker的安装\" class=\"headerlink\" title=\"Docker的安装\"></a>Docker的安装</h2><pre class=\"line-numbers language-none\"><code class=\"language-none\">$ sudo apt-get update\n\n$ sudo apt-get install \\\n    apt-transport-https \\\n    ca-certificates \\\n    curl \\\n    software-properties-common\n鉴于国内网络问题，强烈建议使用国内源，官方源请在注释中查看。\n\n为了确认所下载软件包的合法性，需要添加软件源的 GPG 密钥。\n\n$ curl -fsSL https:&#x2F;&#x2F;mirrors.ustc.edu.cn&#x2F;docker-ce&#x2F;linux&#x2F;ubuntu&#x2F;gpg | sudo apt-key add -\n\n\n# 官方源\n# $ curl -fsSL https:&#x2F;&#x2F;download.docker.com&#x2F;linux&#x2F;ubuntu&#x2F;gpg | sudo apt-key add -\n\n然后，我们需要向 source.list 中添加 Docker 软件源\n\n$ sudo add-apt-repository \\\n    &quot;deb [arch&#x3D;amd64] https:&#x2F;&#x2F;mirrors.ustc.edu.cn&#x2F;docker-ce&#x2F;linux&#x2F;ubuntu \\\n    $(lsb_release -cs) \\\n    stable&quot;\n\n\n# 官方源\n# $ sudo add-apt-repository \\\n#    &quot;deb [arch&#x3D;amd64] https:&#x2F;&#x2F;download.docker.com&#x2F;linux&#x2F;ubuntu \\\n#    $(lsb_release -cs) \\\n#    stable&quot;\n\n    以上命令会添加稳定版本的 Docker CE APT 镜像源，如果需要最新或者测试版本的 Docker CE 请将 stable 改为 edge 或者 test。从 Docker 17.06 开始，edge test 版本的 APT 镜像源也会包含稳定版本的 Docker。\n    \n安装 Docker CE\n\n更新 apt 软件包缓存，并安装 docker-ce：\n\n$ sudo apt-get update\n\n$ sudo apt-get install docker-ce\n\n验证是否安装正确\n\ndocker run hello-world\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"镜像\"><a href=\"#镜像\" class=\"headerlink\" title=\"镜像\"></a>镜像</h2><p>镜像简单理解就是一个操作系统的安装包，而容器就是一个具体运行的一个操作系统，及镜像安装完成之后的存在。</p>\n<h3 id=\"获取镜像\"><a href=\"#获取镜像\" class=\"headerlink\" title=\"获取镜像\"></a>获取镜像</h3><p>从 <a href=\"https://hub.docker.com/explore/\">https://hub.docker.com/explore/</a> 获取，可以直接pull,也可以通过Dockerfile自行build.</p>\n<ol>\n<li>直接pull下来的镜像，直接可以拿来运行就可以了，具体如下：<pre class=\"line-numbers language-none\"><code class=\"language-none\"># pull一个ubuntu系统镜像本16.04\ndocker pull ubuntu:16.04\n# 运行此镜像，运行起来的镜像就被称作容器\ndocker run -it ubuntu:16.04<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li>通过Dockerfile自行build镜像<br>首先要有一个Dockerfile,文件名就是Dockerfile,然后进入此目录，执行以下命令：<pre class=\"line-numbers language-none\"><code class=\"language-none\">docker build -t&#x3D;&quot;saymagic&#x2F;ubuntu-nginx:v2&quot; .\n然后build成功之后，run即可<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n其中：-t是容器的名字或标签， <strong>.</strong> 不要省略</li>\n</ol>\n<h3 id=\"镜像的上传\"><a href=\"#镜像的上传\" class=\"headerlink\" title=\"镜像的上传\"></a>镜像的上传</h3><p>对于我们自己的镜像，如果想要给其他人，可以将其上传到docker hub,需要在docker hub中注册用户才可以。</p>\n<ol>\n<li>docker login<br>登录，使用在docker hub中注册用户</li>\n<li>docker push saymagic&#x2F;ubuntu-nginx:v1<br>将本地的镜像推送到docker hub中去，这样所有人都可以访问到了，不过可以在docker hub中将其设置为Private的就只能自己访问了</li>\n</ol>\n<h3 id=\"镜像相关命令\"><a href=\"#镜像相关命令\" class=\"headerlink\" title=\"镜像相关命令\"></a>镜像相关命令</h3><h5 id=\"docker-images\"><a href=\"#docker-images\" class=\"headerlink\" title=\"docker images\"></a>docker images</h5><p>查看所有镜像</p>\n<h5 id=\"docker-rmi-xxx\"><a href=\"#docker-rmi-xxx\" class=\"headerlink\" title=\"docker rmi xxx\"></a>docker rmi xxx</h5><p>删除指定镜像：xxx为镜像id</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\"># 强制删除全部镜像\ndocker rmi -f $(docker images -q)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h2 id=\"关于容器\"><a href=\"#关于容器\" class=\"headerlink\" title=\"关于容器\"></a>关于容器</h2><h3 id=\"容器相关命令\"><a href=\"#容器相关命令\" class=\"headerlink\" title=\"容器相关命令\"></a>容器相关命令</h3><h4 id=\"ps\"><a href=\"#ps\" class=\"headerlink\" title=\"ps\"></a>ps</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\"># 查看正在运行的容器\ndocker ps\n# 查看所有容器\ndocker ps -a\n# 停止正在运行的容器\ndocker stop $(docker ps -q)\n# 删除全部容器\ndocker rm $(docker ps -aq)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"run\"><a href=\"#run\" class=\"headerlink\" title=\"run\"></a>run</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">docker run -d  -v &#x2F;opt&#x2F;jenkins_home:&#x2F;var&#x2F;jenkins_home  -p 8089:8080 -p 50000:50000  jenkins&#x2F;jenkins:lts<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><strong>参数说明:</strong></p>\n<ol>\n<li>-d:后台运行</li>\n<li>-v:磁盘挂载或映射，此条命令就是本地的&#x2F;opt&#x2F;jenkins_home映射到容器的&#x2F;var&#x2F;jenkins_home目录下，即容器中存储到&#x2F;var&#x2F;jenkins_home目录下的数据实际上是存储到了本地的&#x2F;opt&#x2F;jenkins_home目录中</li>\n<li>-p:端口映射,外部可通过8089端口访问到容器中的8080端口,即：hostIp:containerIp</li>\n<li>-e:环境变量，如-e MYSQL_PASSWORD&#x3D;yearning123</li>\n</ol>\n<h4 id=\"start\"><a href=\"#start\" class=\"headerlink\" title=\"start\"></a>start</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">docker start xxx<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>其中xxx为已经停止的容器的ID</p>\n<h4 id=\"exec\"><a href=\"#exec\" class=\"headerlink\" title=\"exec\"></a>exec</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">docker exec -ti 1a5da130bf74 &#x2F;bin&#x2F;bash<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>连接到容器</p>\n<h4 id=\"cp\"><a href=\"#cp\" class=\"headerlink\" title=\"cp\"></a>cp</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">docker cp  &#x2F;opt&#x2F;jeisp-admin.war f22e7a0b2562:&#x2F;opt&#x2F;jeisp-admin.war\ndocker cp f22e7a0b2562:&#x2F;opt&#x2F;jeisp-admin.war  &#x2F;opt&#x2F;jeisp-admin.war<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>将host中的文件copy到容器中和将容器中的文件copy到host中</p>\n<h4 id=\"commit\"><a href=\"#commit\" class=\"headerlink\" title=\"commit\"></a>commit</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">docker commit -m &quot;Added nginx from ubuntu14.04&quot; -a &quot;saymagic&quot; 79c761f627f3 saymagic&#x2F;ubuntu-nginx:v1<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>将正在运行的容器转为镜像</p>\n<h2 id=\"Referenced\"><a href=\"#Referenced\" class=\"headerlink\" title=\"Referenced\"></a>Referenced</h2><p>1: <a href=\"https://yeasy.gitbooks.io/docker_practice/content/install/ubuntu.html\">docker——入门到实践</a></p>\n","more":"<h2 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h2><ol>\n<li>Ubuntu: 16.04</li>\n</ol>\n<h2 id=\"Docker的安装\"><a href=\"#Docker的安装\" class=\"headerlink\" title=\"Docker的安装\"></a>Docker的安装</h2><pre class=\"line-numbers language-none\"><code class=\"language-none\">$ sudo apt-get update\n\n$ sudo apt-get install \\\n    apt-transport-https \\\n    ca-certificates \\\n    curl \\\n    software-properties-common\n鉴于国内网络问题，强烈建议使用国内源，官方源请在注释中查看。\n\n为了确认所下载软件包的合法性，需要添加软件源的 GPG 密钥。\n\n$ curl -fsSL https:&#x2F;&#x2F;mirrors.ustc.edu.cn&#x2F;docker-ce&#x2F;linux&#x2F;ubuntu&#x2F;gpg | sudo apt-key add -\n\n\n# 官方源\n# $ curl -fsSL https:&#x2F;&#x2F;download.docker.com&#x2F;linux&#x2F;ubuntu&#x2F;gpg | sudo apt-key add -\n\n然后，我们需要向 source.list 中添加 Docker 软件源\n\n$ sudo add-apt-repository \\\n    &quot;deb [arch&#x3D;amd64] https:&#x2F;&#x2F;mirrors.ustc.edu.cn&#x2F;docker-ce&#x2F;linux&#x2F;ubuntu \\\n    $(lsb_release -cs) \\\n    stable&quot;\n\n\n# 官方源\n# $ sudo add-apt-repository \\\n#    &quot;deb [arch&#x3D;amd64] https:&#x2F;&#x2F;download.docker.com&#x2F;linux&#x2F;ubuntu \\\n#    $(lsb_release -cs) \\\n#    stable&quot;\n\n    以上命令会添加稳定版本的 Docker CE APT 镜像源，如果需要最新或者测试版本的 Docker CE 请将 stable 改为 edge 或者 test。从 Docker 17.06 开始，edge test 版本的 APT 镜像源也会包含稳定版本的 Docker。\n    \n安装 Docker CE\n\n更新 apt 软件包缓存，并安装 docker-ce：\n\n$ sudo apt-get update\n\n$ sudo apt-get install docker-ce\n\n验证是否安装正确\n\ndocker run hello-world\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"镜像\"><a href=\"#镜像\" class=\"headerlink\" title=\"镜像\"></a>镜像</h2><p>镜像简单理解就是一个操作系统的安装包，而容器就是一个具体运行的一个操作系统，及镜像安装完成之后的存在。</p>\n<h3 id=\"获取镜像\"><a href=\"#获取镜像\" class=\"headerlink\" title=\"获取镜像\"></a>获取镜像</h3><p>从 <a href=\"https://hub.docker.com/explore/\">https://hub.docker.com/explore/</a> 获取，可以直接pull,也可以通过Dockerfile自行build.</p>\n<ol>\n<li>直接pull下来的镜像，直接可以拿来运行就可以了，具体如下：<pre class=\"line-numbers language-none\"><code class=\"language-none\"># pull一个ubuntu系统镜像本16.04\ndocker pull ubuntu:16.04\n# 运行此镜像，运行起来的镜像就被称作容器\ndocker run -it ubuntu:16.04<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li>通过Dockerfile自行build镜像<br>首先要有一个Dockerfile,文件名就是Dockerfile,然后进入此目录，执行以下命令：<pre class=\"line-numbers language-none\"><code class=\"language-none\">docker build -t&#x3D;&quot;saymagic&#x2F;ubuntu-nginx:v2&quot; .\n然后build成功之后，run即可<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n其中：-t是容器的名字或标签， <strong>.</strong> 不要省略</li>\n</ol>\n<h3 id=\"镜像的上传\"><a href=\"#镜像的上传\" class=\"headerlink\" title=\"镜像的上传\"></a>镜像的上传</h3><p>对于我们自己的镜像，如果想要给其他人，可以将其上传到docker hub,需要在docker hub中注册用户才可以。</p>\n<ol>\n<li>docker login<br>登录，使用在docker hub中注册用户</li>\n<li>docker push saymagic&#x2F;ubuntu-nginx:v1<br>将本地的镜像推送到docker hub中去，这样所有人都可以访问到了，不过可以在docker hub中将其设置为Private的就只能自己访问了</li>\n</ol>\n<h3 id=\"镜像相关命令\"><a href=\"#镜像相关命令\" class=\"headerlink\" title=\"镜像相关命令\"></a>镜像相关命令</h3><h5 id=\"docker-images\"><a href=\"#docker-images\" class=\"headerlink\" title=\"docker images\"></a>docker images</h5><p>查看所有镜像</p>\n<h5 id=\"docker-rmi-xxx\"><a href=\"#docker-rmi-xxx\" class=\"headerlink\" title=\"docker rmi xxx\"></a>docker rmi xxx</h5><p>删除指定镜像：xxx为镜像id</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\"># 强制删除全部镜像\ndocker rmi -f $(docker images -q)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h2 id=\"关于容器\"><a href=\"#关于容器\" class=\"headerlink\" title=\"关于容器\"></a>关于容器</h2><h3 id=\"容器相关命令\"><a href=\"#容器相关命令\" class=\"headerlink\" title=\"容器相关命令\"></a>容器相关命令</h3><h4 id=\"ps\"><a href=\"#ps\" class=\"headerlink\" title=\"ps\"></a>ps</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\"># 查看正在运行的容器\ndocker ps\n# 查看所有容器\ndocker ps -a\n# 停止正在运行的容器\ndocker stop $(docker ps -q)\n# 删除全部容器\ndocker rm $(docker ps -aq)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"run\"><a href=\"#run\" class=\"headerlink\" title=\"run\"></a>run</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">docker run -d  -v &#x2F;opt&#x2F;jenkins_home:&#x2F;var&#x2F;jenkins_home  -p 8089:8080 -p 50000:50000  jenkins&#x2F;jenkins:lts<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><strong>参数说明:</strong></p>\n<ol>\n<li>-d:后台运行</li>\n<li>-v:磁盘挂载或映射，此条命令就是本地的&#x2F;opt&#x2F;jenkins_home映射到容器的&#x2F;var&#x2F;jenkins_home目录下，即容器中存储到&#x2F;var&#x2F;jenkins_home目录下的数据实际上是存储到了本地的&#x2F;opt&#x2F;jenkins_home目录中</li>\n<li>-p:端口映射,外部可通过8089端口访问到容器中的8080端口,即：hostIp:containerIp</li>\n<li>-e:环境变量，如-e MYSQL_PASSWORD&#x3D;yearning123</li>\n</ol>\n<h4 id=\"start\"><a href=\"#start\" class=\"headerlink\" title=\"start\"></a>start</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">docker start xxx<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>其中xxx为已经停止的容器的ID</p>\n<h4 id=\"exec\"><a href=\"#exec\" class=\"headerlink\" title=\"exec\"></a>exec</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">docker exec -ti 1a5da130bf74 &#x2F;bin&#x2F;bash<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>连接到容器</p>\n<h4 id=\"cp\"><a href=\"#cp\" class=\"headerlink\" title=\"cp\"></a>cp</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">docker cp  &#x2F;opt&#x2F;jeisp-admin.war f22e7a0b2562:&#x2F;opt&#x2F;jeisp-admin.war\ndocker cp f22e7a0b2562:&#x2F;opt&#x2F;jeisp-admin.war  &#x2F;opt&#x2F;jeisp-admin.war<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>将host中的文件copy到容器中和将容器中的文件copy到host中</p>\n<h4 id=\"commit\"><a href=\"#commit\" class=\"headerlink\" title=\"commit\"></a>commit</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">docker commit -m &quot;Added nginx from ubuntu14.04&quot; -a &quot;saymagic&quot; 79c761f627f3 saymagic&#x2F;ubuntu-nginx:v1<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>将正在运行的容器转为镜像</p>\n<h2 id=\"Referenced\"><a href=\"#Referenced\" class=\"headerlink\" title=\"Referenced\"></a>Referenced</h2><p>1: <a href=\"https://yeasy.gitbooks.io/docker_practice/content/install/ubuntu.html\">docker——入门到实践</a></p>","categories":[],"tags":[{"name":"Docker","path":"api/tags/Docker.json"},{"name":"Ubuntu","path":"api/tags/Ubuntu.json"}]}