{"title":"WebGL系列之二：基础概念","slug":"WebGL系列之二：基础概念","date":"2022-08-28T07:58:33.000Z","updated":"2022-08-28T07:58:33.000Z","comments":true,"path":"api/articles/WebGL系列之二：基础概念.json","excerpt":"本文来自网站webglfundamentals的前三节内容。","covers":["/2022/08/28/webgl-xi-lie-zhi-er-ji-chu-gai-nian/2828327738.png","/2022/08/28/webgl-xi-lie-zhi-er-ji-chu-gai-nian/416715407.png"],"content":"<p>本文来自网站<a href=\"https://webglfundamentals.org/\">webglfundamentals</a>的前三节内容。</p>\n<span id=\"more\"></span>\n<p>本文三个部分：基础概念、工作原理、Shaders和GLSL</p>\n<h2 id=\"WebGL基础概念\"><a href=\"#WebGL基础概念\" class=\"headerlink\" title=\"WebGL基础概念\"></a>WebGL基础概念</h2><p>WebGL通常被认为是3D API，可以用来做一些很酷炫的3D的东西，实际上，它只是一个光栅化引擎，根据提供的点、线、三角形进行图形的绘制。它是在GPU中运行，因此相对来说运行速度会比较快(只要GPU性能够)。</p>\n<p>WebGL的代码有2个部分组成：顶点着色器(vertex shader)和片元着色器(fragment shader)，shader使用一种强类型语言——GLSL语言来完成,一组vertex shader和fragment shader组成Program,一个Web应用中可能会有多个Program.关系大致如图所示：<br><img src=\"/2022/08/28/webgl-xi-lie-zhi-er-ji-chu-gai-nian/2828327738.png\"></p>\n<h3 id=\"两个着色器\"><a href=\"#两个着色器\" class=\"headerlink\" title=\"两个着色器\"></a>两个着色器</h3><h4 id=\"顶点着色器\"><a href=\"#顶点着色器\" class=\"headerlink\" title=\"顶点着色器\"></a>顶点着色器</h4><p>顶点着色器(Vertex shader)负责进行坐标转换，输出顶点的坐标，坐标范围[-1,1]。<br>一个顶点着色器的工作是生成裁剪空间坐标值，通常是以下的形式</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">void main() &#123;\n   gl_Position &#x3D; doMathToMakeClipspaceCoordinates\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>每个顶点调用一次（顶点）着色器，每次调用都需要设置一个特殊的全局变量<code>gl_Position</code>，该变量的值就是裁减空间坐标值(Clip Space Coordinates)。</p>\n<blockquote>\n<p>注:这里的Clip Space Coordinates的翻译感觉不是很好。</p>\n</blockquote>\n<p>顶点着色器需要的数据，可以通过以下三种方式获得。</p>\n<ol>\n<li>[Attributes 属性](# attributes-) (从缓冲中获取的数据)</li>\n<li>[Uniforms 全局变量](# uniforms-) (在一次绘制中对所有顶点保持一致值)</li>\n<li>[Textures 纹理](# textures-) (从像素或纹理元素中获取的数据)</li>\n</ol>\n<h4 id=\"片元着色器\"><a href=\"#片元着色器\" class=\"headerlink\" title=\"片元着色器\"></a>片元着色器</h4><p>片元着色器(Fragment shader)负责计算颜色，输出像素的颜色。<br>一个片元着色器的工作是为当前光栅化的像素提供颜色值，通常是以下的形式</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">precision mediump float;\n\nvoid main() &#123;\n   gl_FragColor &#x3D; doMathToMakeAColor;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>每个像素都将调用一次片断着色器，每次调用需要从你设置的特殊全局变量<code>gl_FragColor</code>中获取颜色信息。</p>\n<p>片断着色器所需的数据，可以通过以下三种方式获取：</p>\n<ol>\n<li>[Uniforms 全局变量](# uniforms-) (values that stay the same for every pixel of a single draw call)</li>\n<li>[Textures 纹理](# textures-) (data from pixels&#x2F;texels)</li>\n<li>[Varyings 可变量](# varyings-) (data passed from the vertex shader and interpolated)</li>\n</ol>\n<h3 id=\"两类着色器中的参数-变量-的关键词\"><a href=\"#两类着色器中的参数-变量-的关键词\" class=\"headerlink\" title=\"两类着色器中的参数(变量)的关键词\"></a>两类着色器中的参数(变量)的关键词</h3><h4 id=\"Attributes-and-Buffers\"><a href=\"#Attributes-and-Buffers\" class=\"headerlink\" title=\"Attributes and Buffers\"></a>Attributes and Buffers</h4><p>Buffer是发送到GPU的一些二进制数据序列，通常情况下缓冲数据包括位置，法向量，纹理坐标，顶点颜色值等。<br>你可以存储任何数据。</p>\n<p>Arribute用来指明怎么从缓冲中获取所需数据并将它提供给顶点着色器。</p>\n<p>最常用的方法是缓冲和<strong>属性</strong>，在<a href=\"webgl-how-it-works.html\">工作原理</a><br>中讲到了缓冲和属性，你可以创建缓冲，</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">var buf &#x3D; gl.createBuffer();<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>将数据存入缓冲</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">gl.bindBuffer(gl.ARRAY_BUFFER, buf);\ngl.bufferData(gl.ARRAY_BUFFER, someData, gl.STATIC_DRAW);<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>然后初始化的时候，在你制作的（着色）程序中找到属性所在地址</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">var positionLoc &#x3D; gl.getAttribLocation(someShaderProgram, &quot;a_position&quot;);<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>在渲染的时候告诉WebGL怎么从缓冲中获取数据传递给属性</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&#x2F;&#x2F; 开启从缓冲中获取数据\ngl.enableVertexAttribArray(positionLoc);\n\nvar numComponents &#x3D; 3;  &#x2F;&#x2F; (x, y, z)\nvar type &#x3D; gl.FLOAT;    &#x2F;&#x2F; 32位浮点数据\nvar normalize &#x3D; false;  &#x2F;&#x2F; 不标准化\nvar offset &#x3D; 0;         &#x2F;&#x2F; 从缓冲起始位置开始获取\nvar stride &#x3D; 0;         &#x2F;&#x2F; 到下一个数据跳多少位内存\n                        &#x2F;&#x2F; 0 &#x3D; 使用当前的单位个数和单位长度 （ 3 * Float32Array.BYTES_PER_ELEMENT ）\n\ngl.vertexAttribPointer(positionLoc, numComponents, type, false, stride, offset);<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>在<a href=\"webgl-fundamentals.html\">WebGL 基础概念</a>中示范了不做任何运算直接将数据传递给<code>gl_Position</code>。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">attribute vec4 a_position;\n\nvoid main() &#123;\n   gl_Position &#x3D; a_position;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>如果缓冲中存的是裁剪空间坐标就没什么问题。</p>\n<p>属性可以用 <code>float</code>, <code>vec2</code>, <code>vec3</code>, <code>vec4</code>, <code>mat2</code>, <code>mat3</code> 和 <code>mat4</code> 数据类型。</p>\n<p>vec4:向量：vec4 a &#x3D; vec4(1, 2, 3, 4);<br>mat2:2x2矩阵</p>\n<h4 id=\"Uniforms\"><a href=\"#Uniforms\" class=\"headerlink\" title=\"Uniforms\"></a>Uniforms</h4><p>全局变量，在着色程序运行前设置</p>\n<h4 id=\"Textures\"><a href=\"#Textures\" class=\"headerlink\" title=\"Textures\"></a>Textures</h4><p>着色程序运行时可随意读取其中的数据，为数组类型，通常里面存放的是图片，当然也可以只放颜色。</p>\n<h4 id=\"Varyings\"><a href=\"#Varyings\" class=\"headerlink\" title=\"Varyings\"></a>Varyings</h4><p>顶点着色器如果需要给片元着色器传递数据，那么可以使用它。<br>为了使用可变量，要在两个着色器中定义同名的可变量。<br>给顶点着色器中可变量设置的值，会作为参考值进行内插，在绘制像素时传给片断着色器的可变量。</p>\n<h2 id=\"WebGL工作原理\"><a href=\"#WebGL工作原理\" class=\"headerlink\" title=\"WebGL工作原理\"></a>WebGL工作原理</h2><p>WebGL在GPU上的工作基本上分为2个部分， 第一部分将顶点坐标转到到Clip space vertices,第二部分就是基于坐标绘制像素。<br>这里有一个简单的例子：<br>假设你正在画三角形，顶点着色器每完成三次顶点处理，WebGL就会用这三个顶点画一个三角形。它计算出这三个顶点对应的像素后，就会光栅化这个三角形，“光栅化”其实就是“用像素画出来”的花哨叫法。对于每一个像素，它会调用你的片断着色器询问你使用什么颜色。你通过给片断着色器的一个特殊变量<code>gl_FragColor</code>设置一个颜色值，实现自定义像素颜色。</p>\n<p>WebGL先获得顶点着色器中计算的三个颜色值，在光栅化三角形时将会根据这三个值进行插值。每一个像素在调用片断着色器时，可变量的值是与之对应的插值。想要给片断着色器传值，我们可以先把值传递给顶点着色器(varyings)然后再传给片断着色器。<br>这里有一张来自OpenGL的图形管线的图，大致的描述了如何从顶点坐标到渲染到屏幕的过程：</p>\n<p><img src=\"/2022/08/28/webgl-xi-lie-zhi-er-ji-chu-gai-nian/416715407.png\"></p>\n<p>可阅读文章:<a href=\"https://duriansoftware.com/joe/an-intro-to-modern-opengl.-chapter-1:-the-graphics-pipeline\">现代OpenGL简介</a></p>\n<h2 id=\"GLSL\"><a href=\"#GLSL\" class=\"headerlink\" title=\"GLSL\"></a>GLSL</h2><h3 id=\"GLSL简介\"><a href=\"#GLSL简介\" class=\"headerlink\" title=\"GLSL简介\"></a>GLSL简介</h3><p>GLSL全称是 Graphics Library Shader Language （图形库着色器语言），是着色器使用的语言。它有一些不同于JavaScript的特性，主要目的是为栅格化图形提供常用的计算功能。所以它内建的数据类型例如<code>vec2</code>, <code>vec3</code>和 <code>vec4</code>分别代表两个值，三个值和四个值，<br>类似的还有<code>mat2</code>, <code>mat3</code> 和 <code>mat4</code> 分别代表 2x2, 3x3 和 4x4 矩阵。<br>你可以做一些运算例如常量和矢量的乘法。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">vec4 a &#x3D; vec4(1, 2, 3, 4);<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>关于矩阵的计算和变换，有专门的库实现，如<a href=\"https://glmatrix.net/\">glmatrix</a>,在此之前，可把线性代数部分熟悉一下。</p>\n<h3 id=\"如何在js中使用glsl\"><a href=\"#如何在js中使用glsl\" class=\"headerlink\" title=\"如何在js中使用glsl\"></a>如何在js中使用glsl</h3><p>大致有两种方法：<br>1、js的script标签改为nojs或顶点片元着色器标记，如：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&lt;script id&#x3D;&quot;vertexShader&quot; type&#x3D;&quot;x-shader&#x2F;x-vertex&quot;&gt;\n&lt;&#x2F;script&gt;\n&lt;script id&#x3D;&quot;fragmentShader&quot; type&#x3D;&quot;x-shader&#x2F;x-fragment&quot;&gt;\n&lt;&#x2F;script&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>2.直接使用字符串拼接的形式加载</p>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>WebGL的全部内容就是创建不同的着色器，向着色器提供数据然后调用<code>gl.drawArrays</code>或 <code>gl.drawElements</code>让WebGL调用当前顶点着色器处理每个顶点，调用当前片断着色器渲染每个像素。<br>实际上创建着色器需要为数不多的几行代码，并且在大多数WebGL应用程序中都相似，因此一旦写完几乎可以不再关心它们了。<a href=\"webgl-boilerplate.html\">在这里介绍如何编译GLSL并链接到着色程序</a>。<br>至此，WebGL的基础概念部分就到此结束了，后面的内容大部分都是介绍API相关的，如有兴趣，可继续在<a href=\"https://webglfundamentals.org/\">webglfundamentals</a>学习。</p>\n<h2 id=\"Referenced\"><a href=\"#Referenced\" class=\"headerlink\" title=\"Referenced\"></a>Referenced</h2><p><a href=\"https://alisonmarket.lofter.com/post/2b1789_1c808c676\">封面图</a></p>\n","more":"<p>本文三个部分：基础概念、工作原理、Shaders和GLSL</p>\n<h2 id=\"WebGL基础概念\"><a href=\"#WebGL基础概念\" class=\"headerlink\" title=\"WebGL基础概念\"></a>WebGL基础概念</h2><p>WebGL通常被认为是3D API，可以用来做一些很酷炫的3D的东西，实际上，它只是一个光栅化引擎，根据提供的点、线、三角形进行图形的绘制。它是在GPU中运行，因此相对来说运行速度会比较快(只要GPU性能够)。</p>\n<p>WebGL的代码有2个部分组成：顶点着色器(vertex shader)和片元着色器(fragment shader)，shader使用一种强类型语言——GLSL语言来完成,一组vertex shader和fragment shader组成Program,一个Web应用中可能会有多个Program.关系大致如图所示：<br><img src=\"/2022/08/28/webgl-xi-lie-zhi-er-ji-chu-gai-nian/2828327738.png\"></p>\n<h3 id=\"两个着色器\"><a href=\"#两个着色器\" class=\"headerlink\" title=\"两个着色器\"></a>两个着色器</h3><h4 id=\"顶点着色器\"><a href=\"#顶点着色器\" class=\"headerlink\" title=\"顶点着色器\"></a>顶点着色器</h4><p>顶点着色器(Vertex shader)负责进行坐标转换，输出顶点的坐标，坐标范围[-1,1]。<br>一个顶点着色器的工作是生成裁剪空间坐标值，通常是以下的形式</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">void main() &#123;\n   gl_Position &#x3D; doMathToMakeClipspaceCoordinates\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>每个顶点调用一次（顶点）着色器，每次调用都需要设置一个特殊的全局变量<code>gl_Position</code>，该变量的值就是裁减空间坐标值(Clip Space Coordinates)。</p>\n<blockquote>\n<p>注:这里的Clip Space Coordinates的翻译感觉不是很好。</p>\n</blockquote>\n<p>顶点着色器需要的数据，可以通过以下三种方式获得。</p>\n<ol>\n<li>[Attributes 属性](# attributes-) (从缓冲中获取的数据)</li>\n<li>[Uniforms 全局变量](# uniforms-) (在一次绘制中对所有顶点保持一致值)</li>\n<li>[Textures 纹理](# textures-) (从像素或纹理元素中获取的数据)</li>\n</ol>\n<h4 id=\"片元着色器\"><a href=\"#片元着色器\" class=\"headerlink\" title=\"片元着色器\"></a>片元着色器</h4><p>片元着色器(Fragment shader)负责计算颜色，输出像素的颜色。<br>一个片元着色器的工作是为当前光栅化的像素提供颜色值，通常是以下的形式</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">precision mediump float;\n\nvoid main() &#123;\n   gl_FragColor &#x3D; doMathToMakeAColor;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>每个像素都将调用一次片断着色器，每次调用需要从你设置的特殊全局变量<code>gl_FragColor</code>中获取颜色信息。</p>\n<p>片断着色器所需的数据，可以通过以下三种方式获取：</p>\n<ol>\n<li>[Uniforms 全局变量](# uniforms-) (values that stay the same for every pixel of a single draw call)</li>\n<li>[Textures 纹理](# textures-) (data from pixels&#x2F;texels)</li>\n<li>[Varyings 可变量](# varyings-) (data passed from the vertex shader and interpolated)</li>\n</ol>\n<h3 id=\"两类着色器中的参数-变量-的关键词\"><a href=\"#两类着色器中的参数-变量-的关键词\" class=\"headerlink\" title=\"两类着色器中的参数(变量)的关键词\"></a>两类着色器中的参数(变量)的关键词</h3><h4 id=\"Attributes-and-Buffers\"><a href=\"#Attributes-and-Buffers\" class=\"headerlink\" title=\"Attributes and Buffers\"></a>Attributes and Buffers</h4><p>Buffer是发送到GPU的一些二进制数据序列，通常情况下缓冲数据包括位置，法向量，纹理坐标，顶点颜色值等。<br>你可以存储任何数据。</p>\n<p>Arribute用来指明怎么从缓冲中获取所需数据并将它提供给顶点着色器。</p>\n<p>最常用的方法是缓冲和<strong>属性</strong>，在<a href=\"webgl-how-it-works.html\">工作原理</a><br>中讲到了缓冲和属性，你可以创建缓冲，</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">var buf &#x3D; gl.createBuffer();<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>将数据存入缓冲</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">gl.bindBuffer(gl.ARRAY_BUFFER, buf);\ngl.bufferData(gl.ARRAY_BUFFER, someData, gl.STATIC_DRAW);<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>然后初始化的时候，在你制作的（着色）程序中找到属性所在地址</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">var positionLoc &#x3D; gl.getAttribLocation(someShaderProgram, &quot;a_position&quot;);<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>在渲染的时候告诉WebGL怎么从缓冲中获取数据传递给属性</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&#x2F;&#x2F; 开启从缓冲中获取数据\ngl.enableVertexAttribArray(positionLoc);\n\nvar numComponents &#x3D; 3;  &#x2F;&#x2F; (x, y, z)\nvar type &#x3D; gl.FLOAT;    &#x2F;&#x2F; 32位浮点数据\nvar normalize &#x3D; false;  &#x2F;&#x2F; 不标准化\nvar offset &#x3D; 0;         &#x2F;&#x2F; 从缓冲起始位置开始获取\nvar stride &#x3D; 0;         &#x2F;&#x2F; 到下一个数据跳多少位内存\n                        &#x2F;&#x2F; 0 &#x3D; 使用当前的单位个数和单位长度 （ 3 * Float32Array.BYTES_PER_ELEMENT ）\n\ngl.vertexAttribPointer(positionLoc, numComponents, type, false, stride, offset);<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>在<a href=\"webgl-fundamentals.html\">WebGL 基础概念</a>中示范了不做任何运算直接将数据传递给<code>gl_Position</code>。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">attribute vec4 a_position;\n\nvoid main() &#123;\n   gl_Position &#x3D; a_position;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>如果缓冲中存的是裁剪空间坐标就没什么问题。</p>\n<p>属性可以用 <code>float</code>, <code>vec2</code>, <code>vec3</code>, <code>vec4</code>, <code>mat2</code>, <code>mat3</code> 和 <code>mat4</code> 数据类型。</p>\n<p>vec4:向量：vec4 a &#x3D; vec4(1, 2, 3, 4);<br>mat2:2x2矩阵</p>\n<h4 id=\"Uniforms\"><a href=\"#Uniforms\" class=\"headerlink\" title=\"Uniforms\"></a>Uniforms</h4><p>全局变量，在着色程序运行前设置</p>\n<h4 id=\"Textures\"><a href=\"#Textures\" class=\"headerlink\" title=\"Textures\"></a>Textures</h4><p>着色程序运行时可随意读取其中的数据，为数组类型，通常里面存放的是图片，当然也可以只放颜色。</p>\n<h4 id=\"Varyings\"><a href=\"#Varyings\" class=\"headerlink\" title=\"Varyings\"></a>Varyings</h4><p>顶点着色器如果需要给片元着色器传递数据，那么可以使用它。<br>为了使用可变量，要在两个着色器中定义同名的可变量。<br>给顶点着色器中可变量设置的值，会作为参考值进行内插，在绘制像素时传给片断着色器的可变量。</p>\n<h2 id=\"WebGL工作原理\"><a href=\"#WebGL工作原理\" class=\"headerlink\" title=\"WebGL工作原理\"></a>WebGL工作原理</h2><p>WebGL在GPU上的工作基本上分为2个部分， 第一部分将顶点坐标转到到Clip space vertices,第二部分就是基于坐标绘制像素。<br>这里有一个简单的例子：<br>假设你正在画三角形，顶点着色器每完成三次顶点处理，WebGL就会用这三个顶点画一个三角形。它计算出这三个顶点对应的像素后，就会光栅化这个三角形，“光栅化”其实就是“用像素画出来”的花哨叫法。对于每一个像素，它会调用你的片断着色器询问你使用什么颜色。你通过给片断着色器的一个特殊变量<code>gl_FragColor</code>设置一个颜色值，实现自定义像素颜色。</p>\n<p>WebGL先获得顶点着色器中计算的三个颜色值，在光栅化三角形时将会根据这三个值进行插值。每一个像素在调用片断着色器时，可变量的值是与之对应的插值。想要给片断着色器传值，我们可以先把值传递给顶点着色器(varyings)然后再传给片断着色器。<br>这里有一张来自OpenGL的图形管线的图，大致的描述了如何从顶点坐标到渲染到屏幕的过程：</p>\n<p><img src=\"/2022/08/28/webgl-xi-lie-zhi-er-ji-chu-gai-nian/416715407.png\"></p>\n<p>可阅读文章:<a href=\"https://duriansoftware.com/joe/an-intro-to-modern-opengl.-chapter-1:-the-graphics-pipeline\">现代OpenGL简介</a></p>\n<h2 id=\"GLSL\"><a href=\"#GLSL\" class=\"headerlink\" title=\"GLSL\"></a>GLSL</h2><h3 id=\"GLSL简介\"><a href=\"#GLSL简介\" class=\"headerlink\" title=\"GLSL简介\"></a>GLSL简介</h3><p>GLSL全称是 Graphics Library Shader Language （图形库着色器语言），是着色器使用的语言。它有一些不同于JavaScript的特性，主要目的是为栅格化图形提供常用的计算功能。所以它内建的数据类型例如<code>vec2</code>, <code>vec3</code>和 <code>vec4</code>分别代表两个值，三个值和四个值，<br>类似的还有<code>mat2</code>, <code>mat3</code> 和 <code>mat4</code> 分别代表 2x2, 3x3 和 4x4 矩阵。<br>你可以做一些运算例如常量和矢量的乘法。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">vec4 a &#x3D; vec4(1, 2, 3, 4);<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>关于矩阵的计算和变换，有专门的库实现，如<a href=\"https://glmatrix.net/\">glmatrix</a>,在此之前，可把线性代数部分熟悉一下。</p>\n<h3 id=\"如何在js中使用glsl\"><a href=\"#如何在js中使用glsl\" class=\"headerlink\" title=\"如何在js中使用glsl\"></a>如何在js中使用glsl</h3><p>大致有两种方法：<br>1、js的script标签改为nojs或顶点片元着色器标记，如：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&lt;script id&#x3D;&quot;vertexShader&quot; type&#x3D;&quot;x-shader&#x2F;x-vertex&quot;&gt;\n&lt;&#x2F;script&gt;\n&lt;script id&#x3D;&quot;fragmentShader&quot; type&#x3D;&quot;x-shader&#x2F;x-fragment&quot;&gt;\n&lt;&#x2F;script&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>2.直接使用字符串拼接的形式加载</p>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>WebGL的全部内容就是创建不同的着色器，向着色器提供数据然后调用<code>gl.drawArrays</code>或 <code>gl.drawElements</code>让WebGL调用当前顶点着色器处理每个顶点，调用当前片断着色器渲染每个像素。<br>实际上创建着色器需要为数不多的几行代码，并且在大多数WebGL应用程序中都相似，因此一旦写完几乎可以不再关心它们了。<a href=\"webgl-boilerplate.html\">在这里介绍如何编译GLSL并链接到着色程序</a>。<br>至此，WebGL的基础概念部分就到此结束了，后面的内容大部分都是介绍API相关的，如有兴趣，可继续在<a href=\"https://webglfundamentals.org/\">webglfundamentals</a>学习。</p>\n<h2 id=\"Referenced\"><a href=\"#Referenced\" class=\"headerlink\" title=\"Referenced\"></a>Referenced</h2><p><a href=\"https://alisonmarket.lofter.com/post/2b1789_1c808c676\">封面图</a></p>","categories":[{"name":"图形图像","path":"api/categories/图形图像.json"}],"tags":[{"name":"WebGL","path":"api/tags/WebGL.json"}]}