{"title":"基于PostGIS的等值线分析服务发布","slug":"121","date":"2022-05-30T13:10:00.000Z","updated":"2022-05-30T13:12:37.000Z","comments":true,"path":"api/articles/121.json","excerpt":"在用Cesium原生的等高线工具时，由于地形存在分级，不同级别下的地形的精度不同，因此生成的等高线也在时刻发生变化，且无法知道高程，给用户造成了一定的困惑。正好PostGIS3.2中提供了ST_Contour函数可生成等高线，本文即利用ST_Contour函数来生成等值线。","covers":null,"content":"<p>在用Cesium原生的等高线工具时，由于地形存在分级，不同级别下的地形的精度不同，因此生成的等高线也在时刻发生变化，且无法知道高程，给用户造成了一定的困惑。正好PostGIS3.2中提供了ST_Contour函数可生成等高线，本文即利用ST_Contour函数来生成等值线。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"应用环境\"><a href=\"#应用环境\" class=\"headerlink\" title=\"应用环境\"></a>应用环境</h2><p>PostGIS:3.2.1</p>\n<p>Postgresql:14.3</p>\n<p>OS:win10</p>\n<p>python:3.9</p>\n<h2 id=\"地形导入PostGIS数据库\"><a href=\"#地形导入PostGIS数据库\" class=\"headerlink\" title=\"地形导入PostGIS数据库\"></a>地形导入PostGIS数据库</h2><p>QGIS只提供矢量数据的导入，并未提供栅格数据的导入功能，这里可使用PostGIS安装目录下的raster2pgsql程序进行导入，命令如下：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">.&#x2F;raster2pgsql.exe -s 4326 -C E:&#x2F;Data&#x2F;dem&#x2F;江津区_DEM.tif public.dem | .&#x2F;psql.exe -h localhost -p 5432 -U postgres -d chongqing -W<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>关于参数说明，可通过以下命令查看</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">.&#x2F;raster2pgsql.exe<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<blockquote>\n<p>提示:不能使用SuperMap IDesktop导入栅格数据，导入后的格式不太一样，会导致后面的ST_Contour函数无法使用。</p>\n</blockquote>\n<h2 id=\"使用ST-Contour函数\"><a href=\"#使用ST-Contour函数\" class=\"headerlink\" title=\"使用ST_Contour函数\"></a>使用ST_Contour函数</h2><p>使用如下sql语句进行查询:</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">WITH c AS (\nSELECT (ST_Contour(rast, 1, fixed_levels &#x3D;&gt; ARRAY[1000.0, 1200.0, 1300.0])).*\nFROM public.&quot;dem&quot; WHERE rid &#x3D; 1\n)\nSELECT id, value,st_astext(geom)\nFROM c order by value asc;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>ST_Contour函数的<a href=\"http://www.postgis.net/docs/manual-3.2/RT_ST_Contour.html\">参数说明</a>:</p>\n<table>\n<thead>\n<tr>\n<th>参数名</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>level_interval</td>\n<td>等值线间隔</td>\n</tr>\n<tr>\n<td>fixed_levels</td>\n<td>取固定的高程值</td>\n</tr>\n</tbody></table>\n<h2 id=\"Python连接PostGIS提供REST服务\"><a href=\"#Python连接PostGIS提供REST服务\" class=\"headerlink\" title=\"Python连接PostGIS提供REST服务\"></a>Python连接PostGIS提供REST服务</h2><p>这里使用<a href=\"https://pypi.org/project/psycopg2/\">psycopg2</a>连接postgis数据库,使用tornado提供REST服务。</p>\n<p>安装psycopg2及tornado:</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">pip install psycopg2 -i https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;pypi&#x2F;simple&#x2F;\npip install tornado -i https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;pypi&#x2F;simple&#x2F;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>也可以下载whl文件离线安装:</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">pip install xx.whl<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>psycopg2的使用可<a href=\"https://www.cnpython.com/qa/83354\">参考</a>,代码如下：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">import psycopg2\nconn &#x3D; psycopg2.connect(database&#x3D;&#39;postgis&#39;, user&#x3D;&#39;postgres&#39;)\ncurs &#x3D; conn.cursor()\n\n# Find the distance within 1 km of point-of-interest\npoi &#x3D; (-124.3, 53.2)  # longitude, latitude\n\n# Table &#39;my_points&#39; has a geography column &#39;geog&#39;\ncurs.execute(&quot;&quot;&quot;\\\nSELECT gid, ST_AsGeoJSON(geog), ST_Distance(geog, poi)\nFROM my_points, (SELECT ST_MakePoint(%s, %s)::geography AS poi) AS f\nWHERE ST_DWithin(geog, poi, 1000);&quot;&quot;&quot;, poi)\n\nfor row in curs.fetchall():\n    print(row)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>tornado的使用：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">import tornado.ioloop\nimport tornado.web\nfrom tornado import ioloop, web, websocket, httpclient\nimport tornado.gen\nfrom tornado.concurrent import run_on_executor\nfrom concurrent.futures import ThreadPoolExecutor\nimport tornado.httpserver\n\nclass IndexHandler(tornado.web.RequestHandler):\n    def get(self):\n    \tself.write(&#123;\n            &quot;data&quot;:result\n        &#125;)\n    def post(self):\n        lngMax&#x3D; float(self.get_argument(&#39;lngMax&#39;))\n        self.write(&#123;\n            &quot;data&quot;:result\n        &#125;)\n        \n    def options(self):\n        self.set_status(204)\n        self.finish()\n\n\nclass Application(tornado.web.Application):\n    def __init__(self):\n        handlers &#x3D; [\n            (r&#39;&#x2F;gisfunc&#x2F;rest&#x2F;contour&#39;, IndexHandler)\n        ]\n        tornado.web.Application.__init__(self, handlers,autoreload&#x3D;False, debug&#x3D;False)\nif __name__ &#x3D;&#x3D; &quot;__main__&quot;:\n    app &#x3D; Application()\n    app.listen(8866)  \n    tornado.ioloop.IOLoop.current().start()<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>这样前端就可以通过调用发布的REST服务进行等高线的绘制。</p>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>这种方法在查询速度和准确性上相比其它方法都有明显的提升，但线段之间的平滑度不够，后续还需要在这方面进行优化。</p>\n<h2 id=\"Referenced\"><a href=\"#Referenced\" class=\"headerlink\" title=\"Referenced\"></a>Referenced</h2><p><a href=\"https://lyla7784.lofter.com/post/30a15a3d_1c8923399\">1、封面图源</a></p>\n","more":"<h2 id=\"应用环境\"><a href=\"#应用环境\" class=\"headerlink\" title=\"应用环境\"></a>应用环境</h2><p>PostGIS:3.2.1</p>\n<p>Postgresql:14.3</p>\n<p>OS:win10</p>\n<p>python:3.9</p>\n<h2 id=\"地形导入PostGIS数据库\"><a href=\"#地形导入PostGIS数据库\" class=\"headerlink\" title=\"地形导入PostGIS数据库\"></a>地形导入PostGIS数据库</h2><p>QGIS只提供矢量数据的导入，并未提供栅格数据的导入功能，这里可使用PostGIS安装目录下的raster2pgsql程序进行导入，命令如下：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">.&#x2F;raster2pgsql.exe -s 4326 -C E:&#x2F;Data&#x2F;dem&#x2F;江津区_DEM.tif public.dem | .&#x2F;psql.exe -h localhost -p 5432 -U postgres -d chongqing -W<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>关于参数说明，可通过以下命令查看</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">.&#x2F;raster2pgsql.exe<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<blockquote>\n<p>提示:不能使用SuperMap IDesktop导入栅格数据，导入后的格式不太一样，会导致后面的ST_Contour函数无法使用。</p>\n</blockquote>\n<h2 id=\"使用ST-Contour函数\"><a href=\"#使用ST-Contour函数\" class=\"headerlink\" title=\"使用ST_Contour函数\"></a>使用ST_Contour函数</h2><p>使用如下sql语句进行查询:</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">WITH c AS (\nSELECT (ST_Contour(rast, 1, fixed_levels &#x3D;&gt; ARRAY[1000.0, 1200.0, 1300.0])).*\nFROM public.&quot;dem&quot; WHERE rid &#x3D; 1\n)\nSELECT id, value,st_astext(geom)\nFROM c order by value asc;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>ST_Contour函数的<a href=\"http://www.postgis.net/docs/manual-3.2/RT_ST_Contour.html\">参数说明</a>:</p>\n<table>\n<thead>\n<tr>\n<th>参数名</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>level_interval</td>\n<td>等值线间隔</td>\n</tr>\n<tr>\n<td>fixed_levels</td>\n<td>取固定的高程值</td>\n</tr>\n</tbody></table>\n<h2 id=\"Python连接PostGIS提供REST服务\"><a href=\"#Python连接PostGIS提供REST服务\" class=\"headerlink\" title=\"Python连接PostGIS提供REST服务\"></a>Python连接PostGIS提供REST服务</h2><p>这里使用<a href=\"https://pypi.org/project/psycopg2/\">psycopg2</a>连接postgis数据库,使用tornado提供REST服务。</p>\n<p>安装psycopg2及tornado:</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">pip install psycopg2 -i https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;pypi&#x2F;simple&#x2F;\npip install tornado -i https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;pypi&#x2F;simple&#x2F;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>也可以下载whl文件离线安装:</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">pip install xx.whl<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>psycopg2的使用可<a href=\"https://www.cnpython.com/qa/83354\">参考</a>,代码如下：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">import psycopg2\nconn &#x3D; psycopg2.connect(database&#x3D;&#39;postgis&#39;, user&#x3D;&#39;postgres&#39;)\ncurs &#x3D; conn.cursor()\n\n# Find the distance within 1 km of point-of-interest\npoi &#x3D; (-124.3, 53.2)  # longitude, latitude\n\n# Table &#39;my_points&#39; has a geography column &#39;geog&#39;\ncurs.execute(&quot;&quot;&quot;\\\nSELECT gid, ST_AsGeoJSON(geog), ST_Distance(geog, poi)\nFROM my_points, (SELECT ST_MakePoint(%s, %s)::geography AS poi) AS f\nWHERE ST_DWithin(geog, poi, 1000);&quot;&quot;&quot;, poi)\n\nfor row in curs.fetchall():\n    print(row)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>tornado的使用：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">import tornado.ioloop\nimport tornado.web\nfrom tornado import ioloop, web, websocket, httpclient\nimport tornado.gen\nfrom tornado.concurrent import run_on_executor\nfrom concurrent.futures import ThreadPoolExecutor\nimport tornado.httpserver\n\nclass IndexHandler(tornado.web.RequestHandler):\n    def get(self):\n    \tself.write(&#123;\n            &quot;data&quot;:result\n        &#125;)\n    def post(self):\n        lngMax&#x3D; float(self.get_argument(&#39;lngMax&#39;))\n        self.write(&#123;\n            &quot;data&quot;:result\n        &#125;)\n        \n    def options(self):\n        self.set_status(204)\n        self.finish()\n\n\nclass Application(tornado.web.Application):\n    def __init__(self):\n        handlers &#x3D; [\n            (r&#39;&#x2F;gisfunc&#x2F;rest&#x2F;contour&#39;, IndexHandler)\n        ]\n        tornado.web.Application.__init__(self, handlers,autoreload&#x3D;False, debug&#x3D;False)\nif __name__ &#x3D;&#x3D; &quot;__main__&quot;:\n    app &#x3D; Application()\n    app.listen(8866)  \n    tornado.ioloop.IOLoop.current().start()<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>这样前端就可以通过调用发布的REST服务进行等高线的绘制。</p>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>这种方法在查询速度和准确性上相比其它方法都有明显的提升，但线段之间的平滑度不够，后续还需要在这方面进行优化。</p>\n<h2 id=\"Referenced\"><a href=\"#Referenced\" class=\"headerlink\" title=\"Referenced\"></a>Referenced</h2><p><a href=\"https://lyla7784.lofter.com/post/30a15a3d_1c8923399\">1、封面图源</a></p>","categories":[{"name":"Python","path":"api/categories/Python.json"}],"tags":[{"name":"Python","path":"api/tags/Python.json"},{"name":"PostGIS","path":"api/tags/PostGIS.json"}]}