{"title":"Jenkins自动打包NodeJS项目","slug":"93","date":"2021-04-20T14:32:00.000Z","updated":"2021-04-21T00:44:30.000Z","comments":true,"path":"api/articles/93.json","realPath":null,"excerpt":"随着越来越多的前后端分离项目的落地，对于前端项目的自动化部署能力也随之而来。本文通过Jenkins+Git实现了前端项目的自动构建。","covers":null,"cover":null,"content":"<p>随着越来越多的前后端分离项目的落地，对于前端项目的自动化部署能力也随之而来。本文通过Jenkins+Git实现了前端项目的自动构建。</p>\n<span id=\"more\"></span>\n<h2 id=\"应用环境\"><a href=\"#应用环境\" class=\"headerlink\" title=\"应用环境\"></a>应用环境</h2><p>Centos:7<br>Jenkins:容器安装<br>Node:14.16</p>\n<h2 id=\"在Jenkins容器中安装NodeJS\"><a href=\"#在Jenkins容器中安装NodeJS\" class=\"headerlink\" title=\"在Jenkins容器中安装NodeJS\"></a>在Jenkins容器中安装NodeJS</h2><p>直接下载最新的NodeJS安装包，然后将其复制到jenkins容器中或主机中映射到jenkins容器中的那个目录。<br>解压nodejs(这里下载到的node为xz格式的)</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">xz -d node-v14.16.1-linux-x64.tar.xz\ntar -xvf node-v14.16.1-linux-x64.tar<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>配置NodeJS环境变量</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">export NODE_HOME&#x3D;&#x2F;xxx&#x2F;node-v14.16.1-linux-x64\nexport PATH&#x3D;$PATH:$NODE_HOME&#x2F;bin\nexport NODE_PATH&#x3D;$NODE_HOME&#x2F;lib&#x2F;node_modules<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p><strong>Tips</strong>：root账户登录jenkins容器：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">docker exec -ti -u root ContainerId &#x2F;bin&#x2F;bash<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>然后确认以下命令能够正确输出node和npm的版本</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">node -v\nnpm -v<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h2 id=\"Jenkins-Job配置\"><a href=\"#Jenkins-Job配置\" class=\"headerlink\" title=\"Jenkins Job配置\"></a>Jenkins Job配置</h2><h3 id=\"Jenkins配置NodeJS\"><a href=\"#Jenkins配置NodeJS\" class=\"headerlink\" title=\"Jenkins配置NodeJS\"></a>Jenkins配置NodeJS</h3><p>登录你的Jenkins,管理Jenkins-&gt;Global Tool Configuration中,配置NodeJS的目录。</p>\n<h3 id=\"创建Job\"><a href=\"#创建Job\" class=\"headerlink\" title=\"创建Job\"></a>创建Job</h3><p>创建一个Freestyle Project，然后输入对应的参数，在构建环境那里勾选Provide Node&amp;npm 设置一个NodeJS的配置名称。<br>构建步骤：新增执行shell，命令如下：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">npm install\nnpm run build<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h3 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h3><p>保存之后，可以立即构建测试一下</p>\n<h2 id=\"在Git中配置自动部署\"><a href=\"#在Git中配置自动部署\" class=\"headerlink\" title=\"在Git中配置自动部署\"></a>在Git中配置自动部署</h2><p>添加web钩子，地址如下：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">http:&#x2F;&#x2F;jenkins-location&#x2F;gogs-webhook&#x2F;?job&#x3D;jobname<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>然后测试一下，应该就可以每次合并代码的时候就会自动打包项目了。</p>\n<h2 id=\"Referenced\"><a href=\"#Referenced\" class=\"headerlink\" title=\"Referenced\"></a>Referenced</h2><p><a href=\"https://www.jianshu.com/p/14e356cf8bb4\">1、Jenkins+Gogs搭建自动化部署平台</a><br><a href=\"https://www.cnblogs.com/vipzhou/p/7890016.html\">2、jenkins学习之自动打包构建nodejs应用</a><br><a href=\"https://melare.lofter.com/post/1f010e23_1c71032c6\">3、封面图</a></p>\n","more":"<h2 id=\"应用环境\"><a href=\"#应用环境\" class=\"headerlink\" title=\"应用环境\"></a>应用环境</h2><p>Centos:7<br>Jenkins:容器安装<br>Node:14.16</p>\n<h2 id=\"在Jenkins容器中安装NodeJS\"><a href=\"#在Jenkins容器中安装NodeJS\" class=\"headerlink\" title=\"在Jenkins容器中安装NodeJS\"></a>在Jenkins容器中安装NodeJS</h2><p>直接下载最新的NodeJS安装包，然后将其复制到jenkins容器中或主机中映射到jenkins容器中的那个目录。<br>解压nodejs(这里下载到的node为xz格式的)</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">xz -d node-v14.16.1-linux-x64.tar.xz\ntar -xvf node-v14.16.1-linux-x64.tar<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>配置NodeJS环境变量</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">export NODE_HOME&#x3D;&#x2F;xxx&#x2F;node-v14.16.1-linux-x64\nexport PATH&#x3D;$PATH:$NODE_HOME&#x2F;bin\nexport NODE_PATH&#x3D;$NODE_HOME&#x2F;lib&#x2F;node_modules<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p><strong>Tips</strong>：root账户登录jenkins容器：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">docker exec -ti -u root ContainerId &#x2F;bin&#x2F;bash<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>然后确认以下命令能够正确输出node和npm的版本</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">node -v\nnpm -v<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h2 id=\"Jenkins-Job配置\"><a href=\"#Jenkins-Job配置\" class=\"headerlink\" title=\"Jenkins Job配置\"></a>Jenkins Job配置</h2><h3 id=\"Jenkins配置NodeJS\"><a href=\"#Jenkins配置NodeJS\" class=\"headerlink\" title=\"Jenkins配置NodeJS\"></a>Jenkins配置NodeJS</h3><p>登录你的Jenkins,管理Jenkins-&gt;Global Tool Configuration中,配置NodeJS的目录。</p>\n<h3 id=\"创建Job\"><a href=\"#创建Job\" class=\"headerlink\" title=\"创建Job\"></a>创建Job</h3><p>创建一个Freestyle Project，然后输入对应的参数，在构建环境那里勾选Provide Node&amp;npm 设置一个NodeJS的配置名称。<br>构建步骤：新增执行shell，命令如下：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">npm install\nnpm run build<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h3 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h3><p>保存之后，可以立即构建测试一下</p>\n<h2 id=\"在Git中配置自动部署\"><a href=\"#在Git中配置自动部署\" class=\"headerlink\" title=\"在Git中配置自动部署\"></a>在Git中配置自动部署</h2><p>添加web钩子，地址如下：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">http:&#x2F;&#x2F;jenkins-location&#x2F;gogs-webhook&#x2F;?job&#x3D;jobname<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>然后测试一下，应该就可以每次合并代码的时候就会自动打包项目了。</p>\n<h2 id=\"Referenced\"><a href=\"#Referenced\" class=\"headerlink\" title=\"Referenced\"></a>Referenced</h2><p><a href=\"https://www.jianshu.com/p/14e356cf8bb4\">1、Jenkins+Gogs搭建自动化部署平台</a><br><a href=\"https://www.cnblogs.com/vipzhou/p/7890016.html\">2、jenkins学习之自动打包构建nodejs应用</a><br><a href=\"https://melare.lofter.com/post/1f010e23_1c71032c6\">3、封面图</a></p>","categories":[{"name":"运维","path":"api/categories/运维.json"}],"tags":[{"name":"Jenkins","path":"api/tags/Jenkins.json"},{"name":"Docker","path":"api/tags/Docker.json"},{"name":"NodeJS","path":"api/tags/NodeJS.json"}]}