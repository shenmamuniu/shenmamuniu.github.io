{"title":"ASP.NET Web API中处理跨域请求","slug":"60","date":"2020-04-10T09:20:00.000Z","updated":"2020-04-10T09:22:57.000Z","comments":true,"path":"api/articles/60.json","excerpt":"跨域是非常常见的一个问题，本文主要记录ASP.NET Web API中对跨域请求的处理。","covers":null,"content":"<p>跨域是非常常见的一个问题，本文主要记录ASP.NET Web API中对跨域请求的处理。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"开发环境\"><a href=\"#开发环境\" class=\"headerlink\" title=\"开发环境\"></a>开发环境</h2><p>OS: win10<br>编译器：visual studio 2019</p>\n<h2 id=\"配置web-config允许跨域\"><a href=\"#配置web-config允许跨域\" class=\"headerlink\" title=\"配置web.config允许跨域\"></a>配置web.config允许跨域</h2><p>在system.webServer节点中添加如下customHeaders,如下：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&lt;system.webServer&gt;\n&lt;httpProtocol&gt;\n      &lt;customHeaders&gt;\n        &lt;add name&#x3D;&quot;Access-Control-Allow-Origin&quot; value&#x3D;&quot;*&quot; &#x2F;&gt;\n        &lt;add name&#x3D;&quot;Access-Control-Allow-Headers&quot; value&#x3D;&quot;Content-Type&quot; &#x2F;&gt;\n        &lt;add name&#x3D;&quot;Access-Control-Allow-Methods&quot; value&#x3D;&quot;GET, POST, PUT, DELETE, OPTIONS&quot; &#x2F;&gt;\n      &lt;&#x2F;customHeaders&gt;\n    &lt;&#x2F;httpProtocol&gt;\n  &lt;&#x2F;system.webServer&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>其中Access-Control-Allow-Headers表示IIS允许接受的headers的集合，如果请求头中需要添加自定义内容，value需要设置为如下内容:</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&lt;add name&#x3D;&quot;Access-Control-Allow-Headers&quot; value&#x3D;&quot;Origin,X-Requested-With,Content-Type,accept,key&quot; &#x2F;&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>其中key表示请求头中的键。</p>\n<h2 id=\"在Global-asax中添加对OPTIONS请求的处理\"><a href=\"#在Global-asax中添加对OPTIONS请求的处理\" class=\"headerlink\" title=\"在Global.asax中添加对OPTIONS请求的处理\"></a>在Global.asax中添加对OPTIONS请求的处理</h2><h3 id=\"关于OPTIONS请求\"><a href=\"#关于OPTIONS请求\" class=\"headerlink\" title=\"关于OPTIONS请求\"></a>关于OPTIONS请求</h3><p>在 CORS 中，可以使用 OPTIONS 方法发起一个预检请求，以检测实际请求是否可以被服务器所接受。预检请求报文中的 Access-Control-Request-Method 首部字段告知服务器实际请求所使用的 HTTP 方法；Access-Control-Request-Headers 首部字段告知服务器实际请求所携带的自定义首部字段。服务器基于从预检请求获得的信息来判断，是否接受接下来的实际请求。</p>\n<p>之前大概2017年我写跨域的解决方案的时候是没有OPTIONS请求的，但现在OPTIONS请求已经成了规范，即满足某些特定条件下，浏览器必须要首先使用OPTIONS发放发送一个预检请求到服务器。可参考MDN中的<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Access_control_CORS\">HTTP访问控制</a>中对此部分的描述。</p>\n<h3 id=\"对所有的options请求返回\"><a href=\"#对所有的options请求返回\" class=\"headerlink\" title=\"对所有的options请求返回\"></a>对所有的options请求返回</h3><p>在Global.asax中添加如下内容：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">protected void Application_BeginRequest(object sender, EventArgs e)\n       &#123;\n           var req &#x3D; System.Web.HttpContext.Current.Request;\n           if (req.HttpMethod &#x3D;&#x3D; &quot;OPTIONS&quot;)&#x2F;&#x2F;过滤options请求，用于js跨域\n           &#123;\n               Response.StatusCode &#x3D; 200;\n               Response.SubStatusCode &#x3D; 200;\n               Response.End();\n           &#125;\n       &#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h2><p><a href=\"https://www.cnblogs.com/tlzzu/p/4365112.html\">1、Asp.Net WebApi对js POST带参数跨域请求的支持方案</a><br><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Methods/OPTIONS\">2、OPTIONS-HTTP|MDN</a><br><a href=\"http://www.fed123.com/javascriptnodejs/4798.html\">3、什么时候会发送options请求</a><br><a href=\"https://huadou145.lofter.com/post/205d4db3_1c8bfba2e\">4、封面图源</a></p>\n","more":"<h2 id=\"开发环境\"><a href=\"#开发环境\" class=\"headerlink\" title=\"开发环境\"></a>开发环境</h2><p>OS: win10<br>编译器：visual studio 2019</p>\n<h2 id=\"配置web-config允许跨域\"><a href=\"#配置web-config允许跨域\" class=\"headerlink\" title=\"配置web.config允许跨域\"></a>配置web.config允许跨域</h2><p>在system.webServer节点中添加如下customHeaders,如下：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&lt;system.webServer&gt;\n&lt;httpProtocol&gt;\n      &lt;customHeaders&gt;\n        &lt;add name&#x3D;&quot;Access-Control-Allow-Origin&quot; value&#x3D;&quot;*&quot; &#x2F;&gt;\n        &lt;add name&#x3D;&quot;Access-Control-Allow-Headers&quot; value&#x3D;&quot;Content-Type&quot; &#x2F;&gt;\n        &lt;add name&#x3D;&quot;Access-Control-Allow-Methods&quot; value&#x3D;&quot;GET, POST, PUT, DELETE, OPTIONS&quot; &#x2F;&gt;\n      &lt;&#x2F;customHeaders&gt;\n    &lt;&#x2F;httpProtocol&gt;\n  &lt;&#x2F;system.webServer&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>其中Access-Control-Allow-Headers表示IIS允许接受的headers的集合，如果请求头中需要添加自定义内容，value需要设置为如下内容:</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&lt;add name&#x3D;&quot;Access-Control-Allow-Headers&quot; value&#x3D;&quot;Origin,X-Requested-With,Content-Type,accept,key&quot; &#x2F;&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>其中key表示请求头中的键。</p>\n<h2 id=\"在Global-asax中添加对OPTIONS请求的处理\"><a href=\"#在Global-asax中添加对OPTIONS请求的处理\" class=\"headerlink\" title=\"在Global.asax中添加对OPTIONS请求的处理\"></a>在Global.asax中添加对OPTIONS请求的处理</h2><h3 id=\"关于OPTIONS请求\"><a href=\"#关于OPTIONS请求\" class=\"headerlink\" title=\"关于OPTIONS请求\"></a>关于OPTIONS请求</h3><p>在 CORS 中，可以使用 OPTIONS 方法发起一个预检请求，以检测实际请求是否可以被服务器所接受。预检请求报文中的 Access-Control-Request-Method 首部字段告知服务器实际请求所使用的 HTTP 方法；Access-Control-Request-Headers 首部字段告知服务器实际请求所携带的自定义首部字段。服务器基于从预检请求获得的信息来判断，是否接受接下来的实际请求。</p>\n<p>之前大概2017年我写跨域的解决方案的时候是没有OPTIONS请求的，但现在OPTIONS请求已经成了规范，即满足某些特定条件下，浏览器必须要首先使用OPTIONS发放发送一个预检请求到服务器。可参考MDN中的<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Access_control_CORS\">HTTP访问控制</a>中对此部分的描述。</p>\n<h3 id=\"对所有的options请求返回\"><a href=\"#对所有的options请求返回\" class=\"headerlink\" title=\"对所有的options请求返回\"></a>对所有的options请求返回</h3><p>在Global.asax中添加如下内容：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">protected void Application_BeginRequest(object sender, EventArgs e)\n       &#123;\n           var req &#x3D; System.Web.HttpContext.Current.Request;\n           if (req.HttpMethod &#x3D;&#x3D; &quot;OPTIONS&quot;)&#x2F;&#x2F;过滤options请求，用于js跨域\n           &#123;\n               Response.StatusCode &#x3D; 200;\n               Response.SubStatusCode &#x3D; 200;\n               Response.End();\n           &#125;\n       &#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h2><p><a href=\"https://www.cnblogs.com/tlzzu/p/4365112.html\">1、Asp.Net WebApi对js POST带参数跨域请求的支持方案</a><br><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Methods/OPTIONS\">2、OPTIONS-HTTP|MDN</a><br><a href=\"http://www.fed123.com/javascriptnodejs/4798.html\">3、什么时候会发送options请求</a><br><a href=\"https://huadou145.lofter.com/post/205d4db3_1c8bfba2e\">4、封面图源</a></p>","categories":[],"tags":[{"name":"ASP.NET","path":"api/tags/ASP.NET.json"},{"name":"CORS","path":"api/tags/CORS.json"}]}