{"title":"Vue3构建Cesium应用:Provide/Inject在Viewer对象传递中的应用","slug":"Vue3构建Cesium应用-Provide-Inject在Viewer对象传递中的应用","date":"2024-03-23T10:07:13.000Z","updated":"2024-03-23T10:13:32.086Z","comments":true,"path":"api/articles/Vue3构建Cesium应用-Provide-Inject在Viewer对象传递中的应用.json","excerpt":"本文主要介绍Vue3中使用Cesium时，如何通过依赖注入将viewer对象传递给子组件。","covers":["/2024/03/23/vue3-gou-jian-cesium-ying-yong-provide-inject-zai-viewer-dui-xiang-chuan-di-zhong-de-ying-yong/2024-03-23_180750.jpg"],"content":"<p>本文主要介绍Vue3中使用Cesium时，如何通过依赖注入将viewer对象传递给子组件。</p>\n<span id=\"more\"></span>\n\n<blockquote>\n<p>背景：想要实现的效果，以组件的形式添加一个实时显示坐标的功能，其中涉及到了viewer向在子组件中传递数据</p>\n</blockquote>\n<p><img src=\"/2024/03/23/vue3-gou-jian-cesium-ying-yong-provide-inject-zai-viewer-dui-xiang-chuan-di-zhong-de-ying-yong/2024-03-23_180750.jpg\"></p>\n<h2 id=\"使用provide和inject\"><a href=\"#使用provide和inject\" class=\"headerlink\" title=\"使用provide和inject\"></a>使用provide和inject</h2><h3 id=\"父组件\"><a href=\"#父组件\" class=\"headerlink\" title=\"父组件\"></a>父组件</h3><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token operator\">&lt;</span>script setup<span class=\"token operator\">></span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> provide <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'vue'</span>\n\n<span class=\"token function\">provide</span><span class=\"token punctuation\">(</span><span class=\"token comment\">/* 注入名 */</span> <span class=\"token string\">'message'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">/* 值 */</span> <span class=\"token string\">'hello!'</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"子组件\"><a href=\"#子组件\" class=\"headerlink\" title=\"子组件\"></a>子组件</h3><p> 要注入上层组件提供的数据，需使用 <a href=\"https://cn.vuejs.org/api/composition-api-dependency-injection.html#inject\"><code>inject()</code></a> 函数： </p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token operator\">&lt;</span>script setup<span class=\"token operator\">></span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> inject <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'vue'</span>\n\n<span class=\"token keyword\">const</span> message <span class=\"token operator\">=</span> <span class=\"token function\">inject</span><span class=\"token punctuation\">(</span><span class=\"token string\">'message'</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"如何向子组件传递viewer对象？\"><a href=\"#如何向子组件传递viewer对象？\" class=\"headerlink\" title=\"如何向子组件传递viewer对象？\"></a>如何向子组件传递viewer对象？</h2><p>有2种方法：</p>\n<p>1、在viewer初始化之后再加载子组件</p>\n<p>2、使用侦听器</p>\n<h3 id=\"1、在viewer初始化之后再加载子组件\"><a href=\"#1、在viewer初始化之后再加载子组件\" class=\"headerlink\" title=\"1、在viewer初始化之后再加载子组件\"></a>1、在viewer初始化之后再加载子组件</h3><p>父组件：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token operator\">&lt;</span>rt<span class=\"token operator\">-</span>loc v<span class=\"token operator\">-</span><span class=\"token keyword\">if</span><span class=\"token operator\">=</span><span class=\"token string\">\"init\"</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>rt<span class=\"token operator\">-</span>loc<span class=\"token operator\">></span>\n\n<span class=\"token operator\">&lt;</span>script setup<span class=\"token operator\">></span>\n    <span class=\"token keyword\">import</span> RtLoc <span class=\"token keyword\">from</span> <span class=\"token string\">'../components/RtLoc/RtLoc.vue'</span>\n\t<span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> ref<span class=\"token punctuation\">,</span>provide<span class=\"token punctuation\">,</span> onMounted <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'vue'</span>\n    <span class=\"token keyword\">let</span> init<span class=\"token operator\">=</span><span class=\"token function\">ref</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">let</span> viewer<span class=\"token operator\">=</span><span class=\"token function\">ref</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">provide</span><span class=\"token punctuation\">(</span><span class=\"token string\">'globalViewer'</span><span class=\"token punctuation\">,</span>viewer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">onMounted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span>\n        viewer<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Cesium<span class=\"token punctuation\">.</span>Viewer</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"map\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        init<span class=\"token punctuation\">.</span>value<span class=\"token operator\">=</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>子组件RtLoc.vue</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token operator\">&lt;</span>script setup<span class=\"token operator\">></span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> onMounted<span class=\"token punctuation\">,</span> ref<span class=\"token punctuation\">,</span>inject<span class=\"token punctuation\">,</span>watchEffect  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'vue'</span>\n<span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> Cesium <span class=\"token keyword\">from</span> <span class=\"token string\">'cesium'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> globalVar<span class=\"token operator\">=</span><span class=\"token function\">inject</span><span class=\"token punctuation\">(</span><span class=\"token string\">'globalViewer'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">onMounted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>globalVar<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"初始化了\"</span><span class=\"token operator\">+</span>globalVar<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span>\n    <span class=\"token function\">showRtCoords</span><span class=\"token punctuation\">(</span>globalVar<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//注册地图事件</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"为空\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"2、子组件中使用watch或watchEffect\"><a href=\"#2、子组件中使用watch或watchEffect\" class=\"headerlink\" title=\"2、子组件中使用watch或watchEffect\"></a>2、子组件中使用watch或watchEffect</h3><p>在有些情况下，我们需要在状态变化时执行一些“副作用”：例如更改 DOM，或是根据异步操作的结果去修改另一处的状态。</p>\n<p> watch默认是 懒执行的，仅当数据源变化时，才会执行回调。但在某些场景中，我们希望在创建侦听器时，立即执行一遍回调。举例来说，我们想请求一些初始数据，然后在相关状态更改时重新请求数据。 </p>\n<p>在组合式 API 中，我们可以使用 <a href=\"https://cn.vuejs.org/api/reactivity-core.html#watch\"><code>watch</code> 函数</a>在每次响应式状态发生变化时触发回调函数。</p>\n<p>watch语法如下：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token function\">watch</span><span class=\"token punctuation\">(</span>\n  source<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">(</span><span class=\"token parameter\">newValue<span class=\"token punctuation\">,</span> oldValue</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 立即执行，且当 `source` 改变时再次执行</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">immediate</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">&#125;</span><span class=\"token comment\">//如果需要立即执行</span>\n  <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">once</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">&#125;</span><span class=\"token comment\">//如果需要侦听器是一次性的</span>\n<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>此时父组件中的init默认为true:</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> init<span class=\"token operator\">=</span><span class=\"token function\">ref</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>子组件：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token function\">watch</span><span class=\"token punctuation\">(</span>globalVar<span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>globalVar<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"初始化了\"</span><span class=\"token operator\">+</span>globalVar<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span>\n    <span class=\"token function\">showRtCoords</span><span class=\"token punctuation\">(</span>globalVar<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//注册地图事件</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"为空\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token literal-property property\">或使用watchEffect</span><span class=\"token operator\">:</span>\n<span class=\"token function\">watchEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>globalVar<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"初始化了\"</span><span class=\"token operator\">+</span>globalVar<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span>\n    <span class=\"token function\">showRtCoords</span><span class=\"token punctuation\">(</span>globalVar<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"为空\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<blockquote>\n<p><code>watch</code> 和 <code>watchEffect</code> 都能响应式地执行有副作用的回调。它们之间的主要区别是追踪响应式依赖的方式：</p>\n<ul>\n<li><code>watch</code> 只追踪明确侦听的数据源。它不会追踪任何在回调中访问到的东西。另外，仅在数据源确实改变时才会触发回调。<code>watch</code> 会避免在发生副作用时追踪依赖，因此，我们能更加精确地控制回调函数的触发时机。</li>\n<li><code>watchEffect</code>，则会在副作用发生期间追踪依赖。它会在同步执行过程中，自动追踪所有能访问到的响应式属性。这更方便，而且代码往往更简洁，但有时其响应性依赖关系会不那么明确。</li>\n</ul>\n</blockquote>\n","more":"<blockquote>\n<p>背景：想要实现的效果，以组件的形式添加一个实时显示坐标的功能，其中涉及到了viewer向在子组件中传递数据</p>\n</blockquote>\n<p><img src=\"/2024/03/23/vue3-gou-jian-cesium-ying-yong-provide-inject-zai-viewer-dui-xiang-chuan-di-zhong-de-ying-yong/2024-03-23_180750.jpg\"></p>\n<h2 id=\"使用provide和inject\"><a href=\"#使用provide和inject\" class=\"headerlink\" title=\"使用provide和inject\"></a>使用provide和inject</h2><h3 id=\"父组件\"><a href=\"#父组件\" class=\"headerlink\" title=\"父组件\"></a>父组件</h3><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token operator\">&lt;</span>script setup<span class=\"token operator\">></span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> provide <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'vue'</span>\n\n<span class=\"token function\">provide</span><span class=\"token punctuation\">(</span><span class=\"token comment\">/* 注入名 */</span> <span class=\"token string\">'message'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">/* 值 */</span> <span class=\"token string\">'hello!'</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"子组件\"><a href=\"#子组件\" class=\"headerlink\" title=\"子组件\"></a>子组件</h3><p> 要注入上层组件提供的数据，需使用 <a href=\"https://cn.vuejs.org/api/composition-api-dependency-injection.html#inject\"><code>inject()</code></a> 函数： </p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token operator\">&lt;</span>script setup<span class=\"token operator\">></span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> inject <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'vue'</span>\n\n<span class=\"token keyword\">const</span> message <span class=\"token operator\">=</span> <span class=\"token function\">inject</span><span class=\"token punctuation\">(</span><span class=\"token string\">'message'</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"如何向子组件传递viewer对象？\"><a href=\"#如何向子组件传递viewer对象？\" class=\"headerlink\" title=\"如何向子组件传递viewer对象？\"></a>如何向子组件传递viewer对象？</h2><p>有2种方法：</p>\n<p>1、在viewer初始化之后再加载子组件</p>\n<p>2、使用侦听器</p>\n<h3 id=\"1、在viewer初始化之后再加载子组件\"><a href=\"#1、在viewer初始化之后再加载子组件\" class=\"headerlink\" title=\"1、在viewer初始化之后再加载子组件\"></a>1、在viewer初始化之后再加载子组件</h3><p>父组件：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token operator\">&lt;</span>rt<span class=\"token operator\">-</span>loc v<span class=\"token operator\">-</span><span class=\"token keyword\">if</span><span class=\"token operator\">=</span><span class=\"token string\">\"init\"</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>rt<span class=\"token operator\">-</span>loc<span class=\"token operator\">></span>\n\n<span class=\"token operator\">&lt;</span>script setup<span class=\"token operator\">></span>\n    <span class=\"token keyword\">import</span> RtLoc <span class=\"token keyword\">from</span> <span class=\"token string\">'../components/RtLoc/RtLoc.vue'</span>\n\t<span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> ref<span class=\"token punctuation\">,</span>provide<span class=\"token punctuation\">,</span> onMounted <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'vue'</span>\n    <span class=\"token keyword\">let</span> init<span class=\"token operator\">=</span><span class=\"token function\">ref</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">let</span> viewer<span class=\"token operator\">=</span><span class=\"token function\">ref</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">provide</span><span class=\"token punctuation\">(</span><span class=\"token string\">'globalViewer'</span><span class=\"token punctuation\">,</span>viewer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">onMounted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span>\n        viewer<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Cesium<span class=\"token punctuation\">.</span>Viewer</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"map\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        init<span class=\"token punctuation\">.</span>value<span class=\"token operator\">=</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>子组件RtLoc.vue</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token operator\">&lt;</span>script setup<span class=\"token operator\">></span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> onMounted<span class=\"token punctuation\">,</span> ref<span class=\"token punctuation\">,</span>inject<span class=\"token punctuation\">,</span>watchEffect  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'vue'</span>\n<span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> Cesium <span class=\"token keyword\">from</span> <span class=\"token string\">'cesium'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> globalVar<span class=\"token operator\">=</span><span class=\"token function\">inject</span><span class=\"token punctuation\">(</span><span class=\"token string\">'globalViewer'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">onMounted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>globalVar<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"初始化了\"</span><span class=\"token operator\">+</span>globalVar<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span>\n    <span class=\"token function\">showRtCoords</span><span class=\"token punctuation\">(</span>globalVar<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//注册地图事件</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"为空\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"2、子组件中使用watch或watchEffect\"><a href=\"#2、子组件中使用watch或watchEffect\" class=\"headerlink\" title=\"2、子组件中使用watch或watchEffect\"></a>2、子组件中使用watch或watchEffect</h3><p>在有些情况下，我们需要在状态变化时执行一些“副作用”：例如更改 DOM，或是根据异步操作的结果去修改另一处的状态。</p>\n<p> watch默认是 懒执行的，仅当数据源变化时，才会执行回调。但在某些场景中，我们希望在创建侦听器时，立即执行一遍回调。举例来说，我们想请求一些初始数据，然后在相关状态更改时重新请求数据。 </p>\n<p>在组合式 API 中，我们可以使用 <a href=\"https://cn.vuejs.org/api/reactivity-core.html#watch\"><code>watch</code> 函数</a>在每次响应式状态发生变化时触发回调函数。</p>\n<p>watch语法如下：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token function\">watch</span><span class=\"token punctuation\">(</span>\n  source<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">(</span><span class=\"token parameter\">newValue<span class=\"token punctuation\">,</span> oldValue</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 立即执行，且当 `source` 改变时再次执行</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">immediate</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">&#125;</span><span class=\"token comment\">//如果需要立即执行</span>\n  <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">once</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">&#125;</span><span class=\"token comment\">//如果需要侦听器是一次性的</span>\n<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>此时父组件中的init默认为true:</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> init<span class=\"token operator\">=</span><span class=\"token function\">ref</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>子组件：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token function\">watch</span><span class=\"token punctuation\">(</span>globalVar<span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>globalVar<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"初始化了\"</span><span class=\"token operator\">+</span>globalVar<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span>\n    <span class=\"token function\">showRtCoords</span><span class=\"token punctuation\">(</span>globalVar<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//注册地图事件</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"为空\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token literal-property property\">或使用watchEffect</span><span class=\"token operator\">:</span>\n<span class=\"token function\">watchEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>globalVar<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"初始化了\"</span><span class=\"token operator\">+</span>globalVar<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span>\n    <span class=\"token function\">showRtCoords</span><span class=\"token punctuation\">(</span>globalVar<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"为空\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<blockquote>\n<p><code>watch</code> 和 <code>watchEffect</code> 都能响应式地执行有副作用的回调。它们之间的主要区别是追踪响应式依赖的方式：</p>\n<ul>\n<li><code>watch</code> 只追踪明确侦听的数据源。它不会追踪任何在回调中访问到的东西。另外，仅在数据源确实改变时才会触发回调。<code>watch</code> 会避免在发生副作用时追踪依赖，因此，我们能更加精确地控制回调函数的触发时机。</li>\n<li><code>watchEffect</code>，则会在副作用发生期间追踪依赖。它会在同步执行过程中，自动追踪所有能访问到的响应式属性。这更方便，而且代码往往更简洁，但有时其响应性依赖关系会不那么明确。</li>\n</ul>\n</blockquote>","categories":[{"name":"Cesium","path":"api/categories/Cesium.json"},{"name":"Vue3","path":"api/categories/Vue3.json"}],"tags":[{"name":"Cesium","path":"api/tags/Cesium.json"},{"name":"Vue3","path":"api/tags/Vue3.json"}]}