{"title":"利用Gradle优化Android构建流程：自动化处理JavaScript文件","slug":"利用Gradle优化Android构建流程：自动化处理JavaScript文件","date":"2024-04-21T08:21:51.000Z","updated":"2024-04-21T08:23:21.155Z","comments":true,"path":"api/articles/利用Gradle优化Android构建流程：自动化处理JavaScript文件.json","excerpt":"在Android开发的世界中，build.gradle文件不仅仅是构建配置的核心——它也是提升构建效率和灵活性的关键工具。通过精心设计的自定义Task，开发者能够在APK的构建流程中插入定制化的操作，如文件的拷贝、删除等。这些操作能够在构建前预处理资源，或在构建后清理临时文件，从而确保最终的APK文件是按照精确的项目需求来打造的。 ","covers":null,"content":"<p>在Android开发的世界中，<code>build.gradle</code>文件不仅仅是构建配置的核心——它也是提升构建效率和灵活性的关键工具。通过精心设计的自定义Task，开发者能够在APK的构建流程中插入定制化的操作，如文件的拷贝、删除等。这些操作能够在构建前预处理资源，或在构建后清理临时文件，从而确保最终的APK文件是按照精确的项目需求来打造的。 </p>\n<span id=\"more\"></span>\n\n<h2 id=\"什么gradle\"><a href=\"#什么gradle\" class=\"headerlink\" title=\"什么gradle\"></a>什么gradle</h2><p>Gradle是一个强大的自动化构建工具，它结合了Apache Ant的灵活性和Apache Maven的依赖管理和约定优于配置的理念。Gradle使用Groovy或Kotlin DSL（领域特定语言）来编写构建脚本，而不是传统的XML。这使得Gradle的构建脚本更加简洁和易于理解。</p>\n<h2 id=\"gradle在Android-APK打包中的作用\"><a href=\"#gradle在Android-APK打包中的作用\" class=\"headerlink\" title=\"gradle在Android APK打包中的作用\"></a>gradle在Android APK打包中的作用</h2><p> <strong>Gradle</strong> —— 这个在Android开发领域中不可或缺的构建系统，以其强大的功能和灵活性，在Android Studio中占据了官方构建工具的宝座。它赋予开发者无与伦比的能力，让他们可以精确地定义构建配置，高效地管理项目依赖，以及自动化地执行测试和部署任务。这一切，不仅极大提升了开发的效率，更为项目的长期可维护性和稳定性奠定了坚实的基础。 </p>\n<h2 id=\"Task的定义\"><a href=\"#Task的定义\" class=\"headerlink\" title=\"Task的定义\"></a>Task的定义</h2><p>在 Gradle 中，有多种类型的任务，用于执行不同的操作。以下是一些常见的任务类型：</p>\n<ol>\n<li><strong>Copy</strong>：用于复制文件或目录。</li>\n<li><strong>Delete</strong>：用于删除文件或目录。</li>\n<li><strong>Exec</strong>：用于在操作系统上执行外部命令。</li>\n<li><strong>JavaExec</strong>：用于在 JVM 上执行 Java 类。</li>\n<li><strong>Zip</strong>：用于创建压缩文件。</li>\n<li><strong>Tar</strong>：用于创建 Tar 文件。</li>\n<li><strong>Checkstyle</strong>：用于执行代码风格检查。</li>\n<li><strong>Test</strong>：用于执行测试。</li>\n<li><strong>Compile</strong>：用于编译源代码。</li>\n<li><strong>Clean</strong>：用于清理构建生成的文件。</li>\n<li><strong>Build</strong>：用于构建项目。</li>\n<li><strong>GenerateBuildConfig</strong>：用于生成构建配置文件。</li>\n<li><strong>GenerateResources</strong>：用于生成资源文件。</li>\n</ol>\n<p>这里使用 <code>Exec</code> 类型的任务执行 Windows 上的 <code>.bat</code> 脚本，可以按照以下方式定义任务： </p>\n<pre class=\"line-numbers language-gradle\" data-language=\"gradle\"><code class=\"language-gradle\">task <span class=\"token function\">runBatchScript</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">:</span> Exec<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    commandLine <span class=\"token string\">'cmd'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'/c'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'path/to/your/script.bat'</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>这个task是放在模块(非项目)下的build.gradle文件中的，接着定义这个task的执行时机，可使用preBuild或asemble的相关方法。</p>\n<h2 id=\"Task的执行\"><a href=\"#Task的执行\" class=\"headerlink\" title=\"Task的执行\"></a>Task的执行</h2><p>在Gradle中，preBuild.dependsOn和assemble.dependsOn都是用来指定任务依赖关系的，但它们在构建生命周期中的作用时机不同。<br><strong>preBuild.dependsOn:</strong> preBuild是一个在Android构建生命周期中非常早期的任务。当指定preBuild.dependsOn时，添加的任务会在编译代码之前执行。这通常用于执行一些准备工作，比如设置环境变量，检查必要的依赖等。<br><strong>assemble.dependsOn:</strong> 相比之下，assemble任务是在编译完成后执行的，它负责将所有的编译结果打包成APK文件。当使用assemble.dependsOn时，添加的任务会在APK打包之前执行。这可以用于最后的检查，比如验证编译结果，或者修改打包内容等。<br>简而言之，preBuild.dependsOn用于在编译前执行任务，而assemble.dependsOn用于在打包前执行任务。选择哪一个取决于您想要在构建流程的哪个阶段执行特定的任务。<br>除了表示依赖关系，preBuild和assemble还有更多的用法，可以直接在build.gradle文件中查看其属性。</p>\n<p>下面是在编译前执行名为runBatchScript的task:</p>\n<pre class=\"line-numbers language-gradle\" data-language=\"gradle\"><code class=\"language-gradle\">preBuild<span class=\"token punctuation\">.</span><span class=\"token function\">dependsOn</span><span class=\"token punctuation\">(</span>runBatchScript<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>如果是编译后执行,可使用</p>\n<pre class=\"line-numbers language-gradle\" data-language=\"gradle\"><code class=\"language-gradle\">\n<span class=\"token comment\">// 在 assemble 任务之后执行拷贝回文件任务</span>\n<span class=\"token comment\">//assemble&#123;</span>\n<span class=\"token comment\">//    dependsOn(copyBackFiles)</span>\n<span class=\"token comment\">//&#125;</span>\n<span class=\"token comment\">// 在 assemble 任务之后执行删除临时目录任务</span>\nassemble<span class=\"token punctuation\">.</span><span class=\"token function\">finalizedBy</span><span class=\"token punctuation\">(</span>copyBackFiles<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p>说明：在gradle 5.6.4，Android Studio 3.6.3下没起作用。</p>\n</blockquote>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>本文简单介绍了下android apk构建过程中，通过自定义task来干预apk的执行，可据此实现一些诸如js加密处理等的功能，当然Gradle 的任务类型非常灵活，你可以根据需要自定义任务类型来执行各种操作。</p>\n<p>在我们的对话中，我们实现了以下步骤：</p>\n<ol>\n<li>创建了一个 Gradle 任务来将 <code>assets</code> 目录下的某个 JavaScript 文件夹拷贝到临时目录。</li>\n<li>使用了一个批处理脚本（<code>.bat</code> 文件）来对临时目录中的 JavaScript 文件进行处理。</li>\n<li>在 Gradle 任务中，将处理后的 JavaScript 文件夹从临时目录拷贝回原 JavaScript 目录。</li>\n<li>执行了打包 APK 的 Gradle 命令。</li>\n<li>创建了一个 Gradle 任务来将临时目录中的 JavaScript 文件拷贝回原 JavaScript 目录，并删除了临时目录。</li>\n</ol>\n<p>我们使用了以下技术和方法：</p>\n<ul>\n<li>Gradle：使用 Gradle 构建工具来管理和执行任务。</li>\n<li>Copy Task：使用 Gradle 的 Copy 任务来实现文件的复制。</li>\n<li>Exec Task：使用 Gradle 的 Exec 任务来执行外部命令，比如运行批处理脚本。</li>\n<li>批处理脚本：编写了一个批处理脚本来处理 JavaScript 文件。</li>\n<li>文件操作：使用 Groovy 文件操作 API 来执行文件和文件夹的操作，比如复制、删除等。</li>\n</ul>\n<p>通过这些方法，我们成功地实现了对 JavaScript 文件的处理，并将其集成到 Gradle 构建流程中。</p>\n<pre class=\"line-numbers language-groovy\" data-language=\"groovy\"><code class=\"language-groovy\">task createTempDirectory <span class=\"token punctuation\">&#123;</span>\n    doLast <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// 创建临时目录</span>\n        mkdir <span class=\"token string\">'tempAssets'</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\ntask <span class=\"token function\">copyToTemp</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">:</span> Copy<span class=\"token punctuation\">,</span> dependsOn<span class=\"token punctuation\">:</span> createTempDirectory<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    from <span class=\"token string\">'src/main/assets/static/js/logic'</span>\n    into <span class=\"token string\">'tempAssets'</span>\n<span class=\"token punctuation\">&#125;</span>\n\ntask <span class=\"token function\">runBatScript</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">:</span> Exec<span class=\"token punctuation\">,</span> dependsOn<span class=\"token punctuation\">:</span> copyToTemp<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 执行批处理脚本</span>\n    commandLine <span class=\"token string\">'cmd'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'/c'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'your_script.bat'</span>\n<span class=\"token punctuation\">&#125;</span>\n\ntask <span class=\"token function\">copyBackToOriginal</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">:</span> Copy<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    from <span class=\"token string\">'tempAssets'</span>\n    into <span class=\"token string\">'src/main/assets/static/js/logic'</span>\n<span class=\"token punctuation\">&#125;</span>\n\ntask <span class=\"token function\">deleteTempDirectory</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">:</span> Delete<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 删除临时目录</span>\n    delete <span class=\"token string\">'tempAssets'</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// 在 assemble 任务之前执行 copyBackToOriginal 任务</span>\nassemble<span class=\"token punctuation\">.</span><span class=\"token function\">dependsOn</span><span class=\"token punctuation\">(</span>copyBackToOriginal<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 在 assemble 任务之后执行 deleteTempDirectory 任务</span>\nassemble<span class=\"token punctuation\">.</span><span class=\"token function\">finalizedBy</span><span class=\"token punctuation\">(</span>deleteTempDirectory<span class=\"token punctuation\">)</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>涉及到的bat</p>\n<h2 id=\"文件拷贝\"><a href=\"#文件拷贝\" class=\"headerlink\" title=\"文件拷贝\"></a>文件拷贝</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">@echo off\n<span class=\"token builtin class-name\">set</span> <span class=\"token assign-left variable\">source</span><span class=\"token operator\">=</span>xx<span class=\"token punctuation\">\\</span>tempAssets\n<span class=\"token builtin class-name\">set</span> <span class=\"token assign-left variable\">destination</span><span class=\"token operator\">=</span>xx<span class=\"token punctuation\">\\</span>src<span class=\"token punctuation\">\\</span>main<span class=\"token punctuation\">\\</span>assets<span class=\"token punctuation\">\\</span>static<span class=\"token punctuation\">\\</span>js<span class=\"token punctuation\">\\</span>logic\nxcopy /i /Y <span class=\"token string\">\"%source%\"</span> <span class=\"token string\">\"%destination%\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"js加密处理\"><a href=\"#js加密处理\" class=\"headerlink\" title=\"js加密处理\"></a>js加密处理</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">@echo off\n<span class=\"token builtin class-name\">set</span> <span class=\"token assign-left variable\">JS_OBFUSCATOR_PATH</span><span class=\"token operator\">=</span>C:<span class=\"token punctuation\">\\</span>Users<span class=\"token punctuation\">\\</span>Administrator<span class=\"token punctuation\">\\</span>AppData<span class=\"token punctuation\">\\</span>Roaming<span class=\"token punctuation\">\\</span>npm<span class=\"token punctuation\">\\</span>javascript-obfuscator.cmd\n<span class=\"token builtin class-name\">set</span> <span class=\"token assign-left variable\">INPUT_PATH</span><span class=\"token operator\">=</span>xx<span class=\"token punctuation\">\\</span>js<span class=\"token punctuation\">\\</span>logic\n<span class=\"token builtin class-name\">set</span> <span class=\"token assign-left variable\">OUTPUT_PATH</span><span class=\"token operator\">=</span>xx<span class=\"token punctuation\">\\</span>js<span class=\"token punctuation\">\\</span>logic2\n%JS_OBFUSCATOR_PATH% %INPUT_PATH% <span class=\"token parameter variable\">--output</span> %OUTPUT_PATH%<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n","more":"<h2 id=\"什么gradle\"><a href=\"#什么gradle\" class=\"headerlink\" title=\"什么gradle\"></a>什么gradle</h2><p>Gradle是一个强大的自动化构建工具，它结合了Apache Ant的灵活性和Apache Maven的依赖管理和约定优于配置的理念。Gradle使用Groovy或Kotlin DSL（领域特定语言）来编写构建脚本，而不是传统的XML。这使得Gradle的构建脚本更加简洁和易于理解。</p>\n<h2 id=\"gradle在Android-APK打包中的作用\"><a href=\"#gradle在Android-APK打包中的作用\" class=\"headerlink\" title=\"gradle在Android APK打包中的作用\"></a>gradle在Android APK打包中的作用</h2><p> <strong>Gradle</strong> —— 这个在Android开发领域中不可或缺的构建系统，以其强大的功能和灵活性，在Android Studio中占据了官方构建工具的宝座。它赋予开发者无与伦比的能力，让他们可以精确地定义构建配置，高效地管理项目依赖，以及自动化地执行测试和部署任务。这一切，不仅极大提升了开发的效率，更为项目的长期可维护性和稳定性奠定了坚实的基础。 </p>\n<h2 id=\"Task的定义\"><a href=\"#Task的定义\" class=\"headerlink\" title=\"Task的定义\"></a>Task的定义</h2><p>在 Gradle 中，有多种类型的任务，用于执行不同的操作。以下是一些常见的任务类型：</p>\n<ol>\n<li><strong>Copy</strong>：用于复制文件或目录。</li>\n<li><strong>Delete</strong>：用于删除文件或目录。</li>\n<li><strong>Exec</strong>：用于在操作系统上执行外部命令。</li>\n<li><strong>JavaExec</strong>：用于在 JVM 上执行 Java 类。</li>\n<li><strong>Zip</strong>：用于创建压缩文件。</li>\n<li><strong>Tar</strong>：用于创建 Tar 文件。</li>\n<li><strong>Checkstyle</strong>：用于执行代码风格检查。</li>\n<li><strong>Test</strong>：用于执行测试。</li>\n<li><strong>Compile</strong>：用于编译源代码。</li>\n<li><strong>Clean</strong>：用于清理构建生成的文件。</li>\n<li><strong>Build</strong>：用于构建项目。</li>\n<li><strong>GenerateBuildConfig</strong>：用于生成构建配置文件。</li>\n<li><strong>GenerateResources</strong>：用于生成资源文件。</li>\n</ol>\n<p>这里使用 <code>Exec</code> 类型的任务执行 Windows 上的 <code>.bat</code> 脚本，可以按照以下方式定义任务： </p>\n<pre class=\"line-numbers language-gradle\" data-language=\"gradle\"><code class=\"language-gradle\">task <span class=\"token function\">runBatchScript</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">:</span> Exec<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    commandLine <span class=\"token string\">'cmd'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'/c'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'path/to/your/script.bat'</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>这个task是放在模块(非项目)下的build.gradle文件中的，接着定义这个task的执行时机，可使用preBuild或asemble的相关方法。</p>\n<h2 id=\"Task的执行\"><a href=\"#Task的执行\" class=\"headerlink\" title=\"Task的执行\"></a>Task的执行</h2><p>在Gradle中，preBuild.dependsOn和assemble.dependsOn都是用来指定任务依赖关系的，但它们在构建生命周期中的作用时机不同。<br><strong>preBuild.dependsOn:</strong> preBuild是一个在Android构建生命周期中非常早期的任务。当指定preBuild.dependsOn时，添加的任务会在编译代码之前执行。这通常用于执行一些准备工作，比如设置环境变量，检查必要的依赖等。<br><strong>assemble.dependsOn:</strong> 相比之下，assemble任务是在编译完成后执行的，它负责将所有的编译结果打包成APK文件。当使用assemble.dependsOn时，添加的任务会在APK打包之前执行。这可以用于最后的检查，比如验证编译结果，或者修改打包内容等。<br>简而言之，preBuild.dependsOn用于在编译前执行任务，而assemble.dependsOn用于在打包前执行任务。选择哪一个取决于您想要在构建流程的哪个阶段执行特定的任务。<br>除了表示依赖关系，preBuild和assemble还有更多的用法，可以直接在build.gradle文件中查看其属性。</p>\n<p>下面是在编译前执行名为runBatchScript的task:</p>\n<pre class=\"line-numbers language-gradle\" data-language=\"gradle\"><code class=\"language-gradle\">preBuild<span class=\"token punctuation\">.</span><span class=\"token function\">dependsOn</span><span class=\"token punctuation\">(</span>runBatchScript<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>如果是编译后执行,可使用</p>\n<pre class=\"line-numbers language-gradle\" data-language=\"gradle\"><code class=\"language-gradle\">\n<span class=\"token comment\">// 在 assemble 任务之后执行拷贝回文件任务</span>\n<span class=\"token comment\">//assemble&#123;</span>\n<span class=\"token comment\">//    dependsOn(copyBackFiles)</span>\n<span class=\"token comment\">//&#125;</span>\n<span class=\"token comment\">// 在 assemble 任务之后执行删除临时目录任务</span>\nassemble<span class=\"token punctuation\">.</span><span class=\"token function\">finalizedBy</span><span class=\"token punctuation\">(</span>copyBackFiles<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p>说明：在gradle 5.6.4，Android Studio 3.6.3下没起作用。</p>\n</blockquote>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>本文简单介绍了下android apk构建过程中，通过自定义task来干预apk的执行，可据此实现一些诸如js加密处理等的功能，当然Gradle 的任务类型非常灵活，你可以根据需要自定义任务类型来执行各种操作。</p>\n<p>在我们的对话中，我们实现了以下步骤：</p>\n<ol>\n<li>创建了一个 Gradle 任务来将 <code>assets</code> 目录下的某个 JavaScript 文件夹拷贝到临时目录。</li>\n<li>使用了一个批处理脚本（<code>.bat</code> 文件）来对临时目录中的 JavaScript 文件进行处理。</li>\n<li>在 Gradle 任务中，将处理后的 JavaScript 文件夹从临时目录拷贝回原 JavaScript 目录。</li>\n<li>执行了打包 APK 的 Gradle 命令。</li>\n<li>创建了一个 Gradle 任务来将临时目录中的 JavaScript 文件拷贝回原 JavaScript 目录，并删除了临时目录。</li>\n</ol>\n<p>我们使用了以下技术和方法：</p>\n<ul>\n<li>Gradle：使用 Gradle 构建工具来管理和执行任务。</li>\n<li>Copy Task：使用 Gradle 的 Copy 任务来实现文件的复制。</li>\n<li>Exec Task：使用 Gradle 的 Exec 任务来执行外部命令，比如运行批处理脚本。</li>\n<li>批处理脚本：编写了一个批处理脚本来处理 JavaScript 文件。</li>\n<li>文件操作：使用 Groovy 文件操作 API 来执行文件和文件夹的操作，比如复制、删除等。</li>\n</ul>\n<p>通过这些方法，我们成功地实现了对 JavaScript 文件的处理，并将其集成到 Gradle 构建流程中。</p>\n<pre class=\"line-numbers language-groovy\" data-language=\"groovy\"><code class=\"language-groovy\">task createTempDirectory <span class=\"token punctuation\">&#123;</span>\n    doLast <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// 创建临时目录</span>\n        mkdir <span class=\"token string\">'tempAssets'</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\ntask <span class=\"token function\">copyToTemp</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">:</span> Copy<span class=\"token punctuation\">,</span> dependsOn<span class=\"token punctuation\">:</span> createTempDirectory<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    from <span class=\"token string\">'src/main/assets/static/js/logic'</span>\n    into <span class=\"token string\">'tempAssets'</span>\n<span class=\"token punctuation\">&#125;</span>\n\ntask <span class=\"token function\">runBatScript</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">:</span> Exec<span class=\"token punctuation\">,</span> dependsOn<span class=\"token punctuation\">:</span> copyToTemp<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 执行批处理脚本</span>\n    commandLine <span class=\"token string\">'cmd'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'/c'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'your_script.bat'</span>\n<span class=\"token punctuation\">&#125;</span>\n\ntask <span class=\"token function\">copyBackToOriginal</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">:</span> Copy<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    from <span class=\"token string\">'tempAssets'</span>\n    into <span class=\"token string\">'src/main/assets/static/js/logic'</span>\n<span class=\"token punctuation\">&#125;</span>\n\ntask <span class=\"token function\">deleteTempDirectory</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">:</span> Delete<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 删除临时目录</span>\n    delete <span class=\"token string\">'tempAssets'</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// 在 assemble 任务之前执行 copyBackToOriginal 任务</span>\nassemble<span class=\"token punctuation\">.</span><span class=\"token function\">dependsOn</span><span class=\"token punctuation\">(</span>copyBackToOriginal<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 在 assemble 任务之后执行 deleteTempDirectory 任务</span>\nassemble<span class=\"token punctuation\">.</span><span class=\"token function\">finalizedBy</span><span class=\"token punctuation\">(</span>deleteTempDirectory<span class=\"token punctuation\">)</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>涉及到的bat</p>\n<h2 id=\"文件拷贝\"><a href=\"#文件拷贝\" class=\"headerlink\" title=\"文件拷贝\"></a>文件拷贝</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">@echo off\n<span class=\"token builtin class-name\">set</span> <span class=\"token assign-left variable\">source</span><span class=\"token operator\">=</span>xx<span class=\"token punctuation\">\\</span>tempAssets\n<span class=\"token builtin class-name\">set</span> <span class=\"token assign-left variable\">destination</span><span class=\"token operator\">=</span>xx<span class=\"token punctuation\">\\</span>src<span class=\"token punctuation\">\\</span>main<span class=\"token punctuation\">\\</span>assets<span class=\"token punctuation\">\\</span>static<span class=\"token punctuation\">\\</span>js<span class=\"token punctuation\">\\</span>logic\nxcopy /i /Y <span class=\"token string\">\"%source%\"</span> <span class=\"token string\">\"%destination%\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"js加密处理\"><a href=\"#js加密处理\" class=\"headerlink\" title=\"js加密处理\"></a>js加密处理</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">@echo off\n<span class=\"token builtin class-name\">set</span> <span class=\"token assign-left variable\">JS_OBFUSCATOR_PATH</span><span class=\"token operator\">=</span>C:<span class=\"token punctuation\">\\</span>Users<span class=\"token punctuation\">\\</span>Administrator<span class=\"token punctuation\">\\</span>AppData<span class=\"token punctuation\">\\</span>Roaming<span class=\"token punctuation\">\\</span>npm<span class=\"token punctuation\">\\</span>javascript-obfuscator.cmd\n<span class=\"token builtin class-name\">set</span> <span class=\"token assign-left variable\">INPUT_PATH</span><span class=\"token operator\">=</span>xx<span class=\"token punctuation\">\\</span>js<span class=\"token punctuation\">\\</span>logic\n<span class=\"token builtin class-name\">set</span> <span class=\"token assign-left variable\">OUTPUT_PATH</span><span class=\"token operator\">=</span>xx<span class=\"token punctuation\">\\</span>js<span class=\"token punctuation\">\\</span>logic2\n%JS_OBFUSCATOR_PATH% %INPUT_PATH% <span class=\"token parameter variable\">--output</span> %OUTPUT_PATH%<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>","categories":[{"name":"Android","path":"api/categories/Android.json"}],"tags":[{"name":"Android","path":"api/tags/Android.json"}]}