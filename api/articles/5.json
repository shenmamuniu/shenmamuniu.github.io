{"title":"Jenkins打包Springboot项目并部署至Docker中","slug":"5","date":"2019-11-13T15:26:00.000Z","updated":"2020-04-30T03:32:43.000Z","comments":true,"path":"api/articles/5.json","excerpt":"本文记录Jenkins根据每次git的合并自动打包springboot项目，并将项目自动部署到容器中。","covers":["http://193.112.158.158:8081/post/20181208/2018-12-08_202735.jpg","http://193.112.158.158:8081/post/20181208/2018-12-08_203651.jpg","http://193.112.158.158:8081/post/20181208/2018-12-08_203835.jpg"],"content":"<p>本文记录Jenkins根据每次git的合并自动打包springboot项目，并将项目自动部署到容器中。</p>\n<span id=\"more\"></span>\n<h2 id=\"运行环境\"><a href=\"#运行环境\" class=\"headerlink\" title=\"运行环境\"></a>运行环境</h2><ol>\n<li>Jenkins</li>\n<li>源代码管理工具：gitblit</li>\n</ol>\n<h2 id=\"Jenkins的插件安装\"><a href=\"#Jenkins的插件安装\" class=\"headerlink\" title=\"Jenkins的插件安装\"></a>Jenkins的插件安装</h2><p>Jenkins需要安装的插件：</p>\n<ol>\n<li>Git plugin</li>\n<li>Maven Integration plugin</li>\n<li>Publish Over SSH</li>\n</ol>\n<h2 id=\"Publish-Over-SSH-插件配置\"><a href=\"#Publish-Over-SSH-插件配置\" class=\"headerlink\" title=\"Publish Over SSH 插件配置\"></a>Publish Over SSH 插件配置</h2><h3 id=\"在jenkins服务器上生成秘钥对-使用如下命令\"><a href=\"#在jenkins服务器上生成秘钥对-使用如下命令\" class=\"headerlink\" title=\"在jenkins服务器上生成秘钥对,使用如下命令\"></a>在jenkins服务器上生成秘钥对,使用如下命令</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">ssh-keygen -t rsa<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>生成完毕之后会在~&#x2F;.ssh目录下有私钥id_rsa和公钥id_rsa.pub两个文件<br><strong>注意：</strong>一定要写passphrase，否则会连不上的</p>\n<h3 id=\"复制公钥内容\"><a href=\"#复制公钥内容\" class=\"headerlink\" title=\"复制公钥内容\"></a>复制公钥内容</h3><p>将公钥id_rsa.pub文件中的内容copy到应用服务器中的~&#x2F;.ssh&#x2F;authorized_keys文件中，如果此文件中已经有内容，换行追加即可，没有的话自行创建</p>\n<h3 id=\"Jenkins配置\"><a href=\"#Jenkins配置\" class=\"headerlink\" title=\"Jenkins配置\"></a>Jenkins配置</h3><p>在系统管理-&gt;系统设置-&gt;Publish Over SSH中配置参数<br><img src=\"http://193.112.158.158:8081/post/20181208/2018-12-08_202735.jpg\"><br><strong>注意：</strong>其中Remote Directory是一个通过ssh工具传输文件时，应用服务器接收文件时的存储路径<br>配置完成之后点击下面的Test Configuration测试是否配置成功。</p>\n<h2 id=\"Jenkins编译SpringBoot类型的项目\"><a href=\"#Jenkins编译SpringBoot类型的项目\" class=\"headerlink\" title=\"Jenkins编译SpringBoot类型的项目\"></a>Jenkins编译SpringBoot类型的项目</h2><h3 id=\"基本配置\"><a href=\"#基本配置\" class=\"headerlink\" title=\"基本配置\"></a>基本配置</h3><p>在创建项目时选择<strong>构建一个maven项目</strong>，需要安装前面提到的Maven Integration plugin。<br>接着就可以配置项目了，重点配置Source Code Management及Build,Build的配置如下：<br><img src=\"http://193.112.158.158:8081/post/20181208/2018-12-08_203651.jpg\"></p>\n<h3 id=\"配置Post-Steps\"><a href=\"#配置Post-Steps\" class=\"headerlink\" title=\"配置Post Steps\"></a>配置Post Steps</h3><p>界面如图：<br><img src=\"http://193.112.158.158:8081/post/20181208/2018-12-08_203835.jpg\"><br><strong>相关参数说明：</strong></p>\n<ol>\n<li>Source files: 需要上传到应用服务器的文件，一般为jar、war等编译后的文件</li>\n<li>Remove prefix：First part of the file path that should not be created on the remote server.</li>\n<li>Remote directory</li>\n<li>Exec command：这个是文件传输完毕之后，在应用服务器中需要执行的命令，一般为脚本，后面提供一个将程序部署在docker的脚本可供参考</li>\n</ol>\n<h2 id=\"附-将本地的项目部署到docker中去的脚本\"><a href=\"#附-将本地的项目部署到docker中去的脚本\" class=\"headerlink\" title=\"[附:]将本地的项目部署到docker中去的脚本\"></a>[附:]将本地的项目部署到docker中去的脚本</h2><p>此脚本的主要执行过程：根据容器的镜像名称获取容器编号，然后停止并删除容器。接着根据镜像重启启动一个容器，并将应用的编译后的文件拷贝到容器的tomcat中，然后启动tomcat</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\"># !&#x2F;bin&#x2F;bash\nCONTAINER_ID&#x3D;&#96;docker ps| grep &quot;neil&#x2F;openjdk:v0.4&quot;|awk &#39;&#123;print $1&#125;&#39;&#96;\necho CONTAINER_ID\nif [ -n &quot;$CONTAINER_ID&quot; ]; then\n    docker stop $CONTAINER_ID\n    docker rm $CONTAINER_ID\nelse # 如果容器启动时失败了，就需要docker ps -a才能找到那个容器\n    CONTAINER_ID&#x3D;&#96;docker ps -a | grep &quot;neil&#x2F;openjdk:v0.4&quot; | awk &#39;&#123;print $1&#125;&#39;&#96;\n    if [ -n &quot;$CONTAINER_ID&quot; ]; then  # 如果是第一次在这台机器上拉取运行容器，那么docker ps -a也是找不到这个容器的\n        docker rm $CONTAINER_ID\n    fi\nfi\n# 重新启动一个容器\ndocker run -d -ti -p 9000:8080 neil&#x2F;openjdk:v0.4\nNEW_CONTAINER_ID&#x3D;&#96;docker ps| grep &quot;neil&#x2F;openjdk:v0.4&quot;|awk &#39;&#123;print $1&#125;&#39;&#96;\n# 向tomcat目录拷贝文件\ndocker cp  &#x2F;opt&#x2F;jeisp-admin.war $NEW_CONTAINER_ID:&#x2F;opt&#x2F;tomcat&#x2F;apache-tomcat-8.5.30&#x2F;webapps&#x2F;jeisp-admin.war\n# 启动tomcat\ndocker exec $NEW_CONTAINER_ID bash -c  &quot;&#x2F;opt&#x2F;tomcat&#x2F;apache-tomcat-8.5.30&#x2F;bin&#x2F;startup.sh&quot;\necho complete\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"Referenced\"><a href=\"#Referenced\" class=\"headerlink\" title=\"Referenced\"></a>Referenced</h2><ol>\n<li><a href=\"http://blog.51cto.com/faded/1761770\">使用Publish Over SSH插件实现远程自动部署</a></li>\n</ol>\n","more":"<h2 id=\"运行环境\"><a href=\"#运行环境\" class=\"headerlink\" title=\"运行环境\"></a>运行环境</h2><ol>\n<li>Jenkins</li>\n<li>源代码管理工具：gitblit</li>\n</ol>\n<h2 id=\"Jenkins的插件安装\"><a href=\"#Jenkins的插件安装\" class=\"headerlink\" title=\"Jenkins的插件安装\"></a>Jenkins的插件安装</h2><p>Jenkins需要安装的插件：</p>\n<ol>\n<li>Git plugin</li>\n<li>Maven Integration plugin</li>\n<li>Publish Over SSH</li>\n</ol>\n<h2 id=\"Publish-Over-SSH-插件配置\"><a href=\"#Publish-Over-SSH-插件配置\" class=\"headerlink\" title=\"Publish Over SSH 插件配置\"></a>Publish Over SSH 插件配置</h2><h3 id=\"在jenkins服务器上生成秘钥对-使用如下命令\"><a href=\"#在jenkins服务器上生成秘钥对-使用如下命令\" class=\"headerlink\" title=\"在jenkins服务器上生成秘钥对,使用如下命令\"></a>在jenkins服务器上生成秘钥对,使用如下命令</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">ssh-keygen -t rsa<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>生成完毕之后会在~&#x2F;.ssh目录下有私钥id_rsa和公钥id_rsa.pub两个文件<br><strong>注意：</strong>一定要写passphrase，否则会连不上的</p>\n<h3 id=\"复制公钥内容\"><a href=\"#复制公钥内容\" class=\"headerlink\" title=\"复制公钥内容\"></a>复制公钥内容</h3><p>将公钥id_rsa.pub文件中的内容copy到应用服务器中的~&#x2F;.ssh&#x2F;authorized_keys文件中，如果此文件中已经有内容，换行追加即可，没有的话自行创建</p>\n<h3 id=\"Jenkins配置\"><a href=\"#Jenkins配置\" class=\"headerlink\" title=\"Jenkins配置\"></a>Jenkins配置</h3><p>在系统管理-&gt;系统设置-&gt;Publish Over SSH中配置参数<br><img src=\"http://193.112.158.158:8081/post/20181208/2018-12-08_202735.jpg\"><br><strong>注意：</strong>其中Remote Directory是一个通过ssh工具传输文件时，应用服务器接收文件时的存储路径<br>配置完成之后点击下面的Test Configuration测试是否配置成功。</p>\n<h2 id=\"Jenkins编译SpringBoot类型的项目\"><a href=\"#Jenkins编译SpringBoot类型的项目\" class=\"headerlink\" title=\"Jenkins编译SpringBoot类型的项目\"></a>Jenkins编译SpringBoot类型的项目</h2><h3 id=\"基本配置\"><a href=\"#基本配置\" class=\"headerlink\" title=\"基本配置\"></a>基本配置</h3><p>在创建项目时选择<strong>构建一个maven项目</strong>，需要安装前面提到的Maven Integration plugin。<br>接着就可以配置项目了，重点配置Source Code Management及Build,Build的配置如下：<br><img src=\"http://193.112.158.158:8081/post/20181208/2018-12-08_203651.jpg\"></p>\n<h3 id=\"配置Post-Steps\"><a href=\"#配置Post-Steps\" class=\"headerlink\" title=\"配置Post Steps\"></a>配置Post Steps</h3><p>界面如图：<br><img src=\"http://193.112.158.158:8081/post/20181208/2018-12-08_203835.jpg\"><br><strong>相关参数说明：</strong></p>\n<ol>\n<li>Source files: 需要上传到应用服务器的文件，一般为jar、war等编译后的文件</li>\n<li>Remove prefix：First part of the file path that should not be created on the remote server.</li>\n<li>Remote directory</li>\n<li>Exec command：这个是文件传输完毕之后，在应用服务器中需要执行的命令，一般为脚本，后面提供一个将程序部署在docker的脚本可供参考</li>\n</ol>\n<h2 id=\"附-将本地的项目部署到docker中去的脚本\"><a href=\"#附-将本地的项目部署到docker中去的脚本\" class=\"headerlink\" title=\"[附:]将本地的项目部署到docker中去的脚本\"></a>[附:]将本地的项目部署到docker中去的脚本</h2><p>此脚本的主要执行过程：根据容器的镜像名称获取容器编号，然后停止并删除容器。接着根据镜像重启启动一个容器，并将应用的编译后的文件拷贝到容器的tomcat中，然后启动tomcat</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\"># !&#x2F;bin&#x2F;bash\nCONTAINER_ID&#x3D;&#96;docker ps| grep &quot;neil&#x2F;openjdk:v0.4&quot;|awk &#39;&#123;print $1&#125;&#39;&#96;\necho CONTAINER_ID\nif [ -n &quot;$CONTAINER_ID&quot; ]; then\n    docker stop $CONTAINER_ID\n    docker rm $CONTAINER_ID\nelse # 如果容器启动时失败了，就需要docker ps -a才能找到那个容器\n    CONTAINER_ID&#x3D;&#96;docker ps -a | grep &quot;neil&#x2F;openjdk:v0.4&quot; | awk &#39;&#123;print $1&#125;&#39;&#96;\n    if [ -n &quot;$CONTAINER_ID&quot; ]; then  # 如果是第一次在这台机器上拉取运行容器，那么docker ps -a也是找不到这个容器的\n        docker rm $CONTAINER_ID\n    fi\nfi\n# 重新启动一个容器\ndocker run -d -ti -p 9000:8080 neil&#x2F;openjdk:v0.4\nNEW_CONTAINER_ID&#x3D;&#96;docker ps| grep &quot;neil&#x2F;openjdk:v0.4&quot;|awk &#39;&#123;print $1&#125;&#39;&#96;\n# 向tomcat目录拷贝文件\ndocker cp  &#x2F;opt&#x2F;jeisp-admin.war $NEW_CONTAINER_ID:&#x2F;opt&#x2F;tomcat&#x2F;apache-tomcat-8.5.30&#x2F;webapps&#x2F;jeisp-admin.war\n# 启动tomcat\ndocker exec $NEW_CONTAINER_ID bash -c  &quot;&#x2F;opt&#x2F;tomcat&#x2F;apache-tomcat-8.5.30&#x2F;bin&#x2F;startup.sh&quot;\necho complete\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"Referenced\"><a href=\"#Referenced\" class=\"headerlink\" title=\"Referenced\"></a>Referenced</h2><ol>\n<li><a href=\"http://blog.51cto.com/faded/1761770\">使用Publish Over SSH插件实现远程自动部署</a></li>\n</ol>","categories":[],"tags":[{"name":"Jenkins","path":"api/tags/Jenkins.json"}]}