{"title":"Activiti工作流引擎","slug":"43","date":"2020-02-20T13:47:00.000Z","updated":"2020-02-20T13:48:36.000Z","comments":true,"path":"api/articles/43.json","realPath":null,"excerpt":"关于工作流引擎之前也陆陆续续看了点东西，但总感觉还差点东西，对于相关概念理解的不够透彻。这篇文章中就好好的Activiti中的相关概念、数据的传递方式等做个总结。","covers":null,"cover":null,"content":"<p>关于工作流引擎之前也陆陆续续看了点东西，但总感觉还差点东西，对于相关概念理解的不够透彻。这篇文章中就好好的Activiti中的相关概念、数据的传递方式等做个总结。</p>\n<span id=\"more\"></span>\n<h2 id=\"软件及开发环境\"><a href=\"#软件及开发环境\" class=\"headerlink\" title=\"软件及开发环境\"></a>软件及开发环境</h2><p>Activiti 6.x<br>Spring Boot 2.x  </p>\n<h2 id=\"工作流的应用范围\"><a href=\"#工作流的应用范围\" class=\"headerlink\" title=\"工作流的应用范围\"></a>工作流的应用范围</h2><p>简单来说，当涉及到表单的逐级流转，多个角色的审批的时候，就需要用到工作流了，最常见的也就是OA系统。</p>\n<h2 id=\"Activiti中的几个概念\"><a href=\"#Activiti中的几个概念\" class=\"headerlink\" title=\"Activiti中的几个概念\"></a>Activiti中的几个概念</h2><h3 id=\"互斥网关-ExclusiveGateWay\"><a href=\"#互斥网关-ExclusiveGateWay\" class=\"headerlink\" title=\"互斥网关(ExclusiveGateWay)\"></a>互斥网关(ExclusiveGateWay)</h3><p>也叫排他网关，由排他网关流出的连线(SequenceFlow),都有个conditionExpression元素，在内部维护返回boolean类型的决策结果；<br>conditionExpression的写法如下:</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">$&#123;hrVerify&#125;\n$&#123;!hrVerify&#125;\n$&#123;money&gt;&#x3D;500&#125;、\n$&#123;money&gt;&#x3D;500 &amp;&amp; money &lt;&#x3D;1000&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>当流程执行到排他网关时，流程引擎会自动检索网关出口，从上到下检索如果发现第一条决策结果为true或者没有设置条件的(默认为成立)，则流出；<br>对于互斥网关而言，其流出的SequenceFlow至少有两条；<br>如果没有任何一个出口符合条件，则抛出异常。</p>\n<h3 id=\"用户任务-userTask\"><a href=\"#用户任务-userTask\" class=\"headerlink\" title=\"用户任务(userTask)\"></a>用户任务(userTask)</h3><p>用户任务的处理人有三种：<br>1、某个人 ——&gt;设置Assiginee属性<br>2、某群人(多个具体的人) ——&gt;设置Candidate users属性<br>3、某类人(角色)——&gt;设置Candidate groups属性</p>\n<p>一般我们不直接指定具体的人，使用流程变量，即设置Assiginee的属性值为${applyUserId}，在代码中：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">Map&lt;String, Object&gt; variables &#x3D; new HashMap&lt;String, Object&gt;();\nvariables.put(&quot;applyUserId&quot;, &quot;张三&quot;);\nProcessInstance pi &#x3D; processEngine.getRuntimeService().startProcessInstanceByKey(&quot;taskProcess&quot;,variables);<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>即代表张三启动了一个流程实例。<br>另外也可以使用类来设置流程的发起人，如下：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">public class TaskListenerImpl implements TaskListener &#123;\n\n\t&#x2F;**指定个人任务和组任务的办理人*&#x2F;\n\t@Override\n\tpublic void notify(DelegateTask delegateTask) &#123;\n\t\tString userId1 &#x3D; &quot;孙悟空&quot;;\n\t\tString userId2 &#x3D; &quot;猪八戒&quot;;\n\t\t&#x2F;&#x2F;指定组任务\n\t\tdelegateTask.addCandidateUser(userId1);\n\t\tdelegateTask.addCandidateUser(userId2);\n\t&#125;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>此时需要为流程的启动节点添加一个taskListener,事件(event)类型为create即可。</p>\n<h3 id=\"Activiti中的用户和角色\"><a href=\"#Activiti中的用户和角色\" class=\"headerlink\" title=\"Activiti中的用户和角色\"></a>Activiti中的用户和角色</h3><p>activiti中的用户和角色信息保存在 act_id开头的几张表里面，可以通过IdentityService来对用户和角色信息进行增删，如下：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&#x2F;**在部署流程定义和启动流程实例的中间，设置组任务的办理人，向Activity表中存放组和用户的信息*&#x2F;\nIdentityService identityService &#x3D; processEngine.getIdentityService();&#x2F;&#x2F;认证：保存组和用户信息\nidentityService.saveGroup(new GroupEntity(&quot;部门经理&quot;));&#x2F;&#x2F;建立组\nidentityService.saveGroup(new GroupEntity(&quot;总经理&quot;));&#x2F;&#x2F;建立组\nidentityService.saveUser(new UserEntity(&quot;小张&quot;));\nidentityService.saveUser(new UserEntity(&quot;小李&quot;));\nidentityService.saveUser(new UserEntity(&quot;小王&quot;));\nidentityService.createMembership(&quot;小张&quot;, &quot;部门经理&quot;);&#x2F;&#x2F;建立组和用户关系\nidentityService.createMembership(&quot;小李&quot;, &quot;部门经理&quot;);&#x2F;&#x2F;建立组和用户关系\nidentityService.createMembership(&quot;小王&quot;, &quot;总经理&quot;);&#x2F;&#x2F;建立组和用户关系<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>用户任务处理人的变更：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">组任务分配给个人任务（认领任务）：\nprocessEngine.getTaskService().claim(taskId, userId);\n个人任务分配给组任务：\nprocessEngine.getTaskService(). setAssignee(taskId, null);\n向组任务添加人员：\nprocessEngine.getTaskService().addCandidateUser(taskId, userId);\n向组任务删除人员：\nprocessEngine.getTaskService().deleteCandidateUser(taskId, userId);<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"流程图的绘制\"><a href=\"#流程图的绘制\" class=\"headerlink\" title=\"流程图的绘制\"></a>流程图的绘制</h2><p>了解了上面的内容，其实我们就可以绘制一个基本的带有决策功能的流程图了，以下是绘制流程图的基本思路(以请假流程为例)</p>\n<ol>\n<li>考虑参与的用户是谁，有哪些？对应的角色有什么<br>员工、部门经理、人事</li>\n<li>流转的表单内容<br>请假开始时间、结束时间、事假还是病假、申请人</li>\n<li>绘制流程图<br>这里主要是考虑每个用户任务(userTask)的参与人，即设置Assigine属性或Candinate groups属性；<br>除了申请人填写的表单外，涉及到了决策(即审批)是不是也要添加当前任务的流程变量，是否提交到下一节点，还是回退；<br>如果有这样子的决策，那就需要用到互斥网关了，然后在互斥网关的流出的线上(SequenceFlow)添加ConditionExpression属性；<br>最后如果到End节点前面的一个userTask的时候，如果此userTask执行完毕之后，需要再额外更新我们自己的数据表，同样可以添加一个taskListener,event类型设置为complete即可．</li>\n</ol>\n<h2 id=\"Referenced\"><a href=\"#Referenced\" class=\"headerlink\" title=\"Referenced\"></a>Referenced</h2><p>[1、Activiti中的表达式](<a href=\"http://www.mossle.com/docs/activiti/index.html#\">http://www.mossle.com/docs/activiti/index.html#</a> apiExpressions)<br><a href=\"https://alisonmarket.lofter.com/post/2b1789_1c808c676\">2、封面图</a></p>\n","more":"<h2 id=\"软件及开发环境\"><a href=\"#软件及开发环境\" class=\"headerlink\" title=\"软件及开发环境\"></a>软件及开发环境</h2><p>Activiti 6.x<br>Spring Boot 2.x  </p>\n<h2 id=\"工作流的应用范围\"><a href=\"#工作流的应用范围\" class=\"headerlink\" title=\"工作流的应用范围\"></a>工作流的应用范围</h2><p>简单来说，当涉及到表单的逐级流转，多个角色的审批的时候，就需要用到工作流了，最常见的也就是OA系统。</p>\n<h2 id=\"Activiti中的几个概念\"><a href=\"#Activiti中的几个概念\" class=\"headerlink\" title=\"Activiti中的几个概念\"></a>Activiti中的几个概念</h2><h3 id=\"互斥网关-ExclusiveGateWay\"><a href=\"#互斥网关-ExclusiveGateWay\" class=\"headerlink\" title=\"互斥网关(ExclusiveGateWay)\"></a>互斥网关(ExclusiveGateWay)</h3><p>也叫排他网关，由排他网关流出的连线(SequenceFlow),都有个conditionExpression元素，在内部维护返回boolean类型的决策结果；<br>conditionExpression的写法如下:</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">$&#123;hrVerify&#125;\n$&#123;!hrVerify&#125;\n$&#123;money&gt;&#x3D;500&#125;、\n$&#123;money&gt;&#x3D;500 &amp;&amp; money &lt;&#x3D;1000&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>当流程执行到排他网关时，流程引擎会自动检索网关出口，从上到下检索如果发现第一条决策结果为true或者没有设置条件的(默认为成立)，则流出；<br>对于互斥网关而言，其流出的SequenceFlow至少有两条；<br>如果没有任何一个出口符合条件，则抛出异常。</p>\n<h3 id=\"用户任务-userTask\"><a href=\"#用户任务-userTask\" class=\"headerlink\" title=\"用户任务(userTask)\"></a>用户任务(userTask)</h3><p>用户任务的处理人有三种：<br>1、某个人 ——&gt;设置Assiginee属性<br>2、某群人(多个具体的人) ——&gt;设置Candidate users属性<br>3、某类人(角色)——&gt;设置Candidate groups属性</p>\n<p>一般我们不直接指定具体的人，使用流程变量，即设置Assiginee的属性值为${applyUserId}，在代码中：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">Map&lt;String, Object&gt; variables &#x3D; new HashMap&lt;String, Object&gt;();\nvariables.put(&quot;applyUserId&quot;, &quot;张三&quot;);\nProcessInstance pi &#x3D; processEngine.getRuntimeService().startProcessInstanceByKey(&quot;taskProcess&quot;,variables);<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>即代表张三启动了一个流程实例。<br>另外也可以使用类来设置流程的发起人，如下：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">public class TaskListenerImpl implements TaskListener &#123;\n\n\t&#x2F;**指定个人任务和组任务的办理人*&#x2F;\n\t@Override\n\tpublic void notify(DelegateTask delegateTask) &#123;\n\t\tString userId1 &#x3D; &quot;孙悟空&quot;;\n\t\tString userId2 &#x3D; &quot;猪八戒&quot;;\n\t\t&#x2F;&#x2F;指定组任务\n\t\tdelegateTask.addCandidateUser(userId1);\n\t\tdelegateTask.addCandidateUser(userId2);\n\t&#125;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>此时需要为流程的启动节点添加一个taskListener,事件(event)类型为create即可。</p>\n<h3 id=\"Activiti中的用户和角色\"><a href=\"#Activiti中的用户和角色\" class=\"headerlink\" title=\"Activiti中的用户和角色\"></a>Activiti中的用户和角色</h3><p>activiti中的用户和角色信息保存在 act_id开头的几张表里面，可以通过IdentityService来对用户和角色信息进行增删，如下：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&#x2F;**在部署流程定义和启动流程实例的中间，设置组任务的办理人，向Activity表中存放组和用户的信息*&#x2F;\nIdentityService identityService &#x3D; processEngine.getIdentityService();&#x2F;&#x2F;认证：保存组和用户信息\nidentityService.saveGroup(new GroupEntity(&quot;部门经理&quot;));&#x2F;&#x2F;建立组\nidentityService.saveGroup(new GroupEntity(&quot;总经理&quot;));&#x2F;&#x2F;建立组\nidentityService.saveUser(new UserEntity(&quot;小张&quot;));\nidentityService.saveUser(new UserEntity(&quot;小李&quot;));\nidentityService.saveUser(new UserEntity(&quot;小王&quot;));\nidentityService.createMembership(&quot;小张&quot;, &quot;部门经理&quot;);&#x2F;&#x2F;建立组和用户关系\nidentityService.createMembership(&quot;小李&quot;, &quot;部门经理&quot;);&#x2F;&#x2F;建立组和用户关系\nidentityService.createMembership(&quot;小王&quot;, &quot;总经理&quot;);&#x2F;&#x2F;建立组和用户关系<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>用户任务处理人的变更：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">组任务分配给个人任务（认领任务）：\nprocessEngine.getTaskService().claim(taskId, userId);\n个人任务分配给组任务：\nprocessEngine.getTaskService(). setAssignee(taskId, null);\n向组任务添加人员：\nprocessEngine.getTaskService().addCandidateUser(taskId, userId);\n向组任务删除人员：\nprocessEngine.getTaskService().deleteCandidateUser(taskId, userId);<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"流程图的绘制\"><a href=\"#流程图的绘制\" class=\"headerlink\" title=\"流程图的绘制\"></a>流程图的绘制</h2><p>了解了上面的内容，其实我们就可以绘制一个基本的带有决策功能的流程图了，以下是绘制流程图的基本思路(以请假流程为例)</p>\n<ol>\n<li>考虑参与的用户是谁，有哪些？对应的角色有什么<br>员工、部门经理、人事</li>\n<li>流转的表单内容<br>请假开始时间、结束时间、事假还是病假、申请人</li>\n<li>绘制流程图<br>这里主要是考虑每个用户任务(userTask)的参与人，即设置Assigine属性或Candinate groups属性；<br>除了申请人填写的表单外，涉及到了决策(即审批)是不是也要添加当前任务的流程变量，是否提交到下一节点，还是回退；<br>如果有这样子的决策，那就需要用到互斥网关了，然后在互斥网关的流出的线上(SequenceFlow)添加ConditionExpression属性；<br>最后如果到End节点前面的一个userTask的时候，如果此userTask执行完毕之后，需要再额外更新我们自己的数据表，同样可以添加一个taskListener,event类型设置为complete即可．</li>\n</ol>\n<h2 id=\"Referenced\"><a href=\"#Referenced\" class=\"headerlink\" title=\"Referenced\"></a>Referenced</h2><p>[1、Activiti中的表达式](<a href=\"http://www.mossle.com/docs/activiti/index.html#\">http://www.mossle.com/docs/activiti/index.html#</a> apiExpressions)<br><a href=\"https://alisonmarket.lofter.com/post/2b1789_1c808c676\">2、封面图</a></p>","categories":[{"name":"工作流引擎","path":"api/categories/工作流引擎.json"}],"tags":[{"name":"工作流","path":"api/tags/工作流.json"}]}