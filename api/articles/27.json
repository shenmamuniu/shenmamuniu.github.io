{"title":"Nginx在Windows和Ubuntu下的基本命令","slug":"27","date":"2019-12-05T11:11:00.000Z","updated":"2020-06-19T06:58:17.000Z","comments":true,"path":"api/articles/27.json","realPath":null,"excerpt":"本文主要记录Nginx在日常使用时用到的基本命令","covers":null,"cover":null,"content":"<p>本文主要记录Nginx在日常使用时用到的基本命令</p>\n<span id=\"more\"></span>\n<h2 id=\"Windows中运行Nginx\"><a href=\"#Windows中运行Nginx\" class=\"headerlink\" title=\"Windows中运行Nginx\"></a>Windows中运行Nginx</h2><ol>\n<li>启动<br>start nginx</li>\n<li>停止<br>nginx.exe -s stop<br>nginx.exe -s quit<br>注：stop是快速停止nginx，可能并不保存相关信息；quit是完整有序的停止nginx，并保存相关信息。</li>\n<li>重新载入<br>nginx.exe -s reload<br>当配置信息修改，需要重新载入这些配置时使用此命令。</li>\n</ol>\n<h2 id=\"Ubuntu-16-04中运行Nginx\"><a href=\"#Ubuntu-16-04中运行Nginx\" class=\"headerlink\" title=\"Ubuntu 16.04中运行Nginx\"></a>Ubuntu 16.04中运行Nginx</h2><h3 id=\"启动及退出\"><a href=\"#启动及退出\" class=\"headerlink\" title=\"启动及退出\"></a>启动及退出</h3><ol>\n<li>安装<br>sudo apt-get install nginx</li>\n<li>启动<br>nginx</li>\n<li>重新加载配置<br>nginx -s reload</li>\n<li>退出<br>nginx -s stop</li>\n<li>检查nginx配置文件<br>nginx -t</li>\n</ol>\n<h3 id=\"反向代理\"><a href=\"#反向代理\" class=\"headerlink\" title=\"反向代理\"></a>反向代理</h3><p>Ubuntu中nginx的配置文件在&#x2F;etc&#x2F;nginx目录下<br>通过nginx服务器中的80端口访问其他服务器中的非80端口的服务</p>\n<p>修改nginx配置文件：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">server\n&#123;\n    listen 80;\n    server_name *****;\n    location &#x2F; &#123;\n   \t\tproxy_redirect off;\n \t\tproxy_intercept_errors on;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header REMOTE-HOST $remote_addr;\n        proxy_set_header X-Forwarded-For &quot;$http_x_forwarded,$remote_addr&quot;;\n        proxy_pass http:&#x2F;&#x2F;ip:port; \n    &#125;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"启用gzip压缩\"><a href=\"#启用gzip压缩\" class=\"headerlink\" title=\"启用gzip压缩\"></a>启用gzip压缩</h3><p>修改配置文件http部分的gzip部分为以下：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">http&#123;\n\t...\n    gzip on;\n    gzip_types text&#x2F;plain text&#x2F;css text&#x2F;javascript application&#x2F;javascript\n    ...\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>其他配置：</p>\n<ol>\n<li>gzip_com_level 4；# 默认1，可取[1~9],值越大，压缩率越大，对服务器cpu的消耗就越高</li>\n<li>gzip_min_length 2k; # 默认值: 0 ，不管页面多大都压缩,建议设置成大于1k的字节数，小于1k可能会越压越大。 </li>\n<li>gzip_buffers 4 16k;</li>\n<li>gzip_vary on # 加个vary头，给代理服务器用的，有的浏览器支持压缩，有的不支持，所以避免浪费不支持的也压缩，所以根据客户端的HTTP头来判断，是否需要压缩</li>\n</ol>\n<h3 id=\"Nginx负载均衡\"><a href=\"#Nginx负载均衡\" class=\"headerlink\" title=\"Nginx负载均衡\"></a>Nginx负载均衡</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">http&#123;\n    ...\n    \tupstream localhost&#123;\n            server localhost:8088 weight&#x3D;1;\n\t\t\tserver localhost:8089 weight&#x3D;1;\n    \t&#125;\n    ...\n    server&#123;\n        listen 80;\n        location &#x2F;&#123;\n             proxy_pass   http:&#x2F;&#x2F;localhost&#x2F;;\t\n             # 其他参数\n\t\t\t# proxy_redirect default;\t\t\t \n            # proxy_set_header Host $host;\n            # proxy_set_header X-Forwarded-For $remote_addr;\n            # proxy_redirect default;\n            # proxy_buffer_size 512k;\n            # proxy_buffers 6 512k;\n            # proxy_busy_buffers_size 512k;\n            # proxy_temp_file_write_size 512k;\n            # client_max_body_size 100m;\n        &#125;\n    &#125;\n    \n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"Nginx动静分离\"><a href=\"#Nginx动静分离\" class=\"headerlink\" title=\"Nginx动静分离\"></a>Nginx动静分离</h3><p>把静态资源如js、css、png等交由Nginx处理，不再向tomcat发送请求,Location可根据需要进行配置：</p>\n<ol>\n<li>所有提交给Nginx的请求的静态文件均由Nginx自身处理</li>\n<li>只有匹配到固定路径的请求，Nginx才会自行处理</li>\n</ol>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\"># 默认当前server下的所有对js、css文件的请求都会匹配到\nlocation ~ .*\\.(js|css)?$\n&#123;\n    root &#x2F;usr&#x2F;local&#x2F;webapps;\n    expires 1h;\n&#125;\n# 匹配static下的credit和images下的js及css文件\nlocation ~* \\&#x2F;static\\&#x2F;(credit|images).*\\.(js|css|ttf|woff|woff2)?$ &#123;\nroot   D:&#x2F;nginx&#x2F;reg&#x2F;;\nindex  test.png;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"Nginx-配置404或500页面\"><a href=\"#Nginx-配置404或500页面\" class=\"headerlink\" title=\"Nginx 配置404或500页面\"></a>Nginx 配置404或500页面</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">server&#123;\n    ...\n    error_page  404 403 500 502 503 504  &#x2F;404.html;\n    location &#x3D; &#x2F;404.html &#123;\n        root   &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html; # 错误页面的存放路径\n    &#125;\n    ...\n    \n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>注意，此时只有Nginx抛出的404才能显示这个页面，其反向代理的错误页面则不会显示这个，如果想要其反向代理的页面抛出404，还需要添加：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">location &#x2F; CMS&#123;\n           proxy_intercept_errors on;\n\n           proxy_pass      http:&#x2F;&#x2F;www;\n\n           proxy_set_header HOST   $host;\n\n           proxy_set_header X-Real-IP      $remote_addr;\n\n           proxy_set_header X-Forwarded-FOR $proxy_add_x_forwarded_for;\n       &#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"Nginx配置别名-超好用的咧\"><a href=\"#Nginx配置别名-超好用的咧\" class=\"headerlink\" title=\"Nginx配置别名(超好用的咧)\"></a>Nginx配置别名(超好用的咧)</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">location ~^&#x2F;nginx &#123;\nalias E:&#x2F;DApps&#x2F;;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>alias指定的目录是准确的，即location匹配访问的path目录下的文件直接是在alias目录下查找的；<br>即：<a href=\"http://xxx/nginx/a.html\">http://xxx/nginx/a.html</a> ：访问的就是E:&#x2F;DApps&#x2F;a.html,至于location这里的结尾要不要加&#x2F;,应该是没区别的，但alias结尾是一定要加的。</p>\n<h2 id=\"Nginx-Tomcat配置https\"><a href=\"#Nginx-Tomcat配置https\" class=\"headerlink\" title=\"Nginx+Tomcat配置https\"></a>Nginx+Tomcat配置https</h2><p>有两种方式：1.同时配置https,2.Nginx配https,Tomcat不配</p>\n<h3 id=\"Tomcat和Nginx同时配置https\"><a href=\"#Tomcat和Nginx同时配置https\" class=\"headerlink\" title=\"Tomcat和Nginx同时配置https\"></a>Tomcat和Nginx同时配置https</h3><p>修改nginx.conf文件</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">server &#123;\n    listen 443;\n    server_name localhost;\n    ssl on;\n    root html;\n    index index.html index.htm;\n    ssl_certificate   cert&#x2F;214293719880562.pem;\n    ssl_certificate_key  cert&#x2F;214293719880562.key;\n    ssl_session_timeout 5m;\n    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;\n    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;\n    ssl_prefer_server_ciphers on;\n    location &#x2F; &#123;\n        root html;\n        index index.html index.htm;\n    &#125;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"Nginx跨域配置\"><a href=\"#Nginx跨域配置\" class=\"headerlink\" title=\"Nginx跨域配置\"></a>Nginx跨域配置</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">add_header Access-Control-Allow-Origin *;\nadd_header Access-Control-Allow-Headers X-Requested-With;\nadd_header Access-Control-Allow-Methods GET,POST,OPTIONS;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>放在server-》location里面即可，此时只作用于当前location，当然放在http里面也是可以的。</p>\n<h3 id=\"Nginx使用Https-Nginx和Tomcat之间使用Http\"><a href=\"#Nginx使用Https-Nginx和Tomcat之间使用Http\" class=\"headerlink\" title=\"Nginx使用Https,Nginx和Tomcat之间使用Http\"></a>Nginx使用Https,Nginx和Tomcat之间使用Http</h3><p>可参考：<br><a href=\"https://www.cnblogs.com/swbzmx/p/8845810.html\">https://www.cnblogs.com/swbzmx/p/8845810.html</a></p>\n<h2 id=\"Nginx性能监控\"><a href=\"#Nginx性能监控\" class=\"headerlink\" title=\"Nginx性能监控\"></a>Nginx性能监控</h2><p><a href=\"http://www.ttlsa.com/nginx/nginx-status-detail/\">http://www.ttlsa.com/nginx/nginx-status-detail/</a><br>Nginx安装目录：&#x2F;etc&#x2F;nginx<br>日志：&#x2F;var&#x2F;logs&#x2F;nginx</p>\n<h2 id=\"Referenced\"><a href=\"#Referenced\" class=\"headerlink\" title=\"Referenced\"></a>Referenced</h2><p><a href=\"http://blog.51cto.com/13178102/2063271\">1、Nginx负载均衡简单配置</a><br><a href=\"https://segmentfault.com/a/1190000009237425\">2、Location匹配</a><br><a href=\"https://www.cnblogs.com/yc-755909659/p/5928243.html\">3、Fontawosome字体匹配</a><br><a href=\"https://huadou145.lofter.com/post/205d4db3_1c7247e32\">4、封面来源</a></p>\n","more":"<h2 id=\"Windows中运行Nginx\"><a href=\"#Windows中运行Nginx\" class=\"headerlink\" title=\"Windows中运行Nginx\"></a>Windows中运行Nginx</h2><ol>\n<li>启动<br>start nginx</li>\n<li>停止<br>nginx.exe -s stop<br>nginx.exe -s quit<br>注：stop是快速停止nginx，可能并不保存相关信息；quit是完整有序的停止nginx，并保存相关信息。</li>\n<li>重新载入<br>nginx.exe -s reload<br>当配置信息修改，需要重新载入这些配置时使用此命令。</li>\n</ol>\n<h2 id=\"Ubuntu-16-04中运行Nginx\"><a href=\"#Ubuntu-16-04中运行Nginx\" class=\"headerlink\" title=\"Ubuntu 16.04中运行Nginx\"></a>Ubuntu 16.04中运行Nginx</h2><h3 id=\"启动及退出\"><a href=\"#启动及退出\" class=\"headerlink\" title=\"启动及退出\"></a>启动及退出</h3><ol>\n<li>安装<br>sudo apt-get install nginx</li>\n<li>启动<br>nginx</li>\n<li>重新加载配置<br>nginx -s reload</li>\n<li>退出<br>nginx -s stop</li>\n<li>检查nginx配置文件<br>nginx -t</li>\n</ol>\n<h3 id=\"反向代理\"><a href=\"#反向代理\" class=\"headerlink\" title=\"反向代理\"></a>反向代理</h3><p>Ubuntu中nginx的配置文件在&#x2F;etc&#x2F;nginx目录下<br>通过nginx服务器中的80端口访问其他服务器中的非80端口的服务</p>\n<p>修改nginx配置文件：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">server\n&#123;\n    listen 80;\n    server_name *****;\n    location &#x2F; &#123;\n   \t\tproxy_redirect off;\n \t\tproxy_intercept_errors on;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header REMOTE-HOST $remote_addr;\n        proxy_set_header X-Forwarded-For &quot;$http_x_forwarded,$remote_addr&quot;;\n        proxy_pass http:&#x2F;&#x2F;ip:port; \n    &#125;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"启用gzip压缩\"><a href=\"#启用gzip压缩\" class=\"headerlink\" title=\"启用gzip压缩\"></a>启用gzip压缩</h3><p>修改配置文件http部分的gzip部分为以下：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">http&#123;\n\t...\n    gzip on;\n    gzip_types text&#x2F;plain text&#x2F;css text&#x2F;javascript application&#x2F;javascript\n    ...\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>其他配置：</p>\n<ol>\n<li>gzip_com_level 4；# 默认1，可取[1~9],值越大，压缩率越大，对服务器cpu的消耗就越高</li>\n<li>gzip_min_length 2k; # 默认值: 0 ，不管页面多大都压缩,建议设置成大于1k的字节数，小于1k可能会越压越大。 </li>\n<li>gzip_buffers 4 16k;</li>\n<li>gzip_vary on # 加个vary头，给代理服务器用的，有的浏览器支持压缩，有的不支持，所以避免浪费不支持的也压缩，所以根据客户端的HTTP头来判断，是否需要压缩</li>\n</ol>\n<h3 id=\"Nginx负载均衡\"><a href=\"#Nginx负载均衡\" class=\"headerlink\" title=\"Nginx负载均衡\"></a>Nginx负载均衡</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">http&#123;\n    ...\n    \tupstream localhost&#123;\n            server localhost:8088 weight&#x3D;1;\n\t\t\tserver localhost:8089 weight&#x3D;1;\n    \t&#125;\n    ...\n    server&#123;\n        listen 80;\n        location &#x2F;&#123;\n             proxy_pass   http:&#x2F;&#x2F;localhost&#x2F;;\t\n             # 其他参数\n\t\t\t# proxy_redirect default;\t\t\t \n            # proxy_set_header Host $host;\n            # proxy_set_header X-Forwarded-For $remote_addr;\n            # proxy_redirect default;\n            # proxy_buffer_size 512k;\n            # proxy_buffers 6 512k;\n            # proxy_busy_buffers_size 512k;\n            # proxy_temp_file_write_size 512k;\n            # client_max_body_size 100m;\n        &#125;\n    &#125;\n    \n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"Nginx动静分离\"><a href=\"#Nginx动静分离\" class=\"headerlink\" title=\"Nginx动静分离\"></a>Nginx动静分离</h3><p>把静态资源如js、css、png等交由Nginx处理，不再向tomcat发送请求,Location可根据需要进行配置：</p>\n<ol>\n<li>所有提交给Nginx的请求的静态文件均由Nginx自身处理</li>\n<li>只有匹配到固定路径的请求，Nginx才会自行处理</li>\n</ol>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\"># 默认当前server下的所有对js、css文件的请求都会匹配到\nlocation ~ .*\\.(js|css)?$\n&#123;\n    root &#x2F;usr&#x2F;local&#x2F;webapps;\n    expires 1h;\n&#125;\n# 匹配static下的credit和images下的js及css文件\nlocation ~* \\&#x2F;static\\&#x2F;(credit|images).*\\.(js|css|ttf|woff|woff2)?$ &#123;\nroot   D:&#x2F;nginx&#x2F;reg&#x2F;;\nindex  test.png;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"Nginx-配置404或500页面\"><a href=\"#Nginx-配置404或500页面\" class=\"headerlink\" title=\"Nginx 配置404或500页面\"></a>Nginx 配置404或500页面</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">server&#123;\n    ...\n    error_page  404 403 500 502 503 504  &#x2F;404.html;\n    location &#x3D; &#x2F;404.html &#123;\n        root   &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html; # 错误页面的存放路径\n    &#125;\n    ...\n    \n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>注意，此时只有Nginx抛出的404才能显示这个页面，其反向代理的错误页面则不会显示这个，如果想要其反向代理的页面抛出404，还需要添加：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">location &#x2F; CMS&#123;\n           proxy_intercept_errors on;\n\n           proxy_pass      http:&#x2F;&#x2F;www;\n\n           proxy_set_header HOST   $host;\n\n           proxy_set_header X-Real-IP      $remote_addr;\n\n           proxy_set_header X-Forwarded-FOR $proxy_add_x_forwarded_for;\n       &#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"Nginx配置别名-超好用的咧\"><a href=\"#Nginx配置别名-超好用的咧\" class=\"headerlink\" title=\"Nginx配置别名(超好用的咧)\"></a>Nginx配置别名(超好用的咧)</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">location ~^&#x2F;nginx &#123;\nalias E:&#x2F;DApps&#x2F;;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>alias指定的目录是准确的，即location匹配访问的path目录下的文件直接是在alias目录下查找的；<br>即：<a href=\"http://xxx/nginx/a.html\">http://xxx/nginx/a.html</a> ：访问的就是E:&#x2F;DApps&#x2F;a.html,至于location这里的结尾要不要加&#x2F;,应该是没区别的，但alias结尾是一定要加的。</p>\n<h2 id=\"Nginx-Tomcat配置https\"><a href=\"#Nginx-Tomcat配置https\" class=\"headerlink\" title=\"Nginx+Tomcat配置https\"></a>Nginx+Tomcat配置https</h2><p>有两种方式：1.同时配置https,2.Nginx配https,Tomcat不配</p>\n<h3 id=\"Tomcat和Nginx同时配置https\"><a href=\"#Tomcat和Nginx同时配置https\" class=\"headerlink\" title=\"Tomcat和Nginx同时配置https\"></a>Tomcat和Nginx同时配置https</h3><p>修改nginx.conf文件</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">server &#123;\n    listen 443;\n    server_name localhost;\n    ssl on;\n    root html;\n    index index.html index.htm;\n    ssl_certificate   cert&#x2F;214293719880562.pem;\n    ssl_certificate_key  cert&#x2F;214293719880562.key;\n    ssl_session_timeout 5m;\n    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;\n    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;\n    ssl_prefer_server_ciphers on;\n    location &#x2F; &#123;\n        root html;\n        index index.html index.htm;\n    &#125;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"Nginx跨域配置\"><a href=\"#Nginx跨域配置\" class=\"headerlink\" title=\"Nginx跨域配置\"></a>Nginx跨域配置</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">add_header Access-Control-Allow-Origin *;\nadd_header Access-Control-Allow-Headers X-Requested-With;\nadd_header Access-Control-Allow-Methods GET,POST,OPTIONS;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>放在server-》location里面即可，此时只作用于当前location，当然放在http里面也是可以的。</p>\n<h3 id=\"Nginx使用Https-Nginx和Tomcat之间使用Http\"><a href=\"#Nginx使用Https-Nginx和Tomcat之间使用Http\" class=\"headerlink\" title=\"Nginx使用Https,Nginx和Tomcat之间使用Http\"></a>Nginx使用Https,Nginx和Tomcat之间使用Http</h3><p>可参考：<br><a href=\"https://www.cnblogs.com/swbzmx/p/8845810.html\">https://www.cnblogs.com/swbzmx/p/8845810.html</a></p>\n<h2 id=\"Nginx性能监控\"><a href=\"#Nginx性能监控\" class=\"headerlink\" title=\"Nginx性能监控\"></a>Nginx性能监控</h2><p><a href=\"http://www.ttlsa.com/nginx/nginx-status-detail/\">http://www.ttlsa.com/nginx/nginx-status-detail/</a><br>Nginx安装目录：&#x2F;etc&#x2F;nginx<br>日志：&#x2F;var&#x2F;logs&#x2F;nginx</p>\n<h2 id=\"Referenced\"><a href=\"#Referenced\" class=\"headerlink\" title=\"Referenced\"></a>Referenced</h2><p><a href=\"http://blog.51cto.com/13178102/2063271\">1、Nginx负载均衡简单配置</a><br><a href=\"https://segmentfault.com/a/1190000009237425\">2、Location匹配</a><br><a href=\"https://www.cnblogs.com/yc-755909659/p/5928243.html\">3、Fontawosome字体匹配</a><br><a href=\"https://huadou145.lofter.com/post/205d4db3_1c7247e32\">4、封面来源</a></p>","categories":[{"name":"Linux","path":"api/categories/Linux.json"}],"tags":[{"name":"Nginx","path":"api/tags/Nginx.json"}]}