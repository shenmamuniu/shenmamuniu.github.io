{"title":"消息队列之RabbitMQ的基本使用-基于Python","slug":"97","date":"2021-04-30T02:10:00.000Z","updated":"2021-04-30T02:11:43.000Z","comments":true,"path":"api/articles/97.json","excerpt":"本文主要对RabbitMQ的几个概念以及基本使用作小结。","covers":null,"content":"<p>本文主要对RabbitMQ的几个概念以及基本使用作小结。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"应用环境\"><a href=\"#应用环境\" class=\"headerlink\" title=\"应用环境\"></a>应用环境</h2><p>OS:ubuntu+centos<br>Pika:1.2.0<br>python:3.7</p>\n<h2 id=\"RabbitMQ的安装及配置\"><a href=\"#RabbitMQ的安装及配置\" class=\"headerlink\" title=\"RabbitMQ的安装及配置\"></a>RabbitMQ的安装及配置</h2><h3 id=\"centos8安装rabbitmq\"><a href=\"#centos8安装rabbitmq\" class=\"headerlink\" title=\"centos8安装rabbitmq\"></a>centos8安装rabbitmq</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">rpm -ivh erlang-23.1.4-1.el8.x86_64.rpm\nrpm -ivh socat-1.7.3.3-2.el8.x86_64.rpm\nrpm -ivh rabbitmq-server-3.8.9-1.el8.noarch.rpm<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"rabbitmq的启动\"><a href=\"#rabbitmq的启动\" class=\"headerlink\" title=\"rabbitmq的启动\"></a>rabbitmq的启动</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\"># 开机启动\nchkconfig rabbitmq-server on\n&#x2F;sbin&#x2F;service rabbitmq-server start\n&#x2F;sbin&#x2F;service rabbitmq-server stop\nrabbitmq-plugins enable rabbitmq_management<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>放开15672端口：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">firewall-cmd --zone&#x3D;public --add-port&#x3D;15672&#x2F;tcp --permanent\nfirewall-cmd --reload<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>这样就可以通过<a href=\"http://xx:15672来访问rabbitmq的管理界面了，默认用户名和密码：guest/guest，默认只能本地登录。\">http://xx:15672来访问rabbitmq的管理界面了，默认用户名和密码：guest/guest，默认只能本地登录。</a></p>\n<h3 id=\"添加用户并设置远程登录\"><a href=\"#添加用户并设置远程登录\" class=\"headerlink\" title=\"添加用户并设置远程登录\"></a>添加用户并设置远程登录</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">rabbitmqctl add_user test test123\nrabbitmqctl set_user_tags test administrator<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h2 id=\"RabbitMQ的几个基本概念\"><a href=\"#RabbitMQ的几个基本概念\" class=\"headerlink\" title=\"RabbitMQ的几个基本概念\"></a>RabbitMQ的几个基本概念</h2><p>生产者：发送消息<br>消费者：接收消息<br>队列：类似一个临时存储空间，存储消息的<br>Exchange:类似快递员，生产者都会把消息发送它，再由它发送到某个队列</p>\n<h2 id=\"RabbitMQ的几种消息模型\"><a href=\"#RabbitMQ的几种消息模型\" class=\"headerlink\" title=\"RabbitMQ的几种消息模型\"></a>RabbitMQ的几种消息模型</h2><p>简单来说，就2类，一类是1条消息只能发送给1个人的，另一类是同一条消息会发送给多个人的订阅模型。<br><strong>one-to-one:</strong></p>\n<blockquote>\n<p>通常情况下，为了加快业务的处理速度，我们会用多个消费者来处理队列中的消息,这种就可以完全避免信息的重复处理</p>\n</blockquote>\n<p><strong>one-to-many:</strong></p>\n<blockquote>\n<p>这种我们称之为订阅模型，又包含多种类型，我们根据exchange_type进行区分<br>其对应的exchange_type有：fanout、direct、topic，这几个类型的区别在于消息过滤的灵活性。<br>其中：<br>fanout无法过滤消息，消费者只能拿到绑定的exchange的全部消息；<br>direct：可以根据关键字过滤，如日志的响应级别info、warn、error,只能拿其中一类或几类<br>topic:最为灵活，有*和# 两个特殊字符，前者匹配一个单词，后者匹配所有，即只要符合这个规则的消息都可以拿来。</p>\n</blockquote>\n<p>另外需要注意的是订阅模型中，拿不到历史消息，只能拿到实时消息。</p>\n<h2 id=\"RabbitMQ的使用\"><a href=\"#RabbitMQ的使用\" class=\"headerlink\" title=\"RabbitMQ的使用\"></a>RabbitMQ的使用</h2><h3 id=\"临时队列\"><a href=\"#临时队列\" class=\"headerlink\" title=\"临时队列\"></a>临时队列</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">result &#x3D; channel.queue_declare(queue&#x3D;&#39;&#39;, exclusive&#x3D;True)\nqueue_name &#x3D; result.method.queue<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>这里，exclusive为关闭连接之后就删除此队列</p>\n<h3 id=\"消息持久化\"><a href=\"#消息持久化\" class=\"headerlink\" title=\"消息持久化\"></a>消息持久化</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">channel.queue_declare(queue&#x3D;&#39;hello&#39;, durable&#x3D;True)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>除此之外，在发布消息的时候，还需设置delivery_mode&#x3D;2</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">channel.basic_publish(exchange&#x3D;&#39;&#39;,\n                      routing_key&#x3D;self.queue,\n                      body&#x3D;msg,\n                      properties&#x3D;pika.BasicProperties(\n                         delivery_mode &#x3D; 2, # make message persistent\n                      ))\n&#96;&#96;&#96;                     \n这样如果rabbitmq服务出现问题，重启后消息还会恢复,此种模式不适用于订阅模式。\n\n###  basic_qos\n通过设置prefech_count属性可以设置一次性从队列中拿到的消息个数。\nThe client can request that messages be sent in advance so that when the client finishes processing a message, the following message is already held locally, rather than needing to be sent down the channel. Prefetching gives a performance improvement.\n\n###  应答确认机制\n默认情况下，auto\\_ack属性为true，即自动回复确认消息，如果需要自定义回复时机，需要将auto\\_ack的属性为false,然后在on\\_message_callback中添加如下内容以回复确认：<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>ch.basic_ack(delivery_tag &#x3D; method.delivery_tag)</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">\n###  路由模式(routing)之绑定多个类型的消息\n\n一个队列可以同时绑定多个类别的消息<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>channel.queue_bind(exchange&#x3D;self.exchange_name, queue&#x3D;queue_name,routing_key&#x3D;’info’)</p>\n<p>channel.queue_bind(exchange&#x3D;self.exchange_name, queue&#x3D;queue_name,routing_key&#x3D;’error’)</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">\n###  路由模式之Topic模式\n\n为了解决路由模式不够灵活的问题，提出了Topic模式,类似于标签，用句号隔开，如：baidu.com,google.com等\n这里有２个特殊的字符：\n\n&gt; * (star) can substitute for exactly one word.\n&gt; \\# (hash) can substitute for zero or more words.\n\n其中\\# 匹配所有，*代表一个单词\n\n##  python中使用rabbitmq\n\n###   pip安装pika\n\n下载pika包离线安装<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>pip3 install pika-1.1.0&#x2F;</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">或在线安装：<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>pip install pika&#x3D;&#x3D;1.2.0</p>\n<p>&#96;&#96;&#96;</p>\n<blockquote>\n<p>pip安裝指定版本的包<br>&#x3D;&#x3D;,&gt;&#x3D;,&lt;&#x3D;,&gt;,&lt;</p>\n</blockquote>\n<h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h2><p><a href=\"https://www.cnblogs.com/baiyifengyun/p/12446494.html\">1、centos8安装RabbitMQ</a><br><a href=\"https://www.cnblogs.com/gongshun/p/10694659.html\">2、RabbitMQ添加新用户并支持远程访问</a><br><a href=\"https://www.cnblogs.com/ithushuai/p/12443460.html\">3、RabbitMQ使用详解</a><br><a href=\"https://lyla7784.lofter.com/post/30a15a3d_1c8923399\">4、封面图源</a></p>\n","more":"<h2 id=\"应用环境\"><a href=\"#应用环境\" class=\"headerlink\" title=\"应用环境\"></a>应用环境</h2><p>OS:ubuntu+centos<br>Pika:1.2.0<br>python:3.7</p>\n<h2 id=\"RabbitMQ的安装及配置\"><a href=\"#RabbitMQ的安装及配置\" class=\"headerlink\" title=\"RabbitMQ的安装及配置\"></a>RabbitMQ的安装及配置</h2><h3 id=\"centos8安装rabbitmq\"><a href=\"#centos8安装rabbitmq\" class=\"headerlink\" title=\"centos8安装rabbitmq\"></a>centos8安装rabbitmq</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">rpm -ivh erlang-23.1.4-1.el8.x86_64.rpm\nrpm -ivh socat-1.7.3.3-2.el8.x86_64.rpm\nrpm -ivh rabbitmq-server-3.8.9-1.el8.noarch.rpm<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"rabbitmq的启动\"><a href=\"#rabbitmq的启动\" class=\"headerlink\" title=\"rabbitmq的启动\"></a>rabbitmq的启动</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\"># 开机启动\nchkconfig rabbitmq-server on\n&#x2F;sbin&#x2F;service rabbitmq-server start\n&#x2F;sbin&#x2F;service rabbitmq-server stop\nrabbitmq-plugins enable rabbitmq_management<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>放开15672端口：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">firewall-cmd --zone&#x3D;public --add-port&#x3D;15672&#x2F;tcp --permanent\nfirewall-cmd --reload<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>这样就可以通过<a href=\"http://xx:15672来访问rabbitmq的管理界面了，默认用户名和密码：guest/guest，默认只能本地登录。\">http://xx:15672来访问rabbitmq的管理界面了，默认用户名和密码：guest/guest，默认只能本地登录。</a></p>\n<h3 id=\"添加用户并设置远程登录\"><a href=\"#添加用户并设置远程登录\" class=\"headerlink\" title=\"添加用户并设置远程登录\"></a>添加用户并设置远程登录</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">rabbitmqctl add_user test test123\nrabbitmqctl set_user_tags test administrator<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h2 id=\"RabbitMQ的几个基本概念\"><a href=\"#RabbitMQ的几个基本概念\" class=\"headerlink\" title=\"RabbitMQ的几个基本概念\"></a>RabbitMQ的几个基本概念</h2><p>生产者：发送消息<br>消费者：接收消息<br>队列：类似一个临时存储空间，存储消息的<br>Exchange:类似快递员，生产者都会把消息发送它，再由它发送到某个队列</p>\n<h2 id=\"RabbitMQ的几种消息模型\"><a href=\"#RabbitMQ的几种消息模型\" class=\"headerlink\" title=\"RabbitMQ的几种消息模型\"></a>RabbitMQ的几种消息模型</h2><p>简单来说，就2类，一类是1条消息只能发送给1个人的，另一类是同一条消息会发送给多个人的订阅模型。<br><strong>one-to-one:</strong></p>\n<blockquote>\n<p>通常情况下，为了加快业务的处理速度，我们会用多个消费者来处理队列中的消息,这种就可以完全避免信息的重复处理</p>\n</blockquote>\n<p><strong>one-to-many:</strong></p>\n<blockquote>\n<p>这种我们称之为订阅模型，又包含多种类型，我们根据exchange_type进行区分<br>其对应的exchange_type有：fanout、direct、topic，这几个类型的区别在于消息过滤的灵活性。<br>其中：<br>fanout无法过滤消息，消费者只能拿到绑定的exchange的全部消息；<br>direct：可以根据关键字过滤，如日志的响应级别info、warn、error,只能拿其中一类或几类<br>topic:最为灵活，有*和# 两个特殊字符，前者匹配一个单词，后者匹配所有，即只要符合这个规则的消息都可以拿来。</p>\n</blockquote>\n<p>另外需要注意的是订阅模型中，拿不到历史消息，只能拿到实时消息。</p>\n<h2 id=\"RabbitMQ的使用\"><a href=\"#RabbitMQ的使用\" class=\"headerlink\" title=\"RabbitMQ的使用\"></a>RabbitMQ的使用</h2><h3 id=\"临时队列\"><a href=\"#临时队列\" class=\"headerlink\" title=\"临时队列\"></a>临时队列</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">result &#x3D; channel.queue_declare(queue&#x3D;&#39;&#39;, exclusive&#x3D;True)\nqueue_name &#x3D; result.method.queue<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>这里，exclusive为关闭连接之后就删除此队列</p>\n<h3 id=\"消息持久化\"><a href=\"#消息持久化\" class=\"headerlink\" title=\"消息持久化\"></a>消息持久化</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">channel.queue_declare(queue&#x3D;&#39;hello&#39;, durable&#x3D;True)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>除此之外，在发布消息的时候，还需设置delivery_mode&#x3D;2</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">channel.basic_publish(exchange&#x3D;&#39;&#39;,\n                      routing_key&#x3D;self.queue,\n                      body&#x3D;msg,\n                      properties&#x3D;pika.BasicProperties(\n                         delivery_mode &#x3D; 2, # make message persistent\n                      ))\n&#96;&#96;&#96;                     \n这样如果rabbitmq服务出现问题，重启后消息还会恢复,此种模式不适用于订阅模式。\n\n###  basic_qos\n通过设置prefech_count属性可以设置一次性从队列中拿到的消息个数。\nThe client can request that messages be sent in advance so that when the client finishes processing a message, the following message is already held locally, rather than needing to be sent down the channel. Prefetching gives a performance improvement.\n\n###  应答确认机制\n默认情况下，auto\\_ack属性为true，即自动回复确认消息，如果需要自定义回复时机，需要将auto\\_ack的属性为false,然后在on\\_message_callback中添加如下内容以回复确认：<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>ch.basic_ack(delivery_tag &#x3D; method.delivery_tag)</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">\n###  路由模式(routing)之绑定多个类型的消息\n\n一个队列可以同时绑定多个类别的消息<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>channel.queue_bind(exchange&#x3D;self.exchange_name, queue&#x3D;queue_name,routing_key&#x3D;’info’)</p>\n<p>channel.queue_bind(exchange&#x3D;self.exchange_name, queue&#x3D;queue_name,routing_key&#x3D;’error’)</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">\n###  路由模式之Topic模式\n\n为了解决路由模式不够灵活的问题，提出了Topic模式,类似于标签，用句号隔开，如：baidu.com,google.com等\n这里有２个特殊的字符：\n\n&gt; * (star) can substitute for exactly one word.\n&gt; \\# (hash) can substitute for zero or more words.\n\n其中\\# 匹配所有，*代表一个单词\n\n##  python中使用rabbitmq\n\n###   pip安装pika\n\n下载pika包离线安装<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>pip3 install pika-1.1.0&#x2F;</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">或在线安装：<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>pip install pika&#x3D;&#x3D;1.2.0</p>\n<p>&#96;&#96;&#96;</p>\n<blockquote>\n<p>pip安裝指定版本的包<br>&#x3D;&#x3D;,&gt;&#x3D;,&lt;&#x3D;,&gt;,&lt;</p>\n</blockquote>\n<h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h2><p><a href=\"https://www.cnblogs.com/baiyifengyun/p/12446494.html\">1、centos8安装RabbitMQ</a><br><a href=\"https://www.cnblogs.com/gongshun/p/10694659.html\">2、RabbitMQ添加新用户并支持远程访问</a><br><a href=\"https://www.cnblogs.com/ithushuai/p/12443460.html\">3、RabbitMQ使用详解</a><br><a href=\"https://lyla7784.lofter.com/post/30a15a3d_1c8923399\">4、封面图源</a></p>","categories":[{"name":"Python","path":"api/categories/Python.json"}],"tags":[{"name":"消息队列","path":"api/tags/消息队列.json"},{"name":"RabbitMQ","path":"api/tags/RabbitMQ.json"}]}