{"title":"Javascript中的let和const","slug":"Javascript中的let和const","date":"2022-11-05T03:14:11.000Z","updated":"2022-11-28T11:47:31.454Z","comments":true,"path":"api/articles/Javascript中的let和const.json","realPath":null,"excerpt":"本文主要介绍在Javascript中出现的let和const关键字,它们是ES6中新增的。","covers":null,"cover":null,"content":"<p>本文主要介绍在Javascript中出现的let和const关键字,它们是ES6中新增的。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"几个概念\"><a href=\"#几个概念\" class=\"headerlink\" title=\"几个概念\"></a>几个概念</h2><h3 id=\"ECMAScript和Javascript\"><a href=\"#ECMAScript和Javascript\" class=\"headerlink\" title=\"ECMAScript和Javascript\"></a>ECMAScript和Javascript</h3><p>ECMAScript6它是 ECMA-262 标准的第六个版本，其特点是对 ECMAScript 规范有着显著的变化和改进。</p>\n<p>ES6&#x3D;ECMAScript6&#x3D;ES2015，描述的是同一个东西，名字不同。</p>\n<p>ECMAScript是标准规范，Javascript是其实现(大概是这个意思)。</p>\n<h3 id=\"Babel\"><a href=\"#Babel\" class=\"headerlink\" title=\"Babel\"></a>Babel</h3><p>一款可以将 ES6 代码转换为 ES5 代码的转译器。</p>\n<h2 id=\"let-vs-var\"><a href=\"#let-vs-var\" class=\"headerlink\" title=\"let vs. var\"></a>let vs. var</h2><p>作用：声明一个在代码块中有效的变量。</p>\n<p>在ES6之前， JavaScript 只有两种作用域： <strong>全局变量</strong> 与 <strong>函数内的局部变量</strong>。  </p>\n<p>ES6则引入了块级作用域，即用let声明的变量只能在代码块{}内有效，{}外不能访问，如：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">var</span> x<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> y<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//2</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"y:\"</span><span class=\"token operator\">+</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//y is not defined</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>在循环体中，let关键字也是仅在循环体内部有效，如:</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 一些代码...</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">// 这里输出 i 为 5</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<blockquote>\n<p>let声明的全局变量不属于window对象，因此不能用window.访问；</p>\n<p>let关键字在相同的作用域中，是不可以重新声明赋值的；</p>\n</blockquote>\n<h2 id=\"const关键字\"><a href=\"#const关键字\" class=\"headerlink\" title=\"const关键字\"></a>const关键字</h2><p>作用：声明一个只读的常量，声明的同时必须进行初始化。</p>\n<p>const 定义的对象或者数组，其实是可变的，可修改其属性值。</p>\n<h2 id=\"let和const\"><a href=\"#let和const\" class=\"headerlink\" title=\"let和const\"></a>let和const</h2><p><strong>相同点:</strong></p>\n<p>都是块级作用域；</p>\n<p>都不能和它所在的作用域内的其它变量或函数拥有相同名称；</p>\n<p><strong>不同点：</strong></p>\n<p>const声明时要同时初始化</p>\n<p>const不能修改，但可重新为对象的属性赋值。</p>\n<h2 id=\"Referenced\"><a href=\"#Referenced\" class=\"headerlink\" title=\"Referenced\"></a>Referenced</h2><p><a href=\"https://www.runoob.com/js/js-let-const.html\">1、JavaScript let 和 const </a></p>\n<p><a href=\"https://blog.51cto.com/u_15127629/2871340\">2、一文读懂 JavaScript 和 ECMAScript 的区别</a></p>\n","more":"<h2 id=\"几个概念\"><a href=\"#几个概念\" class=\"headerlink\" title=\"几个概念\"></a>几个概念</h2><h3 id=\"ECMAScript和Javascript\"><a href=\"#ECMAScript和Javascript\" class=\"headerlink\" title=\"ECMAScript和Javascript\"></a>ECMAScript和Javascript</h3><p>ECMAScript6它是 ECMA-262 标准的第六个版本，其特点是对 ECMAScript 规范有着显著的变化和改进。</p>\n<p>ES6&#x3D;ECMAScript6&#x3D;ES2015，描述的是同一个东西，名字不同。</p>\n<p>ECMAScript是标准规范，Javascript是其实现(大概是这个意思)。</p>\n<h3 id=\"Babel\"><a href=\"#Babel\" class=\"headerlink\" title=\"Babel\"></a>Babel</h3><p>一款可以将 ES6 代码转换为 ES5 代码的转译器。</p>\n<h2 id=\"let-vs-var\"><a href=\"#let-vs-var\" class=\"headerlink\" title=\"let vs. var\"></a>let vs. var</h2><p>作用：声明一个在代码块中有效的变量。</p>\n<p>在ES6之前， JavaScript 只有两种作用域： <strong>全局变量</strong> 与 <strong>函数内的局部变量</strong>。  </p>\n<p>ES6则引入了块级作用域，即用let声明的变量只能在代码块{}内有效，{}外不能访问，如：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">var</span> x<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> y<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//2</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"y:\"</span><span class=\"token operator\">+</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//y is not defined</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>在循环体中，let关键字也是仅在循环体内部有效，如:</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 一些代码...</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">// 这里输出 i 为 5</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<blockquote>\n<p>let声明的全局变量不属于window对象，因此不能用window.访问；</p>\n<p>let关键字在相同的作用域中，是不可以重新声明赋值的；</p>\n</blockquote>\n<h2 id=\"const关键字\"><a href=\"#const关键字\" class=\"headerlink\" title=\"const关键字\"></a>const关键字</h2><p>作用：声明一个只读的常量，声明的同时必须进行初始化。</p>\n<p>const 定义的对象或者数组，其实是可变的，可修改其属性值。</p>\n<h2 id=\"let和const\"><a href=\"#let和const\" class=\"headerlink\" title=\"let和const\"></a>let和const</h2><p><strong>相同点:</strong></p>\n<p>都是块级作用域；</p>\n<p>都不能和它所在的作用域内的其它变量或函数拥有相同名称；</p>\n<p><strong>不同点：</strong></p>\n<p>const声明时要同时初始化</p>\n<p>const不能修改，但可重新为对象的属性赋值。</p>\n<h2 id=\"Referenced\"><a href=\"#Referenced\" class=\"headerlink\" title=\"Referenced\"></a>Referenced</h2><p><a href=\"https://www.runoob.com/js/js-let-const.html\">1、JavaScript let 和 const </a></p>\n<p><a href=\"https://blog.51cto.com/u_15127629/2871340\">2、一文读懂 JavaScript 和 ECMAScript 的区别</a></p>","categories":[{"name":"JavaScript","path":"api/categories/JavaScript.json"}],"tags":[{"name":"JavaScript","path":"api/tags/JavaScript.json"}]}