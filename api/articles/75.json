{"title":"JQuery的Deferred对象获取多个耗时操作的结果","slug":"75","date":"2020-11-18T03:20:07.000Z","updated":"2020-11-18T03:20:07.000Z","comments":true,"path":"api/articles/75.json","excerpt":"最近在做涉及到多个图层的空间查询时，由于前端要对多个查询结果进行整合后处理，之前的写法是添加好几个flag，但还是没有做好控制，偶然看到了Jquery的Deferred，这里对其使用做简单的总结","covers":null,"content":"<p>最近在做涉及到多个图层的空间查询时，由于前端要对多个查询结果进行整合后处理，之前的写法是添加好几个flag，但还是没有做好控制，偶然看到了Jquery的Deferred，这里对其使用做简单的总结</p>\n<span id=\"more\"></span>\n\n<h2 id=\"开发环境\"><a href=\"#开发环境\" class=\"headerlink\" title=\"开发环境\"></a>开发环境</h2><p>OS: win10 x64<br>JQuery: 1.9.1<br>Browser: IE8</p>\n<h2 id=\"Deferred对象简介\"><a href=\"#Deferred对象简介\" class=\"headerlink\" title=\"Deferred对象简介\"></a>Deferred对象简介</h2><p>Deferred对象是jQuery1.5开始引入的对象，用来弥补jQuery在回调函数方面功能不足的情况。Deferred对象有以下几种状态：  </p>\n<blockquote>\n<p>resolved: 已完成 , 调用此方法后，表示当前Deferred对象已经执行完成，会调用到done()<br>reject: 失败，会调用到fail()</p>\n</blockquote>\n<p>$.Deferred对象的几个操作：</p>\n<blockquote>\n<p>$.when()：为多个操作指定回调<br>deferred.then(): done和fail的结合</p>\n</blockquote>\n<h2 id=\"ajax的链式写法\"><a href=\"#ajax的链式写法\" class=\"headerlink\" title=\"ajax的链式写法\"></a>ajax的链式写法</h2><pre class=\"line-numbers language-none\"><code class=\"language-none\">$.ajax(&#39;test.html&#39;).done(function()&#123; &#125;).fail(function()&#123; &#125;);<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>其中：done()相当与success(),fail相当于error()。</p>\n<h2 id=\"等待多个操作的返回结果\"><a href=\"#等待多个操作的返回结果\" class=\"headerlink\" title=\"等待多个操作的返回结果\"></a>等待多个操作的返回结果</h2><p>如果是这几个操作是确定，那我们直接使用$.when().done就可以了，如下：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">var d1 &#x3D; $.Deferred();\nvar d2 &#x3D; $.Deferred();\nvar d3 &#x3D; $.Deferred();\n\nfunction async1() &#123;\nd1.resolve(&quot;Fish&quot;);\n&#125;\n\nfunction async2() &#123;\nd2.resolve(&quot;Pizza&quot;);\n&#125;\n\nfunction async3() &#123;\nd3.resolve(&quot;Chicken&quot;);\n&#125;\n\n$.when(d1, d2,d3).done(function (v1, v2,v3) &#123;\n\tconsole.log(v1 + v2 +v3+ &#39;已完成&#39;);\n&#125;);\nasync1();\nasync2();\nasync3();<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>这里的v1，v2,v3就是deferred对象在调用resolve函数时的参数。</p>\n<h2 id=\"等待未知数量的请求的返回结果\"><a href=\"#等待未知数量的请求的返回结果\" class=\"headerlink\" title=\"等待未知数量的请求的返回结果\"></a>等待未知数量的请求的返回结果</h2><p>对于有些循环的请求，只能通过数组的方式创建Deferred对象的场景，可以使用$.when().apply,如下：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">var defArr&#x3D;[];\ndefArr[0]&#x3D;$.Deferred();\n...\n$.when.apply($,defArr).then(function()&#123;\n&#x2F;&#x2F;参数处理：https:&#x2F;&#x2F;www.imooc.com&#x2F;wenda&#x2F;detail&#x2F;564295\nvar objects&#x3D;arguments;\nfor(var i&#x3D;0;i&lt;objects.length;i++)&#123;\nconsole.log(objects[i]);\n&#125;\n&#125;)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"Referenced\"><a href=\"#Referenced\" class=\"headerlink\" title=\"Referenced\"></a>Referenced</h2><p><a href=\"http://www.ruanyifeng.com/blog/2011/08/a_detailed_explanation_of_jquery_deferred_object.html\">1、jQuery的deferred对象详解</a><br><a href=\"https://www.imooc.com/wenda/detail/564295\">2、Deferred参数的处理</a><br><a href=\"https://shiyuhei10456.lofter.com/post/3126465a_1c76bf4d6\">3、封面图</a></p>\n","more":"<h2 id=\"开发环境\"><a href=\"#开发环境\" class=\"headerlink\" title=\"开发环境\"></a>开发环境</h2><p>OS: win10 x64<br>JQuery: 1.9.1<br>Browser: IE8</p>\n<h2 id=\"Deferred对象简介\"><a href=\"#Deferred对象简介\" class=\"headerlink\" title=\"Deferred对象简介\"></a>Deferred对象简介</h2><p>Deferred对象是jQuery1.5开始引入的对象，用来弥补jQuery在回调函数方面功能不足的情况。Deferred对象有以下几种状态：  </p>\n<blockquote>\n<p>resolved: 已完成 , 调用此方法后，表示当前Deferred对象已经执行完成，会调用到done()<br>reject: 失败，会调用到fail()</p>\n</blockquote>\n<p>$.Deferred对象的几个操作：</p>\n<blockquote>\n<p>$.when()：为多个操作指定回调<br>deferred.then(): done和fail的结合</p>\n</blockquote>\n<h2 id=\"ajax的链式写法\"><a href=\"#ajax的链式写法\" class=\"headerlink\" title=\"ajax的链式写法\"></a>ajax的链式写法</h2><pre class=\"line-numbers language-none\"><code class=\"language-none\">$.ajax(&#39;test.html&#39;).done(function()&#123; &#125;).fail(function()&#123; &#125;);<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>其中：done()相当与success(),fail相当于error()。</p>\n<h2 id=\"等待多个操作的返回结果\"><a href=\"#等待多个操作的返回结果\" class=\"headerlink\" title=\"等待多个操作的返回结果\"></a>等待多个操作的返回结果</h2><p>如果是这几个操作是确定，那我们直接使用$.when().done就可以了，如下：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">var d1 &#x3D; $.Deferred();\nvar d2 &#x3D; $.Deferred();\nvar d3 &#x3D; $.Deferred();\n\nfunction async1() &#123;\nd1.resolve(&quot;Fish&quot;);\n&#125;\n\nfunction async2() &#123;\nd2.resolve(&quot;Pizza&quot;);\n&#125;\n\nfunction async3() &#123;\nd3.resolve(&quot;Chicken&quot;);\n&#125;\n\n$.when(d1, d2,d3).done(function (v1, v2,v3) &#123;\n\tconsole.log(v1 + v2 +v3+ &#39;已完成&#39;);\n&#125;);\nasync1();\nasync2();\nasync3();<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>这里的v1，v2,v3就是deferred对象在调用resolve函数时的参数。</p>\n<h2 id=\"等待未知数量的请求的返回结果\"><a href=\"#等待未知数量的请求的返回结果\" class=\"headerlink\" title=\"等待未知数量的请求的返回结果\"></a>等待未知数量的请求的返回结果</h2><p>对于有些循环的请求，只能通过数组的方式创建Deferred对象的场景，可以使用$.when().apply,如下：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">var defArr&#x3D;[];\ndefArr[0]&#x3D;$.Deferred();\n...\n$.when.apply($,defArr).then(function()&#123;\n&#x2F;&#x2F;参数处理：https:&#x2F;&#x2F;www.imooc.com&#x2F;wenda&#x2F;detail&#x2F;564295\nvar objects&#x3D;arguments;\nfor(var i&#x3D;0;i&lt;objects.length;i++)&#123;\nconsole.log(objects[i]);\n&#125;\n&#125;)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"Referenced\"><a href=\"#Referenced\" class=\"headerlink\" title=\"Referenced\"></a>Referenced</h2><p><a href=\"http://www.ruanyifeng.com/blog/2011/08/a_detailed_explanation_of_jquery_deferred_object.html\">1、jQuery的deferred对象详解</a><br><a href=\"https://www.imooc.com/wenda/detail/564295\">2、Deferred参数的处理</a><br><a href=\"https://shiyuhei10456.lofter.com/post/3126465a_1c76bf4d6\">3、封面图</a></p>","categories":[{"name":"前端","path":"api/categories/前端.json"}],"tags":[{"name":"JQuery","path":"api/tags/JQuery.json"}]}