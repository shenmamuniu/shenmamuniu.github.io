{"title":"立即执行函数表达式：JavaScript作用域的守护者","slug":"立即执行函数表达式：JavaScript作用域的守护者","date":"2024-03-22T23:56:34.000Z","updated":"2024-03-23T00:13:10.021Z","comments":true,"path":"api/articles/立即执行函数表达式：JavaScript作用域的守护者.json","excerpt":"有的Javascript代码真的很难读啊，本文简单介绍立即执行函数表达式(Immediately Invoked Function Expression，IIFE)模式及其作用。","covers":null,"content":"<p>有的Javascript代码真的很难读啊，本文简单介绍立即执行函数表达式(Immediately Invoked Function Expression，IIFE)模式及其作用。</p>\n<span id=\"more\"></span>\n<h2 id=\"IIFE定义\"><a href=\"#IIFE定义\" class=\"headerlink\" title=\"IIFE定义\"></a>IIFE定义</h2><p>IIFE（立即执行函数表达式）是一种在定义后立即执行的JavaScript函数。并创建一个<strong>封闭的作用域</strong>。语法如下：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">/* 代码 */</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>示例：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> myModule <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">var</span> privateVar <span class=\"token operator\">=</span> <span class=\"token string\">'私有变量'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">privateFunction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>privateVar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    \n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function-variable function\">publicMethod</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token function\">privateFunction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nmyModule<span class=\"token punctuation\">.</span><span class=\"token function\">publicMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 输出: 私有变量</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"作用\"><a href=\"#作用\" class=\"headerlink\" title=\"作用\"></a>作用</h2><ol>\n<li>创建私有作用域：在函数内部声明的变量不会污染全局作用域。</li>\n<li>模块化代码：避免全局变量冲突，保护模块内的私有变量不被外部访问。</li>\n</ol>\n<h2 id=\"ES6及块级作用域\"><a href=\"#ES6及块级作用域\" class=\"headerlink\" title=\"ES6及块级作用域\"></a>ES6及块级作用域</h2><p>ES6引入了let和const关键字，提供了块级作用域，减少了IIFE的必要性。<br>使用{}与let或const可以创建封闭的块级作用域，保护变量不被外部访问。</p>\n<p>如：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// ES6中使用let创建块级作用域</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">let</span> privateVar <span class=\"token operator\">=</span> <span class=\"token string\">'私有变量'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p> <a href=\"https://zh.wikipedia.org/wiki/%E7%AB%8B%E5%8D%B3%E8%B0%83%E7%94%A8%E5%87%BD%E6%95%B0%E8%A1%A8%E8%BE%BE%E5%BC%8F\">因此，IIFE是一个在ES5及更早版本的JavaScript中常用的模式，而ES6提供了更多的作用域控制方式，减少了IIFE的必要性。但是，IIFE仍然是一个有效的模式，特别是在需要支持旧版JavaScript环境的情况下</a><a href=\"https://zh.wikipedia.org/wiki/%E7%AB%8B%E5%8D%B3%E8%B0%83%E7%94%A8%E5%87%BD%E6%95%B0%E8%A1%A8%E8%BE%BE%E5%BC%8F\">1</a>。 </p>\n<h2 id=\"与其他JavaScript特性的关系\"><a href=\"#与其他JavaScript特性的关系\" class=\"headerlink\" title=\"与其他JavaScript特性的关系\"></a>与其他JavaScript特性的关系</h2><p>IIFE语法如下：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">/* 代码 */</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>而JQuery长这样，似乎很相似：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token function\">$</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ready</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 当DOM加载完成后，这里的代码会执行</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'文档加载完成!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 或者使用简写形式</span>\n<span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 当DOM加载完成后，这里的代码会执行</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'文档加载完成!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>但jQuery的$(function(){})，后者是文档就绪事件的简写，不是IIFE。IIFE在某种程度上类似于匿名函数。在JavaScript和TypeScript中，匿名函数是没有具体名称的函数，它们可以被定义并立即执行，也都可以创建一个封闭的作用域来保护变量不被外部访问，这与IIFE的概念相符合。</p>\n<h2 id=\"IIFE的未来\"><a href=\"#IIFE的未来\" class=\"headerlink\" title=\"IIFE的未来\"></a>IIFE的未来</h2><p>随着ES6新特性的普及，IIFE的使用场景减少。现在，开发者可以更方便地通过let和const来控制变量的作用域，而不必依赖IIFE来避免全局作用域的污染。当然，IIFE仍然在一些特定情况下有其用处，尤其是在需要兼容旧版JavaScript环境的项目中。但是，随着现代JavaScript开发的演进，新的语言特性如模块导入（import&#x2F;export）也提供了更好的封装和作用域管理方式，进一步减少了IIFE的必要性。</p>\n","more":"<h2 id=\"IIFE定义\"><a href=\"#IIFE定义\" class=\"headerlink\" title=\"IIFE定义\"></a>IIFE定义</h2><p>IIFE（立即执行函数表达式）是一种在定义后立即执行的JavaScript函数。并创建一个<strong>封闭的作用域</strong>。语法如下：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">/* 代码 */</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>示例：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> myModule <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">var</span> privateVar <span class=\"token operator\">=</span> <span class=\"token string\">'私有变量'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">privateFunction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>privateVar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    \n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function-variable function\">publicMethod</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token function\">privateFunction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nmyModule<span class=\"token punctuation\">.</span><span class=\"token function\">publicMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 输出: 私有变量</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"作用\"><a href=\"#作用\" class=\"headerlink\" title=\"作用\"></a>作用</h2><ol>\n<li>创建私有作用域：在函数内部声明的变量不会污染全局作用域。</li>\n<li>模块化代码：避免全局变量冲突，保护模块内的私有变量不被外部访问。</li>\n</ol>\n<h2 id=\"ES6及块级作用域\"><a href=\"#ES6及块级作用域\" class=\"headerlink\" title=\"ES6及块级作用域\"></a>ES6及块级作用域</h2><p>ES6引入了let和const关键字，提供了块级作用域，减少了IIFE的必要性。<br>使用{}与let或const可以创建封闭的块级作用域，保护变量不被外部访问。</p>\n<p>如：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// ES6中使用let创建块级作用域</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">let</span> privateVar <span class=\"token operator\">=</span> <span class=\"token string\">'私有变量'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p> <a href=\"https://zh.wikipedia.org/wiki/%E7%AB%8B%E5%8D%B3%E8%B0%83%E7%94%A8%E5%87%BD%E6%95%B0%E8%A1%A8%E8%BE%BE%E5%BC%8F\">因此，IIFE是一个在ES5及更早版本的JavaScript中常用的模式，而ES6提供了更多的作用域控制方式，减少了IIFE的必要性。但是，IIFE仍然是一个有效的模式，特别是在需要支持旧版JavaScript环境的情况下</a><a href=\"https://zh.wikipedia.org/wiki/%E7%AB%8B%E5%8D%B3%E8%B0%83%E7%94%A8%E5%87%BD%E6%95%B0%E8%A1%A8%E8%BE%BE%E5%BC%8F\">1</a>。 </p>\n<h2 id=\"与其他JavaScript特性的关系\"><a href=\"#与其他JavaScript特性的关系\" class=\"headerlink\" title=\"与其他JavaScript特性的关系\"></a>与其他JavaScript特性的关系</h2><p>IIFE语法如下：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">/* 代码 */</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>而JQuery长这样，似乎很相似：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token function\">$</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ready</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 当DOM加载完成后，这里的代码会执行</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'文档加载完成!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 或者使用简写形式</span>\n<span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 当DOM加载完成后，这里的代码会执行</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'文档加载完成!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>但jQuery的$(function(){})，后者是文档就绪事件的简写，不是IIFE。IIFE在某种程度上类似于匿名函数。在JavaScript和TypeScript中，匿名函数是没有具体名称的函数，它们可以被定义并立即执行，也都可以创建一个封闭的作用域来保护变量不被外部访问，这与IIFE的概念相符合。</p>\n<h2 id=\"IIFE的未来\"><a href=\"#IIFE的未来\" class=\"headerlink\" title=\"IIFE的未来\"></a>IIFE的未来</h2><p>随着ES6新特性的普及，IIFE的使用场景减少。现在，开发者可以更方便地通过let和const来控制变量的作用域，而不必依赖IIFE来避免全局作用域的污染。当然，IIFE仍然在一些特定情况下有其用处，尤其是在需要兼容旧版JavaScript环境的项目中。但是，随着现代JavaScript开发的演进，新的语言特性如模块导入（import&#x2F;export）也提供了更好的封装和作用域管理方式，进一步减少了IIFE的必要性。</p>","categories":[{"name":"JavaScript","path":"api/categories/JavaScript.json"}],"tags":[{"name":"JavaScript","path":"api/tags/JavaScript.json"}]}