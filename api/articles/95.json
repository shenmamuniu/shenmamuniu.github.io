{"title":"JavaScript正则表达式的使用","slug":"95","date":"2021-04-22T07:06:00.000Z","updated":"2021-04-22T13:08:19.000Z","comments":true,"path":"api/articles/95.json","realPath":null,"excerpt":"使用Javascript中的正则大表达式对行政区划代码进行判断，确定是省级还是市级行政区划。","covers":null,"cover":null,"content":"<p>使用Javascript中的正则大表达式对行政区划代码进行判断，确定是省级还是市级行政区划。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"正则表达式的语法\"><a href=\"#正则表达式的语法\" class=\"headerlink\" title=\"正则表达式的语法\"></a>正则表达式的语法</h2><h3 id=\"常用的元字符\"><a href=\"#常用的元字符\" class=\"headerlink\" title=\"常用的元字符\"></a>常用的元字符</h3><table>\n<thead>\n<tr>\n<th align=\"left\">代码</th>\n<th align=\"left\">说明</th>\n<th align=\"center\">反义代码</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">[0-9]</td>\n<td align=\"left\">匹配0~9中的任一数字</td>\n<td align=\"center\">&#x2F;</td>\n</tr>\n<tr>\n<td align=\"left\">[A-Z]</td>\n<td align=\"left\">匹配A~Z中的任一字母</td>\n<td align=\"center\">&#x2F;</td>\n</tr>\n<tr>\n<td align=\"left\">.</td>\n<td align=\"left\">匹配除换行符以外的任意字符，可以匹配中文字符</td>\n<td align=\"center\">&#x2F;</td>\n</tr>\n<tr>\n<td align=\"left\">\\w</td>\n<td align=\"left\">字母、数字、下划线，相当于[A-Za-z0-9_]</td>\n<td align=\"center\">\\W</td>\n</tr>\n<tr>\n<td align=\"left\">\\d</td>\n<td align=\"left\">数字</td>\n<td align=\"center\">\\D</td>\n</tr>\n<tr>\n<td align=\"left\">\\s</td>\n<td align=\"left\">匹配任意的空白符，包括空格、制表符、换页符等</td>\n<td align=\"center\">\\S</td>\n</tr>\n<tr>\n<td align=\"left\">^</td>\n<td align=\"left\">字符串的开始</td>\n<td align=\"center\">&#x2F;</td>\n</tr>\n<tr>\n<td align=\"left\">$</td>\n<td align=\"left\">字符串的结束</td>\n<td align=\"center\">&#x2F;</td>\n</tr>\n</tbody></table>\n<h3 id=\"常用的限定符\"><a href=\"#常用的限定符\" class=\"headerlink\" title=\"常用的限定符\"></a>常用的限定符</h3><table>\n<thead>\n<tr>\n<th align=\"left\">代码</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">*</td>\n<td align=\"left\">重复0次或多次</td>\n</tr>\n<tr>\n<td align=\"left\">+</td>\n<td align=\"left\">1次或多次</td>\n</tr>\n<tr>\n<td align=\"left\">?</td>\n<td align=\"left\">0次或一次</td>\n</tr>\n<tr>\n<td align=\"left\">{n}</td>\n<td align=\"left\">n次</td>\n</tr>\n<tr>\n<td align=\"left\">{n,}</td>\n<td align=\"left\">重复n次或更多次</td>\n</tr>\n<tr>\n<td align=\"left\">{n,m}</td>\n<td align=\"left\">重复n次或m次</td>\n</tr>\n<tr>\n<td align=\"left\">()</td>\n<td align=\"left\">分组</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p> <strong>提示：</strong> |  表示或</p>\n</blockquote>\n<h2 id=\"Javascript中正则表达式的使用\"><a href=\"#Javascript中正则表达式的使用\" class=\"headerlink\" title=\"Javascript中正则表达式的使用\"></a>Javascript中正则表达式的使用</h2><p>在 JavaScript 中，RegExp 对象是一个预定义了属性和方法的正则表达式对象。</p>\n<h3 id=\"test\"><a href=\"#test\" class=\"headerlink\" title=\"test()\"></a>test()</h3><p>用于检查字符串中是否含有符合给定正则的对象，返回结果为true or false。<br>如下这里是判断行政区划代码是省或市</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">var patt1&#x3D;new RegExp(&quot;0000&quot;);\ndocument.write(patt1.test(&quot;441000&quot;)); &#x2F;&#x2F;false\nvar patt2&#x3D;new RegExp(&quot;[0-9]&#123;2&#125;((0[1-9])|[1-9][0-9])00&quot;);\ndocument.write(patt2.test(&quot;210100&quot;)); &#x2F;&#x2F;true<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"exec\"><a href=\"#exec\" class=\"headerlink\" title=\"exec()\"></a>exec()</h3><p>获取正则匹配结果，返回结果为数组类型，没有匹配范围null。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">var patt1&#x3D;new RegExp(&quot;0000&quot;);\ndocument.write(patt1.exec(&quot;441000&quot;)+&quot;&lt;br&#x2F;&gt;&quot;); &#x2F;&#x2F;false\n\t\nvar patt2&#x3D;new RegExp(&quot;[0-9]&#123;2&#125;((0[1-9])|[1-9][0-9])00&quot;);\ndocument.write(patt2.exec(&quot;210100&quot;)); &#x2F;&#x2F;true\n\nvar patt2&#x3D;new RegExp(&quot;[0-9]&#123;2&#125;((0[1-9])|[1-9][0-9])00&quot;);\ndocument.write(patt2.exec(&quot;211000&quot;)); &#x2F;&#x2F;true\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>输出结果为：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">null\n210100,01,01\n210100,10<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p>其中正则表达式里面的（）标记一个子表达式的开始和结束位置，如果匹配到（）里面的内容，都会作为匹配结果中的一个对象。可以好好体会210100和211000这两个不同的输出结果。</p>\n</blockquote>\n<h2 id=\"Referenced\"><a href=\"#Referenced\" class=\"headerlink\" title=\"Referenced\"></a>Referenced</h2><p><a href=\"https://www.runoob.com/regexp/regexp-syntax.html\">1、正则表达式 - 语法</a><br><a href=\"https://www.runoob.com/js/js-regexp.html\">2、JavaScript 正则表达式</a><br><a href=\"https://huadou145.lofter.com/post/205d4db3_1c8bfba2e\">3、封面图源</a></p>\n","more":"<h2 id=\"正则表达式的语法\"><a href=\"#正则表达式的语法\" class=\"headerlink\" title=\"正则表达式的语法\"></a>正则表达式的语法</h2><h3 id=\"常用的元字符\"><a href=\"#常用的元字符\" class=\"headerlink\" title=\"常用的元字符\"></a>常用的元字符</h3><table>\n<thead>\n<tr>\n<th align=\"left\">代码</th>\n<th align=\"left\">说明</th>\n<th align=\"center\">反义代码</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">[0-9]</td>\n<td align=\"left\">匹配0~9中的任一数字</td>\n<td align=\"center\">&#x2F;</td>\n</tr>\n<tr>\n<td align=\"left\">[A-Z]</td>\n<td align=\"left\">匹配A~Z中的任一字母</td>\n<td align=\"center\">&#x2F;</td>\n</tr>\n<tr>\n<td align=\"left\">.</td>\n<td align=\"left\">匹配除换行符以外的任意字符，可以匹配中文字符</td>\n<td align=\"center\">&#x2F;</td>\n</tr>\n<tr>\n<td align=\"left\">\\w</td>\n<td align=\"left\">字母、数字、下划线，相当于[A-Za-z0-9_]</td>\n<td align=\"center\">\\W</td>\n</tr>\n<tr>\n<td align=\"left\">\\d</td>\n<td align=\"left\">数字</td>\n<td align=\"center\">\\D</td>\n</tr>\n<tr>\n<td align=\"left\">\\s</td>\n<td align=\"left\">匹配任意的空白符，包括空格、制表符、换页符等</td>\n<td align=\"center\">\\S</td>\n</tr>\n<tr>\n<td align=\"left\">^</td>\n<td align=\"left\">字符串的开始</td>\n<td align=\"center\">&#x2F;</td>\n</tr>\n<tr>\n<td align=\"left\">$</td>\n<td align=\"left\">字符串的结束</td>\n<td align=\"center\">&#x2F;</td>\n</tr>\n</tbody></table>\n<h3 id=\"常用的限定符\"><a href=\"#常用的限定符\" class=\"headerlink\" title=\"常用的限定符\"></a>常用的限定符</h3><table>\n<thead>\n<tr>\n<th align=\"left\">代码</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">*</td>\n<td align=\"left\">重复0次或多次</td>\n</tr>\n<tr>\n<td align=\"left\">+</td>\n<td align=\"left\">1次或多次</td>\n</tr>\n<tr>\n<td align=\"left\">?</td>\n<td align=\"left\">0次或一次</td>\n</tr>\n<tr>\n<td align=\"left\">{n}</td>\n<td align=\"left\">n次</td>\n</tr>\n<tr>\n<td align=\"left\">{n,}</td>\n<td align=\"left\">重复n次或更多次</td>\n</tr>\n<tr>\n<td align=\"left\">{n,m}</td>\n<td align=\"left\">重复n次或m次</td>\n</tr>\n<tr>\n<td align=\"left\">()</td>\n<td align=\"left\">分组</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p> <strong>提示：</strong> |  表示或</p>\n</blockquote>\n<h2 id=\"Javascript中正则表达式的使用\"><a href=\"#Javascript中正则表达式的使用\" class=\"headerlink\" title=\"Javascript中正则表达式的使用\"></a>Javascript中正则表达式的使用</h2><p>在 JavaScript 中，RegExp 对象是一个预定义了属性和方法的正则表达式对象。</p>\n<h3 id=\"test\"><a href=\"#test\" class=\"headerlink\" title=\"test()\"></a>test()</h3><p>用于检查字符串中是否含有符合给定正则的对象，返回结果为true or false。<br>如下这里是判断行政区划代码是省或市</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">var patt1&#x3D;new RegExp(&quot;0000&quot;);\ndocument.write(patt1.test(&quot;441000&quot;)); &#x2F;&#x2F;false\nvar patt2&#x3D;new RegExp(&quot;[0-9]&#123;2&#125;((0[1-9])|[1-9][0-9])00&quot;);\ndocument.write(patt2.test(&quot;210100&quot;)); &#x2F;&#x2F;true<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"exec\"><a href=\"#exec\" class=\"headerlink\" title=\"exec()\"></a>exec()</h3><p>获取正则匹配结果，返回结果为数组类型，没有匹配范围null。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">var patt1&#x3D;new RegExp(&quot;0000&quot;);\ndocument.write(patt1.exec(&quot;441000&quot;)+&quot;&lt;br&#x2F;&gt;&quot;); &#x2F;&#x2F;false\n\t\nvar patt2&#x3D;new RegExp(&quot;[0-9]&#123;2&#125;((0[1-9])|[1-9][0-9])00&quot;);\ndocument.write(patt2.exec(&quot;210100&quot;)); &#x2F;&#x2F;true\n\nvar patt2&#x3D;new RegExp(&quot;[0-9]&#123;2&#125;((0[1-9])|[1-9][0-9])00&quot;);\ndocument.write(patt2.exec(&quot;211000&quot;)); &#x2F;&#x2F;true\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>输出结果为：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">null\n210100,01,01\n210100,10<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p>其中正则表达式里面的（）标记一个子表达式的开始和结束位置，如果匹配到（）里面的内容，都会作为匹配结果中的一个对象。可以好好体会210100和211000这两个不同的输出结果。</p>\n</blockquote>\n<h2 id=\"Referenced\"><a href=\"#Referenced\" class=\"headerlink\" title=\"Referenced\"></a>Referenced</h2><p><a href=\"https://www.runoob.com/regexp/regexp-syntax.html\">1、正则表达式 - 语法</a><br><a href=\"https://www.runoob.com/js/js-regexp.html\">2、JavaScript 正则表达式</a><br><a href=\"https://huadou145.lofter.com/post/205d4db3_1c8bfba2e\">3、封面图源</a></p>","categories":[{"name":"前端","path":"api/categories/前端.json"}],"tags":[{"name":"JavaScript","path":"api/tags/JavaScript.json"},{"name":"正则表达式","path":"api/tags/正则表达式.json"}]}