{"title":"使用webpack对代码压缩混淆","slug":"103","date":"2021-06-02T07:34:14.000Z","updated":"2021-06-02T07:34:14.000Z","comments":true,"path":"api/articles/103.json","excerpt":"本文对webpack的基本使用作简单的介绍，从js、css的打包，到代码的混淆，希望对初步学习webpack的你有帮助。","covers":null,"content":"<p>本文对webpack的基本使用作简单的介绍，从js、css的打包，到代码的混淆，希望对初步学习webpack的你有帮助。</p>\n<span id=\"more\"></span>\n<h2 id=\"软件版本\"><a href=\"#软件版本\" class=\"headerlink\" title=\"软件版本\"></a>软件版本</h2><p>webpack 5.38.1<br>webpack-cli 4.7.0<br>node:v14.17.0</p>\n<h2 id=\"webpack的安装\"><a href=\"#webpack的安装\" class=\"headerlink\" title=\"webpack的安装\"></a>webpack的安装</h2><pre class=\"line-numbers language-none\"><code class=\"language-none\">npm install webpack webpack-cli -g<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h2 id=\"对单个js文件进行压缩\"><a href=\"#对单个js文件进行压缩\" class=\"headerlink\" title=\"对单个js文件进行压缩\"></a>对单个js文件进行压缩</h2><p>创建一个test.js文件，添加如下内容:</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">document.write(&#39;It works from runoob2.js&#39;);<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>创建一个index.html,内容如下:</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;meta charset&#x3D;&quot;utf-8&quot;&gt;\n        &lt;title&gt;Hello world&lt;&#x2F;title&gt;\n        &lt;script src&#x3D;&quot;.&#x2F;dist&#x2F;main.js&quot;&gt;&lt;&#x2F;script&gt;\n    &lt;&#x2F;head&gt;\n    &lt;body&gt;\n    &lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>使用webpack对test.js进行压缩: </p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">webpack .&#x2F;test.js --mode producation<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>打开index.html文件，查看test.js文件压缩后，里面的内容是否被成功调用。</p>\n<h2 id=\"对多个js文件进行压缩\"><a href=\"#对多个js文件进行压缩\" class=\"headerlink\" title=\"对多个js文件进行压缩\"></a>对多个js文件进行压缩</h2><p>同样的，我们创建test2.js,内容如下:</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">module.exports &#x3D; &quot;It works from runoob2.js.&quot;;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>并将test.js中的内容修改为如下：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">document.write(require(&quot;.&#x2F;test2.js&quot;));<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>打包</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">webpack .&#x2F;test.js .&#x2F;test2.js --mode porducation<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>再次访问index.html，查看是否正常</p>\n<h2 id=\"调用js中的函数\"><a href=\"#调用js中的函数\" class=\"headerlink\" title=\"调用js中的函数\"></a>调用js中的函数</h2><p>接下来，我们创建test3.js，里面添加一个函数，然后在index.html中调用.<br>test3.js内容如下:</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">window.clearSgline &#x3D; function  () &#123;\n    console.log(&quot;test function &quot;)\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p>提示：如果不这么写，index.html中调用不到，可参考文末链接</p>\n</blockquote>\n<p>在index.html中调用函数clearSgline,如下：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&lt;body&gt;\n    window.onload&#x3D;function()&#123;\n        clearSgline();\n    &#125;\n&lt;&#x2F;body&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>修改test.js文件，引入test3.js,如下:</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">require(&#39;.&#x2F;test3.js&#39;);<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>打包:</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">webpack .&#x2F;test.js .&#x2F;test2.js .&#x2F;test3.js<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>在浏览器中查看index.html,观察函数是否被成功调用</p>\n<h2 id=\"webpack打包css文件\"><a href=\"#webpack打包css文件\" class=\"headerlink\" title=\"webpack打包css文件\"></a>webpack打包css文件</h2><p>Webpack 本身只能处理 JavaScript 模块，如果要处理其他类型的文件，就需要使用 loader 进行转换。</p>\n<p>安装css-loader和style-loader</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">npm install css-loader style-loader --save-dev<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>首先创建一个样式文件style.css，如下：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">body&#123;\n    background:yellowgreen;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>修改test.js文件，添加如下内容:</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">require(&quot;!style-loader!css-loader!.&#x2F;style.css&quot;);<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>require CSS 文件的时候都要写 loader 前缀 !style-loader!css-loader!，当然我们可以根据模块类型（扩展名）来自动绑定需要的 loader</p>\n<blockquote>\n<p>到这里，其实可以发现test.js好似所有js和css的入口</p>\n</blockquote>\n<p>打包,</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">webpack .&#x2F;test.js .&#x2F;test2.js .&#x2F;test3.js  --mode development<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>或者，在打包时指定需要的loader，修改test.js中style.css的引用，如下：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">require(&quot;.&#x2F;style.css&quot;);<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>在打包时，加入对应的loader</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">webpack .&#x2F;test.js .&#x2F;test2.js .&#x2F;test3.js  --mode development --module-bind &#39;css&#x3D;style-loader!css-loader&#39;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h2 id=\"webpack配置文件的使用\"><a href=\"#webpack配置文件的使用\" class=\"headerlink\" title=\"webpack配置文件的使用\"></a>webpack配置文件的使用</h2><p>创建一个webpack.config.js,打包时就会直接使用它了，webpack.config.js内容如下：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">const path &#x3D;require(&#39;path&#39;);\nmodule.exports &#x3D; &#123;\n    entry: &quot;.&#x2F;test.js&quot;,\n    mode: &#39;production&#39;,\n    output: &#123;\n        path: path.join(__dirname,&#39;dist&#39;),\n        filename: &quot;bundle.js&quot;\n    &#125;,\n    module: &#123;\n        rules: [\n            &#123; \n                test: &#x2F;\\.css$&#x2F;,\n                use: [&#39;style-loader&#39;,&#39;css-loader&#39;] ,\n            &#125;\n        ]\n    &#125;\n&#125;;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>打包时使用以下命令即可：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">webpack <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h2 id=\"webpack代码混淆\"><a href=\"#webpack代码混淆\" class=\"headerlink\" title=\"webpack代码混淆\"></a>webpack代码混淆</h2><p>如果不想让其它人轻易的看到自己的代码，可以通过web-obfuscator插件对代码进行混淆。<br>安装：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">npm install --save-dev javascript-obfuscator webpack-obfuscator<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>修改webpack.config.js,如下：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">var WebpackObfuscator &#x3D; require(&#39;webpack-obfuscator&#39;);\n\n&#x2F;&#x2F; ...\n\n&#x2F;&#x2F; webpack plugins array\nplugins: [\n    new WebpackObfuscator (&#123;\n        rotateStringArray: true\n    &#125;, [&#39;excluded_bundle_name.js&#39;])\n]<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p>其中数组中的excluded_bundle_name.js为需要排除的文件<br>如果觉得混淆到此种程度还不够，那还可以添加更多的参数,具体有那些参数，在你安装完javascript-obfuscator之后，可以在其README.md文件中找到，或者参考文末提供的文章链接。</p>\n</blockquote>\n<h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h2><p><a href=\"https://www.runoob.com/w3cnote/webpack-tutorial.html\">1、Webpack 入门教程</a><br><a href=\"https://segmentfault.com/q/1010000012739169/a-1020000012739755\">2、webpack 打包后如何调用JS自定义函数？</a><br><a href=\"webpack%E5%AE%89%E8%A3%85css-loader,style-loader%E5%BF%83%E5%BE%97\">3、webpack.config.js配置</a><br><a href=\"https://www.cnblogs.com/dragonir/archive/2021/02/25/14445767.html\">4、vue项目配置 webpack-obfuscator 进行代码加密混淆</a><br><a href=\"https://www.npmjs.com/package/webpack-obfuscator\">5、webpack代码混淆</a><br><a href=\"https://huadou145.lofter.com/post/205d4db3_1c71e6ba8\">6、 封面图源</a></p>\n","more":"<h2 id=\"软件版本\"><a href=\"#软件版本\" class=\"headerlink\" title=\"软件版本\"></a>软件版本</h2><p>webpack 5.38.1<br>webpack-cli 4.7.0<br>node:v14.17.0</p>\n<h2 id=\"webpack的安装\"><a href=\"#webpack的安装\" class=\"headerlink\" title=\"webpack的安装\"></a>webpack的安装</h2><pre class=\"line-numbers language-none\"><code class=\"language-none\">npm install webpack webpack-cli -g<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h2 id=\"对单个js文件进行压缩\"><a href=\"#对单个js文件进行压缩\" class=\"headerlink\" title=\"对单个js文件进行压缩\"></a>对单个js文件进行压缩</h2><p>创建一个test.js文件，添加如下内容:</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">document.write(&#39;It works from runoob2.js&#39;);<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>创建一个index.html,内容如下:</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;meta charset&#x3D;&quot;utf-8&quot;&gt;\n        &lt;title&gt;Hello world&lt;&#x2F;title&gt;\n        &lt;script src&#x3D;&quot;.&#x2F;dist&#x2F;main.js&quot;&gt;&lt;&#x2F;script&gt;\n    &lt;&#x2F;head&gt;\n    &lt;body&gt;\n    &lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>使用webpack对test.js进行压缩: </p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">webpack .&#x2F;test.js --mode producation<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>打开index.html文件，查看test.js文件压缩后，里面的内容是否被成功调用。</p>\n<h2 id=\"对多个js文件进行压缩\"><a href=\"#对多个js文件进行压缩\" class=\"headerlink\" title=\"对多个js文件进行压缩\"></a>对多个js文件进行压缩</h2><p>同样的，我们创建test2.js,内容如下:</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">module.exports &#x3D; &quot;It works from runoob2.js.&quot;;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>并将test.js中的内容修改为如下：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">document.write(require(&quot;.&#x2F;test2.js&quot;));<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>打包</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">webpack .&#x2F;test.js .&#x2F;test2.js --mode porducation<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>再次访问index.html，查看是否正常</p>\n<h2 id=\"调用js中的函数\"><a href=\"#调用js中的函数\" class=\"headerlink\" title=\"调用js中的函数\"></a>调用js中的函数</h2><p>接下来，我们创建test3.js，里面添加一个函数，然后在index.html中调用.<br>test3.js内容如下:</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">window.clearSgline &#x3D; function  () &#123;\n    console.log(&quot;test function &quot;)\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p>提示：如果不这么写，index.html中调用不到，可参考文末链接</p>\n</blockquote>\n<p>在index.html中调用函数clearSgline,如下：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&lt;body&gt;\n    window.onload&#x3D;function()&#123;\n        clearSgline();\n    &#125;\n&lt;&#x2F;body&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>修改test.js文件，引入test3.js,如下:</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">require(&#39;.&#x2F;test3.js&#39;);<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>打包:</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">webpack .&#x2F;test.js .&#x2F;test2.js .&#x2F;test3.js<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>在浏览器中查看index.html,观察函数是否被成功调用</p>\n<h2 id=\"webpack打包css文件\"><a href=\"#webpack打包css文件\" class=\"headerlink\" title=\"webpack打包css文件\"></a>webpack打包css文件</h2><p>Webpack 本身只能处理 JavaScript 模块，如果要处理其他类型的文件，就需要使用 loader 进行转换。</p>\n<p>安装css-loader和style-loader</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">npm install css-loader style-loader --save-dev<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>首先创建一个样式文件style.css，如下：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">body&#123;\n    background:yellowgreen;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>修改test.js文件，添加如下内容:</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">require(&quot;!style-loader!css-loader!.&#x2F;style.css&quot;);<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>require CSS 文件的时候都要写 loader 前缀 !style-loader!css-loader!，当然我们可以根据模块类型（扩展名）来自动绑定需要的 loader</p>\n<blockquote>\n<p>到这里，其实可以发现test.js好似所有js和css的入口</p>\n</blockquote>\n<p>打包,</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">webpack .&#x2F;test.js .&#x2F;test2.js .&#x2F;test3.js  --mode development<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>或者，在打包时指定需要的loader，修改test.js中style.css的引用，如下：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">require(&quot;.&#x2F;style.css&quot;);<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>在打包时，加入对应的loader</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">webpack .&#x2F;test.js .&#x2F;test2.js .&#x2F;test3.js  --mode development --module-bind &#39;css&#x3D;style-loader!css-loader&#39;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h2 id=\"webpack配置文件的使用\"><a href=\"#webpack配置文件的使用\" class=\"headerlink\" title=\"webpack配置文件的使用\"></a>webpack配置文件的使用</h2><p>创建一个webpack.config.js,打包时就会直接使用它了，webpack.config.js内容如下：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">const path &#x3D;require(&#39;path&#39;);\nmodule.exports &#x3D; &#123;\n    entry: &quot;.&#x2F;test.js&quot;,\n    mode: &#39;production&#39;,\n    output: &#123;\n        path: path.join(__dirname,&#39;dist&#39;),\n        filename: &quot;bundle.js&quot;\n    &#125;,\n    module: &#123;\n        rules: [\n            &#123; \n                test: &#x2F;\\.css$&#x2F;,\n                use: [&#39;style-loader&#39;,&#39;css-loader&#39;] ,\n            &#125;\n        ]\n    &#125;\n&#125;;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>打包时使用以下命令即可：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">webpack <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h2 id=\"webpack代码混淆\"><a href=\"#webpack代码混淆\" class=\"headerlink\" title=\"webpack代码混淆\"></a>webpack代码混淆</h2><p>如果不想让其它人轻易的看到自己的代码，可以通过web-obfuscator插件对代码进行混淆。<br>安装：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">npm install --save-dev javascript-obfuscator webpack-obfuscator<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>修改webpack.config.js,如下：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">var WebpackObfuscator &#x3D; require(&#39;webpack-obfuscator&#39;);\n\n&#x2F;&#x2F; ...\n\n&#x2F;&#x2F; webpack plugins array\nplugins: [\n    new WebpackObfuscator (&#123;\n        rotateStringArray: true\n    &#125;, [&#39;excluded_bundle_name.js&#39;])\n]<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p>其中数组中的excluded_bundle_name.js为需要排除的文件<br>如果觉得混淆到此种程度还不够，那还可以添加更多的参数,具体有那些参数，在你安装完javascript-obfuscator之后，可以在其README.md文件中找到，或者参考文末提供的文章链接。</p>\n</blockquote>\n<h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h2><p><a href=\"https://www.runoob.com/w3cnote/webpack-tutorial.html\">1、Webpack 入门教程</a><br><a href=\"https://segmentfault.com/q/1010000012739169/a-1020000012739755\">2、webpack 打包后如何调用JS自定义函数？</a><br><a href=\"webpack%E5%AE%89%E8%A3%85css-loader,style-loader%E5%BF%83%E5%BE%97\">3、webpack.config.js配置</a><br><a href=\"https://www.cnblogs.com/dragonir/archive/2021/02/25/14445767.html\">4、vue项目配置 webpack-obfuscator 进行代码加密混淆</a><br><a href=\"https://www.npmjs.com/package/webpack-obfuscator\">5、webpack代码混淆</a><br><a href=\"https://huadou145.lofter.com/post/205d4db3_1c71e6ba8\">6、 封面图源</a></p>","categories":[{"name":"前端","path":"api/categories/前端.json"}],"tags":[{"name":"NodeJS","path":"api/tags/NodeJS.json"},{"name":"webpack","path":"api/tags/webpack.json"}]}