{"title":"Vue3构建Cesium应用:使用Pinia维护全局变量","slug":"Vue3构建Cesium应用-使用Pinia维护全局变量","date":"2024-03-23T12:55:02.000Z","updated":"2024-03-23T13:25:41.754Z","comments":true,"path":"api/articles/Vue3构建Cesium应用-使用Pinia维护全局变量.json","excerpt":"本文主要介绍如何使用Pinia集中管理全局变量，当然还是主要在Cesium中的应用。","covers":null,"content":"<p>本文主要介绍如何使用Pinia集中管理全局变量，当然还是主要在Cesium中的应用。</p>\n<span id=\"more\"></span>\n\n<p>前面我们使用了依赖注入来向子组件传递viewer对象，本文我们则通过Pinia存储viewer对象，供所有组件使用。</p>\n<h2 id=\"安装与注册Pinia\"><a href=\"#安装与注册Pinia\" class=\"headerlink\" title=\"安装与注册Pinia\"></a>安装与注册Pinia</h2><p>Pinia 是 Vue 的专属状态管理库，它允许你跨组件或页面共享状态。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">pnpm install pinia<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>在<code>main.js</code>中创建Pinia实例并使用<code>app.use(pinia)</code>注册</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> createPinia <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'pinia'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> pinia <span class=\"token operator\">=</span> <span class=\"token function\">createPinia</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>pinia<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"定义Store\"><a href=\"#定义Store\" class=\"headerlink\" title=\"定义Store\"></a>定义Store</h2><p>创建stores&#x2F;global.js文件，并使用<code>defineStore</code>定义store，包括<code>state</code>, <code>getters</code>, 和 <code>actions</code>。</p>\n<p>其中state中定义变量；actions中定义更新state中的变量；</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// store/global.js</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> defineStore <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'pinia'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> useGlobalStore <span class=\"token operator\">=</span> <span class=\"token function\">defineStore</span><span class=\"token punctuation\">(</span><span class=\"token string\">'global'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function-variable function\">state</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 定义全局状态</span>\n    <span class=\"token literal-property property\">viewer</span><span class=\"token operator\">:</span><span class=\"token keyword\">null</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">getters</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 定义getters</span>\n    <span class=\"token function-variable function\">doubleCount</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">state</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> state<span class=\"token punctuation\">.</span>count <span class=\"token operator\">*</span> <span class=\"token number\">2</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">actions</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">updateViewer</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">_viewer</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>viewer<span class=\"token operator\">=</span>_viewer<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<blockquote>\n<p> 注意：以下父组件和子组件的名字描述可能有点问题，只是为了容易理解</p>\n</blockquote>\n<h2 id=\"在父组件中更新viewer的状态\"><a href=\"#在父组件中更新viewer的状态\" class=\"headerlink\" title=\"在父组件中更新viewer的状态\"></a>在父组件中更新viewer的状态</h2><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> useGlobalStore <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@/stores/global'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> globalStore <span class=\"token operator\">=</span> <span class=\"token function\">useGlobalStore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> viewer<span class=\"token operator\">=</span><span class=\"token function\">ref</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">onMounted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span>\n    viewer<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Cesium<span class=\"token punctuation\">.</span>Viewer</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"map\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    globalStore<span class=\"token punctuation\">.</span><span class=\"token function\">updateViewer</span><span class=\"token punctuation\">(</span>viewer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h2 id=\"子组件中使用state中的viewer\"><a href=\"#子组件中使用state中的viewer\" class=\"headerlink\" title=\"子组件中使用state中的viewer\"></a>子组件中使用state中的viewer</h2><p>由于viewer只有在页面挂载后才初始化，因此子组件中需要监听viewer：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> useGlobalStore <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@/stores/global'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> myStore <span class=\"token operator\">=</span> <span class=\"token function\">useGlobalStore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> viewer<span class=\"token operator\">=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">watch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> myStore<span class=\"token punctuation\">.</span>viewer<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">newValue<span class=\"token punctuation\">,</span> oldValue</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  viewer<span class=\"token operator\">=</span>myStore<span class=\"token punctuation\">.</span>viewer<span class=\"token punctuation\">;</span>\n  <span class=\"token function\">showRtCoords</span><span class=\"token punctuation\">(</span>viewer<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>这里有2点需要注意：</p>\n<ol>\n<li>组件中访问store中的变量时，无需state.someState.value。这是因为Pinia内部已经为状态做了响应式处理。当你在<code>state</code>中返回一个对象时，Pinia会自动将其内部的属性转换为响应式引用。这意味着你可以直接通过状态名称访问它们，而无需<code>.value</code>。</li>\n<li>watch监听state变量时，要使用getter。因为Pinia的<code>state</code>中的属性是响应式的，但它们是响应式对象的属性值，而非独立的响应式引用。这与Vue 3的Composition API中的<code>ref</code>和<code>reactive</code>不同，其中你需要使用<code>.value</code>来访问和更新<code>ref</code>的响应式值。Pinia抽象了这一层，使得状态访问更加直观和简洁。</li>\n</ol>\n<blockquote>\n<p><strong>watch</strong>:  它可以是一个 ref (包括计算属性)、一个响应式对象、一个 getter 函数、或多个数据源组成的数组 ，但不能直接侦听响应式对象的属性值 。</p>\n</blockquote>\n","more":"<p>前面我们使用了依赖注入来向子组件传递viewer对象，本文我们则通过Pinia存储viewer对象，供所有组件使用。</p>\n<h2 id=\"安装与注册Pinia\"><a href=\"#安装与注册Pinia\" class=\"headerlink\" title=\"安装与注册Pinia\"></a>安装与注册Pinia</h2><p>Pinia 是 Vue 的专属状态管理库，它允许你跨组件或页面共享状态。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">pnpm install pinia<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>在<code>main.js</code>中创建Pinia实例并使用<code>app.use(pinia)</code>注册</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> createPinia <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'pinia'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> pinia <span class=\"token operator\">=</span> <span class=\"token function\">createPinia</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>pinia<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"定义Store\"><a href=\"#定义Store\" class=\"headerlink\" title=\"定义Store\"></a>定义Store</h2><p>创建stores&#x2F;global.js文件，并使用<code>defineStore</code>定义store，包括<code>state</code>, <code>getters</code>, 和 <code>actions</code>。</p>\n<p>其中state中定义变量；actions中定义更新state中的变量；</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// store/global.js</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> defineStore <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'pinia'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> useGlobalStore <span class=\"token operator\">=</span> <span class=\"token function\">defineStore</span><span class=\"token punctuation\">(</span><span class=\"token string\">'global'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function-variable function\">state</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 定义全局状态</span>\n    <span class=\"token literal-property property\">viewer</span><span class=\"token operator\">:</span><span class=\"token keyword\">null</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">getters</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 定义getters</span>\n    <span class=\"token function-variable function\">doubleCount</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">state</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> state<span class=\"token punctuation\">.</span>count <span class=\"token operator\">*</span> <span class=\"token number\">2</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">actions</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">updateViewer</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">_viewer</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>viewer<span class=\"token operator\">=</span>_viewer<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<blockquote>\n<p> 注意：以下父组件和子组件的名字描述可能有点问题，只是为了容易理解</p>\n</blockquote>\n<h2 id=\"在父组件中更新viewer的状态\"><a href=\"#在父组件中更新viewer的状态\" class=\"headerlink\" title=\"在父组件中更新viewer的状态\"></a>在父组件中更新viewer的状态</h2><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> useGlobalStore <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@/stores/global'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> globalStore <span class=\"token operator\">=</span> <span class=\"token function\">useGlobalStore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> viewer<span class=\"token operator\">=</span><span class=\"token function\">ref</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">onMounted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span>\n    viewer<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Cesium<span class=\"token punctuation\">.</span>Viewer</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"map\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    globalStore<span class=\"token punctuation\">.</span><span class=\"token function\">updateViewer</span><span class=\"token punctuation\">(</span>viewer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h2 id=\"子组件中使用state中的viewer\"><a href=\"#子组件中使用state中的viewer\" class=\"headerlink\" title=\"子组件中使用state中的viewer\"></a>子组件中使用state中的viewer</h2><p>由于viewer只有在页面挂载后才初始化，因此子组件中需要监听viewer：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> useGlobalStore <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@/stores/global'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> myStore <span class=\"token operator\">=</span> <span class=\"token function\">useGlobalStore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> viewer<span class=\"token operator\">=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">watch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> myStore<span class=\"token punctuation\">.</span>viewer<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">newValue<span class=\"token punctuation\">,</span> oldValue</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  viewer<span class=\"token operator\">=</span>myStore<span class=\"token punctuation\">.</span>viewer<span class=\"token punctuation\">;</span>\n  <span class=\"token function\">showRtCoords</span><span class=\"token punctuation\">(</span>viewer<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>这里有2点需要注意：</p>\n<ol>\n<li>组件中访问store中的变量时，无需state.someState.value。这是因为Pinia内部已经为状态做了响应式处理。当你在<code>state</code>中返回一个对象时，Pinia会自动将其内部的属性转换为响应式引用。这意味着你可以直接通过状态名称访问它们，而无需<code>.value</code>。</li>\n<li>watch监听state变量时，要使用getter。因为Pinia的<code>state</code>中的属性是响应式的，但它们是响应式对象的属性值，而非独立的响应式引用。这与Vue 3的Composition API中的<code>ref</code>和<code>reactive</code>不同，其中你需要使用<code>.value</code>来访问和更新<code>ref</code>的响应式值。Pinia抽象了这一层，使得状态访问更加直观和简洁。</li>\n</ol>\n<blockquote>\n<p><strong>watch</strong>:  它可以是一个 ref (包括计算属性)、一个响应式对象、一个 getter 函数、或多个数据源组成的数组 ，但不能直接侦听响应式对象的属性值 。</p>\n</blockquote>","categories":[{"name":"Cesium","path":"api/categories/Cesium.json"},{"name":"Vue3","path":"api/categories/Vue3.json"}],"tags":[{"name":"Cesium","path":"api/tags/Cesium.json"},{"name":"Vue3","path":"api/tags/Vue3.json"}]}